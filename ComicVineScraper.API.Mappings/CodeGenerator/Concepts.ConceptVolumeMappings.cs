// <auto-generated>
// <copyright file="Concepts.IConceptVolumeMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between ConceptVolume and ConceptVolumeModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptVolumeMapperExtensions
    {
        public static IConceptVolumeMapper Mapper = new ConceptVolumeMapper();

        public static void OverrideMapper(IConceptVolumeMapper mapper) { Mapper = mapper; }

        public static IConceptVolume MapToEntity(this IConceptVolumeModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IConceptVolumeModel model, ref IConceptVolume entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IConceptVolumeModel MapToModel(this IConceptVolume entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IConceptVolumeModel MapToModelLite(this IConceptVolume entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IConceptVolumeModel MapToModelListing(this IConceptVolume entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IConceptVolumeSearchModel MapToSearchModel(this IConceptVolumeModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptVolumeModel model, IConceptVolume entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptVolumeMapper : IConceptVolumeMapper
    {
        public virtual IConceptVolume MapToEntity(IConceptVolumeModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<ConceptVolume, IConceptVolumeModel>(model);
            // ConceptVolume Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IConceptVolumeModel model, ref IConceptVolume entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ConceptVolume Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IConceptVolumeModel MapToModel(IConceptVolume entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IConceptVolume, ConceptVolumeModel>(entity);
            // ConceptVolume Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IConceptVolumeModel MapToModelLite(IConceptVolume entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IConceptVolume, ConceptVolumeModel>(entity);
            // ConceptVolume Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual IConceptVolumeModel MapToModelListing(IConceptVolume entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IConceptVolume, ConceptVolumeModel>(entity);
            // ConceptVolume Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual IConceptVolumeSearchModel MapToSearchModel(IConceptVolumeModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IConceptVolumeModel, ConceptVolumeSearchModel>(model);
            // Search Properties
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptApiDetailUrl = model.Concept?.ApiDetailUrl;
            searchModel.ConceptSiteDetailUrl = model.Concept?.SiteDetailUrl;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptShortDescription = model.Concept?.ShortDescription;
            searchModel.ConceptDescription = model.Concept?.Description;
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeApiDetailUrl = model.Volume?.ApiDetailUrl;
            searchModel.VolumeSiteDetailUrl = model.Volume?.SiteDetailUrl;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeShortDescription = model.Volume?.ShortDescription;
            searchModel.VolumeDescription = model.Volume?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IConceptVolumeModel model, IConceptVolume entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ConceptVolume Properties
                // <None>
                // Related Objects
                && model.ConceptId == entity.ConceptId
                && model.VolumeId == entity.VolumeId
                ;
        }
    }
}
