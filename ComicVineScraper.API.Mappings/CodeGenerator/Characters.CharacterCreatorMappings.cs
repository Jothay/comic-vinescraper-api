// <auto-generated>
// <copyright file="Characters.ICharacterCreatorMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between CharacterCreator and CharacterCreatorModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Characters
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class CharacterCreatorMapperExtensions
    {
        public static ICharacterCreatorMapper Mapper = new CharacterCreatorMapper();

        public static void OverrideMapper(ICharacterCreatorMapper mapper) { Mapper = mapper; }

        public static ICharacterCreator MapToEntity(this ICharacterCreatorModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ICharacterCreatorModel model, ref ICharacterCreator entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ICharacterCreatorModel MapToModel(this ICharacterCreator entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ICharacterCreatorModel MapToModelLite(this ICharacterCreator entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ICharacterCreatorModel MapToModelListing(this ICharacterCreator entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ICharacterCreatorSearchModel MapToSearchModel(this ICharacterCreatorModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ICharacterCreatorModel model, ICharacterCreator entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class CharacterCreatorMapper : ICharacterCreatorMapper
    {
        public virtual ICharacterCreator MapToEntity(ICharacterCreatorModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<CharacterCreator, ICharacterCreatorModel>(model);
            // CharacterCreator Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.CreatorId = model.CreatorId;
            entity.Creator = (Person)model.Creator?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ICharacterCreatorModel model, ref ICharacterCreator entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // CharacterCreator Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.CreatorId = model.CreatorId;
            entity.Creator = (Person)model.Creator?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ICharacterCreatorModel MapToModel(ICharacterCreator entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ICharacterCreator, CharacterCreatorModel>(entity);
            // CharacterCreator Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            model.CreatorId = entity.CreatorId;
            model.Creator = entity.Creator?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ICharacterCreatorModel MapToModelLite(ICharacterCreator entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ICharacterCreator, CharacterCreatorModel>(entity);
            // CharacterCreator Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.CreatorId = entity.CreatorId;
            // Return Entity
            return model;
        }

        public virtual ICharacterCreatorModel MapToModelListing(ICharacterCreator entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ICharacterCreator, CharacterCreatorModel>(entity);
            // CharacterCreator Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.CreatorId = entity.CreatorId;
            // Return Entity
            return model;
        }

        public virtual ICharacterCreatorSearchModel MapToSearchModel(ICharacterCreatorModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ICharacterCreatorModel, CharacterCreatorSearchModel>(model);
            // Search Properties
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            searchModel.CreatorId = model.CreatorId;
            searchModel.CreatorCustomKey = model.Creator?.CustomKey;
            searchModel.CreatorApiDetailUrl = model.Creator?.ApiDetailUrl;
            searchModel.CreatorSiteDetailUrl = model.Creator?.SiteDetailUrl;
            searchModel.CreatorName = model.Creator?.Name;
            searchModel.CreatorShortDescription = model.Creator?.ShortDescription;
            searchModel.CreatorDescription = model.Creator?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ICharacterCreatorModel model, ICharacterCreator entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // CharacterCreator Properties
                // <None>
                // Related Objects
                && model.CharacterId == entity.CharacterId
                && model.CreatorId == entity.CreatorId
                ;
        }
    }
}
