// <auto-generated>
// <copyright file="Locations.ILocationAppearedInIssueMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between LocationAppearedInIssue and LocationAppearedInIssueModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Locations
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class LocationAppearedInIssueMapperExtensions
    {
        public static ILocationAppearedInIssueMapper Mapper = new LocationAppearedInIssueMapper();

        public static void OverrideMapper(ILocationAppearedInIssueMapper mapper) { Mapper = mapper; }

        public static ILocationAppearedInIssue MapToEntity(this ILocationAppearedInIssueModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ILocationAppearedInIssueModel model, ref ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ILocationAppearedInIssueModel MapToModel(this ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ILocationAppearedInIssueModel MapToModelLite(this ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ILocationAppearedInIssueModel MapToModelListing(this ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ILocationAppearedInIssueSearchModel MapToSearchModel(this ILocationAppearedInIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ILocationAppearedInIssueModel model, ILocationAppearedInIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class LocationAppearedInIssueMapper : ILocationAppearedInIssueMapper
    {
        public virtual ILocationAppearedInIssue MapToEntity(ILocationAppearedInIssueModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<LocationAppearedInIssue, ILocationAppearedInIssueModel>(model);
            // LocationAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ILocationAppearedInIssueModel model, ref ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // LocationAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ILocationAppearedInIssueModel MapToModel(ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ILocationAppearedInIssue, LocationAppearedInIssueModel>(entity);
            // LocationAppearedInIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.Location = entity.Location?.MapToModel();
            model.AppearedInIssueId = entity.AppearedInIssueId;
            model.AppearedInIssue = entity.AppearedInIssue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ILocationAppearedInIssueModel MapToModelLite(ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ILocationAppearedInIssue, LocationAppearedInIssueModel>(entity);
            // LocationAppearedInIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual ILocationAppearedInIssueModel MapToModelListing(ILocationAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ILocationAppearedInIssue, LocationAppearedInIssueModel>(entity);
            // LocationAppearedInIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual ILocationAppearedInIssueSearchModel MapToSearchModel(ILocationAppearedInIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ILocationAppearedInIssueModel, LocationAppearedInIssueSearchModel>(model);
            // Search Properties
            searchModel.LocationId = model.LocationId;
            searchModel.LocationCustomKey = model.Location?.CustomKey;
            searchModel.LocationApiDetailUrl = model.Location?.ApiDetailUrl;
            searchModel.LocationSiteDetailUrl = model.Location?.SiteDetailUrl;
            searchModel.LocationName = model.Location?.Name;
            searchModel.LocationShortDescription = model.Location?.ShortDescription;
            searchModel.LocationDescription = model.Location?.Description;
            searchModel.AppearedInIssueId = model.AppearedInIssueId;
            searchModel.AppearedInIssueCustomKey = model.AppearedInIssue?.CustomKey;
            searchModel.AppearedInIssueApiDetailUrl = model.AppearedInIssue?.ApiDetailUrl;
            searchModel.AppearedInIssueSiteDetailUrl = model.AppearedInIssue?.SiteDetailUrl;
            searchModel.AppearedInIssueName = model.AppearedInIssue?.Name;
            searchModel.AppearedInIssueShortDescription = model.AppearedInIssue?.ShortDescription;
            searchModel.AppearedInIssueDescription = model.AppearedInIssue?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ILocationAppearedInIssueModel model, ILocationAppearedInIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // LocationAppearedInIssue Properties
                // <None>
                // Related Objects
                && model.LocationId == entity.LocationId
                && model.AppearedInIssueId == entity.AppearedInIssueId
                ;
        }
    }
}
