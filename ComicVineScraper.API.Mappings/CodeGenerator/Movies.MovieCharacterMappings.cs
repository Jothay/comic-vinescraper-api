// <auto-generated>
// <copyright file="Movies.IMovieCharacterMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between MovieCharacter and MovieCharacterModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class MovieCharacterMapperExtensions
    {
        public static IMovieCharacterMapper Mapper = new MovieCharacterMapper();

        public static void OverrideMapper(IMovieCharacterMapper mapper) { Mapper = mapper; }

        public static IMovieCharacter MapToEntity(this IMovieCharacterModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IMovieCharacterModel model, ref IMovieCharacter entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IMovieCharacterModel MapToModel(this IMovieCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IMovieCharacterModel MapToModelLite(this IMovieCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IMovieCharacterModel MapToModelListing(this IMovieCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IMovieCharacterSearchModel MapToSearchModel(this IMovieCharacterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IMovieCharacterModel model, IMovieCharacter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class MovieCharacterMapper : IMovieCharacterMapper
    {
        public virtual IMovieCharacter MapToEntity(IMovieCharacterModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<MovieCharacter, IMovieCharacterModel>(model);
            // MovieCharacter Properties
            // <None>
            // Related Objects
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IMovieCharacterModel model, ref IMovieCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // MovieCharacter Properties
            // <None>
            // Related Objects
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IMovieCharacterModel MapToModel(IMovieCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IMovieCharacter, MovieCharacterModel>(entity);
            // MovieCharacter Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.Movie = entity.Movie?.MapToModel();
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IMovieCharacterModel MapToModelLite(IMovieCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IMovieCharacter, MovieCharacterModel>(entity);
            // MovieCharacter Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual IMovieCharacterModel MapToModelListing(IMovieCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IMovieCharacter, MovieCharacterModel>(entity);
            // MovieCharacter Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual IMovieCharacterSearchModel MapToSearchModel(IMovieCharacterModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IMovieCharacterModel, MovieCharacterSearchModel>(model);
            // Search Properties
            searchModel.MovieId = model.MovieId;
            searchModel.MovieCustomKey = model.Movie?.CustomKey;
            searchModel.MovieApiDetailUrl = model.Movie?.ApiDetailUrl;
            searchModel.MovieSiteDetailUrl = model.Movie?.SiteDetailUrl;
            searchModel.MovieName = model.Movie?.Name;
            searchModel.MovieShortDescription = model.Movie?.ShortDescription;
            searchModel.MovieDescription = model.Movie?.Description;
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IMovieCharacterModel model, IMovieCharacter entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // MovieCharacter Properties
                // <None>
                // Related Objects
                && model.MovieId == entity.MovieId
                && model.CharacterId == entity.CharacterId
                ;
        }
    }
}
