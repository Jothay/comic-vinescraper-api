// <auto-generated>
// <copyright file="People.IGenderModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between Gender and GenderModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.People
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class GenderMapperExtensions
    {
        public static IGenderMapper Mapper = new GenderMapper();

        public static void OverrideMapper(IGenderMapper mapper) { Mapper = mapper; }

        public static IGender MapToEntity(this IGenderModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IGenderModel model, ref IGender entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IGenderModel MapToModel(this IGender entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IGenderModel MapToModelLite(this IGender entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IGenderModel MapToModelListing(this IGender entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IGenderSearchModel MapToSearchModel(this IGenderModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IGenderModel model, IGender entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class GenderMapper : IGenderMapper
    {
        public virtual IGender MapToEntity(IGenderModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Gender, IGenderModel>(model);
            // Gender Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.Characters = model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.People = model.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IGenderModel model, ref IGender entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Gender Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.Characters = model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).ToList();
            entity.People = model.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).ToList();
        }

        public virtual IGenderModel MapToModel(IGender entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IGender, GenderModel>(entity);
            // Gender Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            model.Characters = entity.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModelLite).ToList();
            model.People = entity.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IGenderModel MapToModelLite(IGender entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IGender, GenderModel>(entity);
            // Gender Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IGenderModel MapToModelListing(IGender entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IGender, GenderModel>(entity);
            // Gender Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IGenderSearchModel MapToSearchModel(IGenderModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IGenderModel, GenderSearchModel>(model);
            // Search Properties
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IGenderModel model, IGender entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Gender Properties
                // <None>
                // Related Objects
                // <None>
                ;
        }
    }
}
