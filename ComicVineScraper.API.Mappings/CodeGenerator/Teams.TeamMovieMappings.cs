// <auto-generated>
// <copyright file="Teams.ITeamMovieMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between TeamMovie and TeamMovieModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamMovieMapperExtensions
    {
        public static ITeamMovieMapper Mapper = new TeamMovieMapper();

        public static void OverrideMapper(ITeamMovieMapper mapper) { Mapper = mapper; }

        public static ITeamMovie MapToEntity(this ITeamMovieModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ITeamMovieModel model, ref ITeamMovie entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ITeamMovieModel MapToModel(this ITeamMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ITeamMovieModel MapToModelLite(this ITeamMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ITeamMovieModel MapToModelListing(this ITeamMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ITeamMovieSearchModel MapToSearchModel(this ITeamMovieModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamMovieModel model, ITeamMovie entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamMovieMapper : ITeamMovieMapper
    {
        public virtual ITeamMovie MapToEntity(ITeamMovieModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<TeamMovie, ITeamMovieModel>(model);
            // TeamMovie Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ITeamMovieModel model, ref ITeamMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamMovie Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ITeamMovieModel MapToModel(ITeamMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ITeamMovie, TeamMovieModel>(entity);
            // TeamMovie Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.MovieId = entity.MovieId;
            model.Movie = entity.Movie?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ITeamMovieModel MapToModelLite(ITeamMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ITeamMovie, TeamMovieModel>(entity);
            // TeamMovie Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.MovieId = entity.MovieId;
            // Return Entity
            return model;
        }

        public virtual ITeamMovieModel MapToModelListing(ITeamMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ITeamMovie, TeamMovieModel>(entity);
            // TeamMovie Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.MovieId = entity.MovieId;
            // Return Entity
            return model;
        }

        public virtual ITeamMovieSearchModel MapToSearchModel(ITeamMovieModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamMovieModel, TeamMovieSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamApiDetailUrl = model.Team?.ApiDetailUrl;
            searchModel.TeamSiteDetailUrl = model.Team?.SiteDetailUrl;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamShortDescription = model.Team?.ShortDescription;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.MovieId = model.MovieId;
            searchModel.MovieCustomKey = model.Movie?.CustomKey;
            searchModel.MovieApiDetailUrl = model.Movie?.ApiDetailUrl;
            searchModel.MovieSiteDetailUrl = model.Movie?.SiteDetailUrl;
            searchModel.MovieName = model.Movie?.Name;
            searchModel.MovieShortDescription = model.Movie?.ShortDescription;
            searchModel.MovieDescription = model.Movie?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ITeamMovieModel model, ITeamMovie entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamMovie Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.MovieId == entity.MovieId
                ;
        }
    }
}
