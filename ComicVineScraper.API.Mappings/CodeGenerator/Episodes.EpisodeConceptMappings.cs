// <auto-generated>
// <copyright file="Episodes.IEpisodeConceptMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between EpisodeConcept and EpisodeConceptModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Episodes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class EpisodeConceptMapperExtensions
    {
        public static IEpisodeConceptMapper Mapper = new EpisodeConceptMapper();

        public static void OverrideMapper(IEpisodeConceptMapper mapper) { Mapper = mapper; }

        public static IEpisodeConcept MapToEntity(this IEpisodeConceptModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IEpisodeConceptModel model, ref IEpisodeConcept entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IEpisodeConceptModel MapToModel(this IEpisodeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IEpisodeConceptModel MapToModelLite(this IEpisodeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IEpisodeConceptModel MapToModelListing(this IEpisodeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IEpisodeConceptSearchModel MapToSearchModel(this IEpisodeConceptModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IEpisodeConceptModel model, IEpisodeConcept entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class EpisodeConceptMapper : IEpisodeConceptMapper
    {
        public virtual IEpisodeConcept MapToEntity(IEpisodeConceptModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<EpisodeConcept, IEpisodeConceptModel>(model);
            // EpisodeConcept Properties
            // <None>
            // Related Objects
            entity.EpisodeId = model.EpisodeId;
            entity.Episode = (Episode)model.Episode?.MapToEntity();
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IEpisodeConceptModel model, ref IEpisodeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // EpisodeConcept Properties
            // <None>
            // Related Objects
            entity.EpisodeId = model.EpisodeId;
            entity.Episode = (Episode)model.Episode?.MapToEntity();
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IEpisodeConceptModel MapToModel(IEpisodeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IEpisodeConcept, EpisodeConceptModel>(entity);
            // EpisodeConcept Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.Episode = entity.Episode?.MapToModel();
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IEpisodeConceptModel MapToModelLite(IEpisodeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IEpisodeConcept, EpisodeConceptModel>(entity);
            // EpisodeConcept Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IEpisodeConceptModel MapToModelListing(IEpisodeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IEpisodeConcept, EpisodeConceptModel>(entity);
            // EpisodeConcept Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IEpisodeConceptSearchModel MapToSearchModel(IEpisodeConceptModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IEpisodeConceptModel, EpisodeConceptSearchModel>(model);
            // Search Properties
            searchModel.EpisodeId = model.EpisodeId;
            searchModel.EpisodeCustomKey = model.Episode?.CustomKey;
            searchModel.EpisodeApiDetailUrl = model.Episode?.ApiDetailUrl;
            searchModel.EpisodeSiteDetailUrl = model.Episode?.SiteDetailUrl;
            searchModel.EpisodeName = model.Episode?.Name;
            searchModel.EpisodeShortDescription = model.Episode?.ShortDescription;
            searchModel.EpisodeDescription = model.Episode?.Description;
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptApiDetailUrl = model.Concept?.ApiDetailUrl;
            searchModel.ConceptSiteDetailUrl = model.Concept?.SiteDetailUrl;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptShortDescription = model.Concept?.ShortDescription;
            searchModel.ConceptDescription = model.Concept?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IEpisodeConceptModel model, IEpisodeConcept entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // EpisodeConcept Properties
                // <None>
                // Related Objects
                && model.EpisodeId == entity.EpisodeId
                && model.ConceptId == entity.ConceptId
                ;
        }
    }
}
