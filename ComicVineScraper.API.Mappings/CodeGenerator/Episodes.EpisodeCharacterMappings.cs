// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between EpisodeCharacter and EpisodeCharacterModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Episodes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class EpisodeCharacterMapperExtensions
    {
        public static IEpisodeCharacterMapper Mapper = new EpisodeCharacterMapper();

        public static void OverrideMapper(IEpisodeCharacterMapper mapper) { Mapper = mapper; }

        public static IEpisodeCharacter MapToEntity(this IEpisodeCharacterModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IEpisodeCharacterModel model, ref IEpisodeCharacter entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IEpisodeCharacterModel MapToModel(this IEpisodeCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IEpisodeCharacterModel MapToModelLite(this IEpisodeCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IEpisodeCharacterModel MapToModelListing(this IEpisodeCharacter entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IEpisodeCharacterSearchModel MapToSearchModel(this IEpisodeCharacterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IEpisodeCharacterModel model, IEpisodeCharacter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class EpisodeCharacterMapper : IEpisodeCharacterMapper
    {
        public virtual IEpisodeCharacter MapToEntity(IEpisodeCharacterModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<EpisodeCharacter, IEpisodeCharacterModel>(model);
            // EpisodeCharacter Properties
            // <None>
            // Related Objects
            entity.EpisodeId = model.EpisodeId;
            entity.Episode = (Episode)model.Episode?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IEpisodeCharacterModel model, ref IEpisodeCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // EpisodeCharacter Properties
            // <None>
            // Related Objects
            entity.EpisodeId = model.EpisodeId;
            entity.Episode = (Episode)model.Episode?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IEpisodeCharacterModel MapToModel(IEpisodeCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IEpisodeCharacter, EpisodeCharacterModel>(entity);
            // EpisodeCharacter Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.Episode = entity.Episode?.MapToModel();
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IEpisodeCharacterModel MapToModelLite(IEpisodeCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IEpisodeCharacter, EpisodeCharacterModel>(entity);
            // EpisodeCharacter Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual IEpisodeCharacterModel MapToModelListing(IEpisodeCharacter entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IEpisodeCharacter, EpisodeCharacterModel>(entity);
            // EpisodeCharacter Properties
            // <None>
            // Related Objects
            model.EpisodeId = entity.EpisodeId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual IEpisodeCharacterSearchModel MapToSearchModel(IEpisodeCharacterModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IEpisodeCharacterModel, EpisodeCharacterSearchModel>(model);
            // Search Properties
            searchModel.EpisodeId = model.EpisodeId;
            searchModel.EpisodeCustomKey = model.Episode?.CustomKey;
            searchModel.EpisodeApiDetailUrl = model.Episode?.ApiDetailUrl;
            searchModel.EpisodeSiteDetailUrl = model.Episode?.SiteDetailUrl;
            searchModel.EpisodeName = model.Episode?.Name;
            searchModel.EpisodeShortDescription = model.Episode?.ShortDescription;
            searchModel.EpisodeDescription = model.Episode?.Description;
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IEpisodeCharacterModel model, IEpisodeCharacter entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // EpisodeCharacter Properties
                // <None>
                // Related Objects
                && model.EpisodeId == entity.EpisodeId
                && model.CharacterId == entity.CharacterId
                ;
        }
    }
}
