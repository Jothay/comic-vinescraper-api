// <auto-generated>
// <copyright file="Characters.ICharacterMovieMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between CharacterMovie and CharacterMovieModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Characters
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class CharacterMovieMapperExtensions
    {
        public static ICharacterMovieMapper Mapper = new CharacterMovieMapper();

        public static void OverrideMapper(ICharacterMovieMapper mapper) { Mapper = mapper; }

        public static ICharacterMovie MapToEntity(this ICharacterMovieModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ICharacterMovieModel model, ref ICharacterMovie entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ICharacterMovieModel MapToModel(this ICharacterMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ICharacterMovieModel MapToModelLite(this ICharacterMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ICharacterMovieModel MapToModelListing(this ICharacterMovie entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ICharacterMovieSearchModel MapToSearchModel(this ICharacterMovieModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ICharacterMovieModel model, ICharacterMovie entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class CharacterMovieMapper : ICharacterMovieMapper
    {
        public virtual ICharacterMovie MapToEntity(ICharacterMovieModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<CharacterMovie, ICharacterMovieModel>(model);
            // CharacterMovie Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ICharacterMovieModel model, ref ICharacterMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // CharacterMovie Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ICharacterMovieModel MapToModel(ICharacterMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ICharacterMovie, CharacterMovieModel>(entity);
            // CharacterMovie Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            model.MovieId = entity.MovieId;
            model.Movie = entity.Movie?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ICharacterMovieModel MapToModelLite(ICharacterMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ICharacterMovie, CharacterMovieModel>(entity);
            // CharacterMovie Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.MovieId = entity.MovieId;
            // Return Entity
            return model;
        }

        public virtual ICharacterMovieModel MapToModelListing(ICharacterMovie entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ICharacterMovie, CharacterMovieModel>(entity);
            // CharacterMovie Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.MovieId = entity.MovieId;
            // Return Entity
            return model;
        }

        public virtual ICharacterMovieSearchModel MapToSearchModel(ICharacterMovieModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ICharacterMovieModel, CharacterMovieSearchModel>(model);
            // Search Properties
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            searchModel.MovieId = model.MovieId;
            searchModel.MovieCustomKey = model.Movie?.CustomKey;
            searchModel.MovieApiDetailUrl = model.Movie?.ApiDetailUrl;
            searchModel.MovieSiteDetailUrl = model.Movie?.SiteDetailUrl;
            searchModel.MovieName = model.Movie?.Name;
            searchModel.MovieShortDescription = model.Movie?.ShortDescription;
            searchModel.MovieDescription = model.Movie?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ICharacterMovieModel model, ICharacterMovie entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // CharacterMovie Properties
                // <None>
                // Related Objects
                && model.CharacterId == entity.CharacterId
                && model.MovieId == entity.MovieId
                ;
        }
    }
}
