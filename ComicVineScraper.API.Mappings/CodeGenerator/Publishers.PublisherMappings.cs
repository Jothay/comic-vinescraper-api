// <auto-generated>
// <copyright file="Publishers.IPublisherMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between Publisher and PublisherModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Publishers
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class PublisherMapperExtensions
    {
        public static IPublisherMapper Mapper = new PublisherMapper();

        public static void OverrideMapper(IPublisherMapper mapper) { Mapper = mapper; }

        public static IPublisher MapToEntity(this IPublisherModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IPublisherModel model, ref IPublisher entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IPublisherModel MapToModel(this IPublisher entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IPublisherModel MapToModelLite(this IPublisher entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IPublisherModel MapToModelListing(this IPublisher entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IPublisherSearchModel MapToSearchModel(this IPublisherModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IPublisherModel model, IPublisher entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class PublisherMapper : IPublisherMapper
    {
        public virtual IPublisher MapToEntity(IPublisherModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Publisher, IPublisherModel>(model);
            // Publisher Properties
            entity.LocationAddress = model.LocationAddress;
            entity.LocationCity = model.LocationCity;
            entity.LocationState = model.LocationState;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.CharactersPublished = model.CharactersPublished?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.PublisherAliases = model.PublisherAliases?.Where(i => i.Active).Select(PublisherAliasMapperExtensions.MapToEntity).Cast<PublisherAlias>().ToList();
            entity.SeriesPublished = model.SeriesPublished?.Where(i => i.Active).Select(SeriesMapperExtensions.MapToEntity).Cast<Series>().ToList();
            entity.StoryArcsPublished = model.StoryArcsPublished?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.TeamsPublished = model.TeamsPublished?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            entity.VolumesPublished = model.VolumesPublished?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IPublisherModel model, ref IPublisher entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Publisher Properties
            entity.LocationAddress = model.LocationAddress;
            entity.LocationCity = model.LocationCity;
            entity.LocationState = model.LocationState;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.CharactersPublished = model.CharactersPublished?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).ToList();
            entity.PublisherAliases = model.PublisherAliases?.Where(i => i.Active).Select(PublisherAliasMapperExtensions.MapToEntity).ToList();
            entity.SeriesPublished = model.SeriesPublished?.Where(i => i.Active).Select(SeriesMapperExtensions.MapToEntity).ToList();
            entity.StoryArcsPublished = model.StoryArcsPublished?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).ToList();
            entity.TeamsPublished = model.TeamsPublished?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).ToList();
            entity.VolumesPublished = model.VolumesPublished?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).ToList();
        }

        public virtual IPublisherModel MapToModel(IPublisher entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IPublisher, PublisherModel>(entity);
            // Publisher Properties
            model.LocationAddress = entity.LocationAddress;
            model.LocationCity = entity.LocationCity;
            model.LocationState = entity.LocationState;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            // Associated Objects
            model.CharactersPublished = entity.CharactersPublished?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModelLite).ToList();
            model.PublisherAliases = entity.PublisherAliases?.Where(i => i.Active).Select(PublisherAliasMapperExtensions.MapToModelLite).ToList();
            model.SeriesPublished = entity.SeriesPublished?.Where(i => i.Active).Select(SeriesMapperExtensions.MapToModelLite).ToList();
            model.StoryArcsPublished = entity.StoryArcsPublished?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModelLite).ToList();
            model.TeamsPublished = entity.TeamsPublished?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModelLite).ToList();
            model.VolumesPublished = entity.VolumesPublished?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IPublisherModel MapToModelLite(IPublisher entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IPublisher, PublisherModel>(entity);
            // Publisher Properties
            model.LocationAddress = entity.LocationAddress;
            model.LocationCity = entity.LocationCity;
            model.LocationState = entity.LocationState;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public virtual IPublisherModel MapToModelListing(IPublisher entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IPublisher, PublisherModel>(entity);
            // Publisher Properties
            model.LocationAddress = entity.LocationAddress;
            model.LocationCity = entity.LocationCity;
            model.LocationState = entity.LocationState;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public virtual IPublisherSearchModel MapToSearchModel(IPublisherModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IPublisherModel, PublisherSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileApiDetailUrl = model.PrimaryImageFile?.ApiDetailUrl;
            searchModel.PrimaryImageFileSiteDetailUrl = model.PrimaryImageFile?.SiteDetailUrl;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileShortDescription = model.PrimaryImageFile?.ShortDescription;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IPublisherModel model, IPublisher entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Publisher Properties
                && model.LocationAddress == entity.LocationAddress
                && model.LocationCity == entity.LocationCity
                && model.LocationState == entity.LocationState
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                ;
        }
    }
}
