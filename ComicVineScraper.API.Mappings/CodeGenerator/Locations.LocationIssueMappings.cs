// <auto-generated>
// <copyright file="Locations.ILocationIssueModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between LocationIssue and LocationIssueModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Locations
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class LocationIssueMapperExtensions
    {
        public static ILocationIssueMapper Mapper = new LocationIssueMapper();

        public static void OverrideMapper(ILocationIssueMapper mapper) { Mapper = mapper; }

        public static ILocationIssue MapToEntity(this ILocationIssueModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ILocationIssueModel model, ref ILocationIssue entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ILocationIssueModel MapToModel(this ILocationIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ILocationIssueModel MapToModelLite(this ILocationIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ILocationIssueModel MapToModelListing(this ILocationIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ILocationIssueSearchModel MapToSearchModel(this ILocationIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ILocationIssueModel model, ILocationIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class LocationIssueMapper : ILocationIssueMapper
    {
        public virtual ILocationIssue MapToEntity(ILocationIssueModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<LocationIssue, ILocationIssueModel>(model);
            // LocationIssue Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ILocationIssueModel model, ref ILocationIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // LocationIssue Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ILocationIssueModel MapToModel(ILocationIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ILocationIssue, LocationIssueModel>(entity);
            // LocationIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.Location = entity.Location?.MapToModel();
            model.IssueId = entity.IssueId;
            model.Issue = entity.Issue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ILocationIssueModel MapToModelLite(ILocationIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ILocationIssue, LocationIssueModel>(entity);
            // LocationIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public virtual ILocationIssueModel MapToModelListing(ILocationIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ILocationIssue, LocationIssueModel>(entity);
            // LocationIssue Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public virtual ILocationIssueSearchModel MapToSearchModel(ILocationIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ILocationIssueModel, LocationIssueSearchModel>(model);
            // Search Properties
            searchModel.LocationId = model.LocationId;
            searchModel.LocationCustomKey = model.Location?.CustomKey;
            searchModel.LocationApiDetailUrl = model.Location?.ApiDetailUrl;
            searchModel.LocationSiteDetailUrl = model.Location?.SiteDetailUrl;
            searchModel.LocationName = model.Location?.Name;
            searchModel.LocationShortDescription = model.Location?.ShortDescription;
            searchModel.LocationDescription = model.Location?.Description;
            searchModel.IssueId = model.IssueId;
            searchModel.IssueCustomKey = model.Issue?.CustomKey;
            searchModel.IssueApiDetailUrl = model.Issue?.ApiDetailUrl;
            searchModel.IssueSiteDetailUrl = model.Issue?.SiteDetailUrl;
            searchModel.IssueName = model.Issue?.Name;
            searchModel.IssueShortDescription = model.Issue?.ShortDescription;
            searchModel.IssueDescription = model.Issue?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ILocationIssueModel model, ILocationIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // LocationIssue Properties
                // <None>
                // Related Objects
                && model.LocationId == entity.LocationId
                && model.IssueId == entity.IssueId
                ;
        }
    }
}
