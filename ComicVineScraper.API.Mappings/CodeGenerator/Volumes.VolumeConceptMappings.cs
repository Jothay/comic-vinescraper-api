// <auto-generated>
// <copyright file="Volumes.IVolumeConceptMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between VolumeConcept and VolumeConceptModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Volumes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class VolumeConceptMapperExtensions
    {
        public static IVolumeConceptMapper Mapper = new VolumeConceptMapper();

        public static void OverrideMapper(IVolumeConceptMapper mapper) { Mapper = mapper; }

        public static IVolumeConcept MapToEntity(this IVolumeConceptModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IVolumeConceptModel model, ref IVolumeConcept entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IVolumeConceptModel MapToModel(this IVolumeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IVolumeConceptModel MapToModelLite(this IVolumeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IVolumeConceptModel MapToModelListing(this IVolumeConcept entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IVolumeConceptSearchModel MapToSearchModel(this IVolumeConceptModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IVolumeConceptModel model, IVolumeConcept entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class VolumeConceptMapper : IVolumeConceptMapper
    {
        public virtual IVolumeConcept MapToEntity(IVolumeConceptModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<VolumeConcept, IVolumeConceptModel>(model);
            // VolumeConcept Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IVolumeConceptModel model, ref IVolumeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // VolumeConcept Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IVolumeConceptModel MapToModel(IVolumeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IVolumeConcept, VolumeConceptModel>(entity);
            // VolumeConcept Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IVolumeConceptModel MapToModelLite(IVolumeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IVolumeConcept, VolumeConceptModel>(entity);
            // VolumeConcept Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IVolumeConceptModel MapToModelListing(IVolumeConcept entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IVolumeConcept, VolumeConceptModel>(entity);
            // VolumeConcept Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IVolumeConceptSearchModel MapToSearchModel(IVolumeConceptModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IVolumeConceptModel, VolumeConceptSearchModel>(model);
            // Search Properties
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeApiDetailUrl = model.Volume?.ApiDetailUrl;
            searchModel.VolumeSiteDetailUrl = model.Volume?.SiteDetailUrl;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeShortDescription = model.Volume?.ShortDescription;
            searchModel.VolumeDescription = model.Volume?.Description;
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptApiDetailUrl = model.Concept?.ApiDetailUrl;
            searchModel.ConceptSiteDetailUrl = model.Concept?.SiteDetailUrl;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptShortDescription = model.Concept?.ShortDescription;
            searchModel.ConceptDescription = model.Concept?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IVolumeConceptModel model, IVolumeConcept entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // VolumeConcept Properties
                // <None>
                // Related Objects
                && model.VolumeId == entity.VolumeId
                && model.ConceptId == entity.ConceptId
                ;
        }
    }
}
