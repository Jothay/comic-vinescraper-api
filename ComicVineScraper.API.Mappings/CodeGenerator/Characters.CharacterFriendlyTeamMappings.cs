// <auto-generated>
// <copyright file="Characters.ICharacterFriendlyTeamModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between CharacterFriendlyTeam and CharacterFriendlyTeamModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Characters
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class CharacterFriendlyTeamMapperExtensions
    {
        public static ICharacterFriendlyTeamMapper Mapper = new CharacterFriendlyTeamMapper();

        public static void OverrideMapper(ICharacterFriendlyTeamMapper mapper) { Mapper = mapper; }

        public static ICharacterFriendlyTeam MapToEntity(this ICharacterFriendlyTeamModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ICharacterFriendlyTeamModel model, ref ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ICharacterFriendlyTeamModel MapToModel(this ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ICharacterFriendlyTeamModel MapToModelLite(this ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ICharacterFriendlyTeamModel MapToModelListing(this ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ICharacterFriendlyTeamSearchModel MapToSearchModel(this ICharacterFriendlyTeamModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ICharacterFriendlyTeamModel model, ICharacterFriendlyTeam entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class CharacterFriendlyTeamMapper : ICharacterFriendlyTeamMapper
    {
        public virtual ICharacterFriendlyTeam MapToEntity(ICharacterFriendlyTeamModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<CharacterFriendlyTeam, ICharacterFriendlyTeamModel>(model);
            // CharacterFriendlyTeam Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.FriendlyTeamId = model.FriendlyTeamId;
            entity.FriendlyTeam = (Team)model.FriendlyTeam?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ICharacterFriendlyTeamModel model, ref ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // CharacterFriendlyTeam Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.FriendlyTeamId = model.FriendlyTeamId;
            entity.FriendlyTeam = (Team)model.FriendlyTeam?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ICharacterFriendlyTeamModel MapToModel(ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ICharacterFriendlyTeam, CharacterFriendlyTeamModel>(entity);
            // CharacterFriendlyTeam Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            model.FriendlyTeamId = entity.FriendlyTeamId;
            model.FriendlyTeam = entity.FriendlyTeam?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ICharacterFriendlyTeamModel MapToModelLite(ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ICharacterFriendlyTeam, CharacterFriendlyTeamModel>(entity);
            // CharacterFriendlyTeam Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.FriendlyTeamId = entity.FriendlyTeamId;
            // Return Entity
            return model;
        }

        public virtual ICharacterFriendlyTeamModel MapToModelListing(ICharacterFriendlyTeam entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ICharacterFriendlyTeam, CharacterFriendlyTeamModel>(entity);
            // CharacterFriendlyTeam Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.FriendlyTeamId = entity.FriendlyTeamId;
            // Return Entity
            return model;
        }

        public virtual ICharacterFriendlyTeamSearchModel MapToSearchModel(ICharacterFriendlyTeamModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ICharacterFriendlyTeamModel, CharacterFriendlyTeamSearchModel>(model);
            // Search Properties
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            searchModel.FriendlyTeamId = model.FriendlyTeamId;
            searchModel.FriendlyTeamCustomKey = model.FriendlyTeam?.CustomKey;
            searchModel.FriendlyTeamApiDetailUrl = model.FriendlyTeam?.ApiDetailUrl;
            searchModel.FriendlyTeamSiteDetailUrl = model.FriendlyTeam?.SiteDetailUrl;
            searchModel.FriendlyTeamName = model.FriendlyTeam?.Name;
            searchModel.FriendlyTeamShortDescription = model.FriendlyTeam?.ShortDescription;
            searchModel.FriendlyTeamDescription = model.FriendlyTeam?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ICharacterFriendlyTeamModel model, ICharacterFriendlyTeam entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // CharacterFriendlyTeam Properties
                // <None>
                // Related Objects
                && model.CharacterId == entity.CharacterId
                && model.FriendlyTeamId == entity.FriendlyTeamId
                ;
        }
    }
}
