// <auto-generated>
// <copyright file="Concepts.IConceptAliasMappings.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Layer functions between ConceptAlias and ConceptAliasModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in
// ComicVineScraper.API.Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVineScraper.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptAliasMapperExtensions
    {
        public static IConceptAliasMapper Mapper = new ConceptAliasMapper();

        public static void OverrideMapper(IConceptAliasMapper mapper) { Mapper = mapper; }

        public static IConceptAlias MapToEntity(this IConceptAliasModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IConceptAliasModel model, ref IConceptAlias entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IConceptAliasModel MapToModel(this IConceptAlias entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IConceptAliasModel MapToModelLite(this IConceptAlias entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IConceptAliasModel MapToModelListing(this IConceptAlias entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IConceptAliasSearchModel MapToSearchModel(this IConceptAliasModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptAliasModel model, IConceptAlias entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptAliasMapper : IConceptAliasMapper
    {
        public virtual IConceptAlias MapToEntity(IConceptAliasModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<ConceptAlias, IConceptAliasModel>(model);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IConceptAliasModel model, ref IConceptAlias entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IConceptAliasModel MapToModel(IConceptAlias entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IConceptAliasModel MapToModelLite(IConceptAlias entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IConceptAliasModel MapToModelListing(IConceptAlias entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public virtual IConceptAliasSearchModel MapToSearchModel(IConceptAliasModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IConceptAliasModel, ConceptAliasSearchModel>(model);
            // Search Properties
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptApiDetailUrl = model.Concept?.ApiDetailUrl;
            searchModel.ConceptSiteDetailUrl = model.Concept?.SiteDetailUrl;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptShortDescription = model.Concept?.ShortDescription;
            searchModel.ConceptDescription = model.Concept?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IConceptAliasModel model, IConceptAlias entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // ConceptAlias Properties
                // <None>
                // Related Objects
                && model.ConceptId == entity.ConceptId
                ;
        }
    }
}
