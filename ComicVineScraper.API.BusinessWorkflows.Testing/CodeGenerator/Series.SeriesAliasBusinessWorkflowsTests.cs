// <auto-generated>
// <copyright file="Series.ISeriesAliasBusinessWorkflowsTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the SeriesAliasesRepository Class.</summary>
// <remarks>This file was auto-generated using BusinessWorkflowsTestingFileMaster.tt in
// ComicVineScraper.API.BusinessWorkflows.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.BusinessWorkflows.Series
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class SeriesAliasesMockingSetup
    {
        public static Mock<ISeriesAliasModel> DoMockingSetupForSeriesAliasModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockSeriesAliasModel = new Mock<ISeriesAliasModel>();
            // Mock Functions
            mockSeriesAliasModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockSeriesAliasModel.Setup(m => m.Active).Returns(() => true);
            mockSeriesAliasModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockSeriesAliasModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockSeriesAliasModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockSeriesAliasModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockSeriesAliasModel.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockSeriesAliasModel.Setup(m => m.SeriesId).Returns(() => 1);
            mockSeriesAliasModel.Setup(m => m.Series).Returns(() => new SeriesModel());
            // Associated Objects
            // <None>
            // Return
            return mockSeriesAliasModel;
        }

        public static Mock<ISeriesAlias> DoMockingSetupForSeriesAlias(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockSeriesAlias = new Mock<ISeriesAlias>();
            // Mock Functions
            mockSeriesAlias.Setup(m => m.Id).Returns(() => idReturnValue);
            mockSeriesAlias.Setup(m => m.Active).Returns(() => true);
            mockSeriesAlias.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockSeriesAlias.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockSeriesAlias.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockSeriesAlias.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockSeriesAlias.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockSeriesAlias.Setup(m => m.SeriesId).Returns(() => 1);
            mockSeriesAlias.Setup(m => m.Series).Returns(() => new Series());
            // Associated Objects
            // <None>
            // Return
            return mockSeriesAlias;
        }

        public static Mock<ISeriesAliasesRepository> DoMockingSetupForRepository()
        {
            var mockSeriesAliasesRepository = new Mock<ISeriesAliasesRepository>();
            // Mock Functions
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<ISeriesAlias>>().Object);
            mockSeriesAliasesRepository.Setup(m => m.Search(It.IsAny<ISeriesAliasSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ISeriesAlias>>().Object);
            mockSeriesAliasesRepository.Setup(m => m.Add(It.IsAny<ISeriesAlias>()));
            mockSeriesAliasesRepository.Setup(m => m.Remove(It.IsAny<ISeriesAlias>()));
            mockSeriesAliasesRepository.Setup(m => m.Deactivate(It.IsAny<ISeriesAlias>()));
            mockSeriesAliasesRepository.Setup(m => m.Update(It.IsAny<ISeriesAlias>()));
            // Return
            return mockSeriesAliasesRepository;
        }
    }

    public class SeriesAliasesBusinessWorkflowsTests
    {
        #region Read
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<SeriesAliasModel>(person);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<SeriesAliasModel>(person);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Search_Should_ReturnAListOfSeriesAliases()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ISeriesAliasSearchModel>();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Search(It.IsAny<ISeriesAliasSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Search_AsListing_Should_ReturnAListOfSeriesAliasesWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ISeriesAliasSearchModel>();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Search(It.IsAny<ISeriesAliasSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Search(It.IsAny<ISeriesAliasSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ISeriesAlias>>().Object);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            var model = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAliasModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Add(It.IsAny<ISeriesAlias>()), Times.Once);
        }
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var mockSeriesAlias = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAlias(1);
            mockSeriesAliasesRepository.Setup(m => m.Search(It.IsAny<ISeriesAliasSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<ISeriesAlias> { mockSeriesAlias.Object } );
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockSeriesAlias.Object);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            var model = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAliasModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Add(It.IsAny<ISeriesAlias>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockSeriesAlias = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAlias(1);
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockSeriesAlias.Object);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            var expectedName = "Stephen King (2)";
            var model = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAliasModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockSeriesAlias.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAlias(1);
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            var model = SeriesAliasesMockingSetup.DoMockingSetupForSeriesAliasModel(1);
            ISeriesAliasModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Deactivate(It.IsAny<ISeriesAlias>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Deactivate(It.IsAny<ISeriesAlias>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Remove(It.IsAny<ISeriesAlias>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            var mockSeriesAliasesMapper = new Mock<ISeriesAliasMapper>();
            mockSeriesAliasesMapper.Setup(m => m.AreEqual(It.IsAny<ISeriesAliasModel>(), It.IsAny<ISeriesAlias>())).Returns(() => true);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, mockSeriesAliasesMapper.Object);
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ISeriesAlias>().Object);
            mockSeriesAliasesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockSeriesAliasesRepository.Verify(m => m.Remove(It.IsAny<ISeriesAlias>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "SeriesAliases")]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockSeriesAliasesRepository = SeriesAliasesMockingSetup.DoMockingSetupForRepository();
            mockSeriesAliasesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new SeriesAliasesBusinessWorkflow(mockSeriesAliasesRepository.Object, new SeriesAliasMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
