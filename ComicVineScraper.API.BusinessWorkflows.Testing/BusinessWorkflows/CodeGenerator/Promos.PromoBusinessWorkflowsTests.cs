// <auto-generated>
// <copyright file="Promos.IPromoRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PromosRepository Class.</summary>
// <remarks>This file was autogenerated using BusinessWorkflowsTestingFileMaster.tt in ComicVine.API.BusinessWorkflows.Testing\BusinessWorkflows\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.BusinessWorkflows.Promos
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class PromosMockingSetup
    {
        public static Mock<IPromoModel> DoMockingSetupForPromoModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPromoModel = new Mock<IPromoModel>();
            // Mock Functions
            mockPromoModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPromoModel.Setup(m => m.Active).Returns(() => true);
            mockPromoModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPromoModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromoModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromoModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPromoModel.Setup(m => m.UpdatedDate).Returns(() => null);
            mockPromoModel.Setup(m => m.Name).Returns(() => name);
            mockPromoModel.Setup(m => m.ShortDescription).Returns(() => "short");
            mockPromoModel.Setup(m => m.Description).Returns(() => "long");
            mockPromoModel.Setup(m => m.Link).Returns(() => "Link");
            // Related Objects
            mockPromoModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPromoModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockPromoModel.Setup(m => m.AuthorId).Returns(() => 1);
            mockPromoModel.Setup(m => m.Author).Returns(() => new PersonModel());
            mockPromoModel.Setup(m => m.ResourceTypeId).Returns(() => 1);
            mockPromoModel.Setup(m => m.ResourceType).Returns(() => new ResourceTypeModel());
            // Associated Objects
            // <None>
            // Return
            return mockPromoModel;
        }

        public static Mock<IPromo> DoMockingSetupForPromo(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPromo = new Mock<IPromo>();
            // Mock Functions
            mockPromo.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPromo.Setup(m => m.Active).Returns(() => true);
            mockPromo.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPromo.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromo.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromo.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPromo.Setup(m => m.UpdatedDate).Returns(() => null);
            mockPromo.Setup(m => m.Name).Returns(() => name);
            mockPromo.Setup(m => m.ShortDescription).Returns(() => "short");
            mockPromo.Setup(m => m.Description).Returns(() => "long");
            mockPromo.Setup(m => m.Link).Returns(() => "Link");
            // Related Objects
            mockPromo.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPromo.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockPromo.Setup(m => m.AuthorId).Returns(() => 1);
            mockPromo.Setup(m => m.Author).Returns(() => new Person());
            mockPromo.Setup(m => m.ResourceTypeId).Returns(() => 1);
            mockPromo.Setup(m => m.ResourceType).Returns(() => new ResourceType());
            // Associated Objects
            // <None>
            // Return
            return mockPromo;
        }

        public static Mock<IPromosRepository> DoMockingSetupForRepository()
        {
            var mockPromosRepository = new Mock<IPromosRepository>();
            // Mock Functions
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<IPromo>>().Object);
            mockPromosRepository.Setup(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IPromo>>().Object);
            mockPromosRepository.Setup(m => m.Add(It.IsAny<IPromo>()));
            mockPromosRepository.Setup(m => m.Remove(It.IsAny<IPromo>()));
            mockPromosRepository.Setup(m => m.Deactivate(It.IsAny<IPromo>()));
            mockPromosRepository.Setup(m => m.Update(It.IsAny<IPromo>()));
            // Return
            return mockPromosRepository;
        }
    }

    public class PromosBusinessWorkflowsTests
    {
        #region Read
        [Fact][Trait("Category", "Promos")]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<PromoModel>(person);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<PromoModel>(person);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Search_Should_ReturnAListOfPromos()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IPromoSearchModel>();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockPromosRepository.Verify(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Search_AsListing_Should_ReturnAListOfPromosWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IPromoSearchModel>();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockPromosRepository.Verify(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact][Trait("Category", "Promos")]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IPromo>>().Object);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            var model = PromosMockingSetup.DoMockingSetupForPromoModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockPromosRepository.Verify(m => m.Add(It.IsAny<IPromo>()), Times.Once);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var mockPromo = PromosMockingSetup.DoMockingSetupForPromo(1);
            mockPromosRepository.Setup(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<IPromo> { mockPromo.Object } );
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockPromo.Object);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            var model = PromosMockingSetup.DoMockingSetupForPromoModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockPromosRepository.Verify(m => m.Add(It.IsAny<IPromo>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact][Trait("Category", "Promos")]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockPromo = PromosMockingSetup.DoMockingSetupForPromo(1);
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockPromo.Object);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            var expectedName = "Stephen King (2)";
            var model = PromosMockingSetup.DoMockingSetupForPromoModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockPromo.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = PromosMockingSetup.DoMockingSetupForPromo(1);
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            var model = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            IPromoModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("Stephen King", result.Name);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact][Trait("Category", "Promos")]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockPromosRepository.Verify(m => m.Deactivate(It.IsAny<IPromo>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            mockPromosRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockPromosRepository.Verify(m => m.Deactivate(It.IsAny<IPromo>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact][Trait("Category", "Promos")]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            mockPromosRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockPromosRepository.Verify(m => m.Remove(It.IsAny<IPromo>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            var mockPromosMapper = new Mock<IPromoMapper>();
            mockPromosMapper.Setup(m => m.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>())).Returns(() => true);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, mockPromosMapper.Object);
            mockPromosRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPromo>().Object);
            mockPromosRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockPromosRepository.Verify(m => m.Remove(It.IsAny<IPromo>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockPromosRepository = PromosMockingSetup.DoMockingSetupForRepository();
            mockPromosRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new PromosBusinessWorkflow(mockPromosRepository.Object, new PromoMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
