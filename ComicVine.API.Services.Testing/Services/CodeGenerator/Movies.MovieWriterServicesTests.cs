// <auto-generated>
// <copyright file="Movies.IMovieWriterServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieWritersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MovieWritersMockingSetup
    {
        public static Mock<IMovieWritersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMovieWritersBusinessWorkflow = new Mock<IMovieWritersBusinessWorkflow>();
            // Mock Functions
            mockMovieWritersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieWriterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieWriterModel>());
            mockMovieWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieWriterModel>().Object);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieWriterModel>().Object);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieWriterModel>())).Returns(() => new Mock<IMovieWriterModel>().Object);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieWriterModel>())).Returns(() => new Mock<IMovieWriterModel>().Object);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMovieWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMovieWritersBusinessWorkflow;
        }
    }

    //public class MovieWritersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_GetMovieWriters_Should_ReturnAListOfMovieWriterModels()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new GetMovieWriters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieWriterModel>>(response);
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_GetMovieWritersAsListing_Should_ReturnAListOfMovieWriterModels()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new GetMovieWritersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieWriterModel>>(response);
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_GetMovieWriter_Should_ReturnAnMovieWriterModel()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new GetMovieWriter { ID = 1 });
            Assert.Equal(nameof(IMovieWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_GetMovieWriterByKey_Should_ReturnAnMovieWriterModel()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new GetMovieWriterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_CreateMovieWriter_Should_ReturnAnMovieWriterModel()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new CreateMovieWriter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_UpdateMovieWriter_Should_ReturnAnMovieWriterModel()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new UpdateMovieWriter { Id = 1 });
            Assert.Equal(nameof(IMovieWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_DeactivateMovieWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new DeactivateMovieWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_DeactivateMovieWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new DeactivateMovieWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_RemoveMovieWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new RemoveMovieWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieWriters")]
        public void Verify_RemoveMovieWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieWritersServices>();
            var response = service.Any(new RemoveMovieWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
