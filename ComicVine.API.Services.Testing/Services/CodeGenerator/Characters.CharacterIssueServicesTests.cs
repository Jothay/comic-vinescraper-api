// <auto-generated>
// <copyright file="Characters.ICharacterIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterIssuesMockingSetup
    {
        public static Mock<ICharacterIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterIssuesBusinessWorkflow = new Mock<ICharacterIssuesBusinessWorkflow>();
            // Mock Functions
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterIssueModel>());
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterIssueModel>().Object);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterIssueModel>().Object);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterIssueModel>())).Returns(() => new Mock<ICharacterIssueModel>().Object);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterIssueModel>())).Returns(() => new Mock<ICharacterIssueModel>().Object);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterIssuesBusinessWorkflow;
        }
    }

    //public class CharacterIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_GetCharacterIssues_Should_ReturnAListOfCharacterIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new GetCharacterIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_GetCharacterIssuesAsListing_Should_ReturnAListOfCharacterIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new GetCharacterIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_GetCharacterIssue_Should_ReturnAnCharacterIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new GetCharacterIssue { ID = 1 });
            Assert.Equal(nameof(ICharacterIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_GetCharacterIssueByKey_Should_ReturnAnCharacterIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new GetCharacterIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_CreateCharacterIssue_Should_ReturnAnCharacterIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new CreateCharacterIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_UpdateCharacterIssue_Should_ReturnAnCharacterIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new UpdateCharacterIssue { Id = 1 });
            Assert.Equal(nameof(ICharacterIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_DeactivateCharacterIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new DeactivateCharacterIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_DeactivateCharacterIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new DeactivateCharacterIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_RemoveCharacterIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new RemoveCharacterIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterIssues")]
        public void Verify_RemoveCharacterIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterIssuesServices>();
            var response = service.Any(new RemoveCharacterIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
