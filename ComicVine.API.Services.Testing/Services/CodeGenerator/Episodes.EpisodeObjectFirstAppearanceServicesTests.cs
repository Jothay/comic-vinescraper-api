// <auto-generated>
// <copyright file="Episodes.IEpisodeObjectFirstAppearanceServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeObjectFirstAppearancesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeObjectFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeObjectFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeObjectFirstAppearancesBusinessWorkflow = new Mock<IEpisodeObjectFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeObjectFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeObjectFirstAppearanceModel>());
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeObjectFirstAppearanceModel>().Object);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeObjectFirstAppearanceModel>().Object);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeObjectFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeObjectFirstAppearanceModel>().Object);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeObjectFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeObjectFirstAppearanceModel>().Object);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeObjectFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeObjectFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeObjectFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_GetEpisodeObjectFirstAppearances_Should_ReturnAListOfEpisodeObjectFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeObjectFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeObjectFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_GetEpisodeObjectFirstAppearancesAsListing_Should_ReturnAListOfEpisodeObjectFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeObjectFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeObjectFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_GetEpisodeObjectFirstAppearance_Should_ReturnAnEpisodeObjectFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeObjectFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeObjectFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_GetEpisodeObjectFirstAppearanceByKey_Should_ReturnAnEpisodeObjectFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeObjectFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeObjectFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_CreateEpisodeObjectFirstAppearance_Should_ReturnAnEpisodeObjectFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeObjectFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeObjectFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_UpdateEpisodeObjectFirstAppearance_Should_ReturnAnEpisodeObjectFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeObjectFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeObjectFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_DeactivateEpisodeObjectFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeObjectFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_DeactivateEpisodeObjectFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeObjectFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_RemoveEpisodeObjectFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeObjectFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjectFirstAppearances")]
        public void Verify_RemoveEpisodeObjectFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeObjectFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
