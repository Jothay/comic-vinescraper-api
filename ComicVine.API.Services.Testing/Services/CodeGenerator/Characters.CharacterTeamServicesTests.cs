// <auto-generated>
// <copyright file="Characters.ICharacterTeamServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterTeamsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterTeamsMockingSetup
    {
        public static Mock<ICharacterTeamsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterTeamsBusinessWorkflow = new Mock<ICharacterTeamsBusinessWorkflow>();
            // Mock Functions
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterTeamSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterTeamModel>());
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterTeamModel>().Object);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterTeamModel>().Object);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterTeamModel>())).Returns(() => new Mock<ICharacterTeamModel>().Object);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterTeamModel>())).Returns(() => new Mock<ICharacterTeamModel>().Object);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterTeamsBusinessWorkflow;
        }
    }

    //public class CharacterTeamsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_GetCharacterTeams_Should_ReturnAListOfCharacterTeamModels()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new GetCharacterTeams { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterTeamModel>>(response);
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_GetCharacterTeamsAsListing_Should_ReturnAListOfCharacterTeamModels()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new GetCharacterTeamsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterTeamModel>>(response);
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_GetCharacterTeam_Should_ReturnAnCharacterTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new GetCharacterTeam { ID = 1 });
            Assert.Equal(nameof(ICharacterTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_GetCharacterTeamByKey_Should_ReturnAnCharacterTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new GetCharacterTeamByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_CreateCharacterTeam_Should_ReturnAnCharacterTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new CreateCharacterTeam { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_UpdateCharacterTeam_Should_ReturnAnCharacterTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new UpdateCharacterTeam { Id = 1 });
            Assert.Equal(nameof(ICharacterTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_DeactivateCharacterTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new DeactivateCharacterTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_DeactivateCharacterTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new DeactivateCharacterTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_RemoveCharacterTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new RemoveCharacterTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_RemoveCharacterTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterTeamsServices>();
            var response = service.Any(new RemoveCharacterTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
