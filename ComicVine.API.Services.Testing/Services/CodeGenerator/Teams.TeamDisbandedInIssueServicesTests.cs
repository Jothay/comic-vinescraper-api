// <auto-generated>
// <copyright file="Teams.ITeamDisbandedInIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamDisbandedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamDisbandedInIssuesMockingSetup
    {
        public static Mock<ITeamDisbandedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamDisbandedInIssuesBusinessWorkflow = new Mock<ITeamDisbandedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamDisbandedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamDisbandedInIssueModel>());
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamDisbandedInIssueModel>().Object);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamDisbandedInIssueModel>().Object);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamDisbandedInIssueModel>())).Returns(() => new Mock<ITeamDisbandedInIssueModel>().Object);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamDisbandedInIssueModel>())).Returns(() => new Mock<ITeamDisbandedInIssueModel>().Object);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamDisbandedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamDisbandedInIssuesBusinessWorkflow;
        }
    }

    //public class TeamDisbandedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_GetTeamDisbandedInIssues_Should_ReturnAListOfTeamDisbandedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new GetTeamDisbandedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamDisbandedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_GetTeamDisbandedInIssuesAsListing_Should_ReturnAListOfTeamDisbandedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new GetTeamDisbandedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamDisbandedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_GetTeamDisbandedInIssue_Should_ReturnAnTeamDisbandedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new GetTeamDisbandedInIssue { ID = 1 });
            Assert.Equal(nameof(ITeamDisbandedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_GetTeamDisbandedInIssueByKey_Should_ReturnAnTeamDisbandedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new GetTeamDisbandedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamDisbandedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_CreateTeamDisbandedInIssue_Should_ReturnAnTeamDisbandedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new CreateTeamDisbandedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamDisbandedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_UpdateTeamDisbandedInIssue_Should_ReturnAnTeamDisbandedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new UpdateTeamDisbandedInIssue { Id = 1 });
            Assert.Equal(nameof(ITeamDisbandedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_DeactivateTeamDisbandedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new DeactivateTeamDisbandedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_DeactivateTeamDisbandedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new DeactivateTeamDisbandedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_RemoveTeamDisbandedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new RemoveTeamDisbandedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_RemoveTeamDisbandedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamDisbandedInIssuesServices>();
            var response = service.Any(new RemoveTeamDisbandedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
