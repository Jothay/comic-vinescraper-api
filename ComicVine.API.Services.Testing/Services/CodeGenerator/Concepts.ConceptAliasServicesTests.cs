// <auto-generated>
// <copyright file="Concepts.IConceptAliasServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ConceptAliasesMockingSetup
    {
        public static Mock<IConceptAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockConceptAliasesBusinessWorkflow = new Mock<IConceptAliasesBusinessWorkflow>();
            // Mock Functions
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IConceptAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IConceptAliasModel>());
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IConceptAliasModel>().Object);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IConceptAliasModel>().Object);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IConceptAliasModel>())).Returns(() => new Mock<IConceptAliasModel>().Object);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IConceptAliasModel>())).Returns(() => new Mock<IConceptAliasModel>().Object);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockConceptAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockConceptAliasesBusinessWorkflow;
        }
    }

    //public class ConceptAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_GetConceptAliases_Should_ReturnAListOfConceptAliasModels()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new GetConceptAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptAliasModel>>(response);
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_GetConceptAliasesAsListing_Should_ReturnAListOfConceptAliasModels()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new GetConceptAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptAliasModel>>(response);
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_GetConceptAlias_Should_ReturnAnConceptAliasModel()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new GetConceptAlias { ID = 1 });
            Assert.Equal(nameof(IConceptAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_GetConceptAliasByKey_Should_ReturnAnConceptAliasModel()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new GetConceptAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IConceptAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_CreateConceptAlias_Should_ReturnAnConceptAliasModel()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new CreateConceptAlias { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IConceptAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_UpdateConceptAlias_Should_ReturnAnConceptAliasModel()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new UpdateConceptAlias { Id = 1 });
            Assert.Equal(nameof(IConceptAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_DeactivateConceptAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new DeactivateConceptAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_DeactivateConceptAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new DeactivateConceptAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_RemoveConceptAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new RemoveConceptAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptAliases")]
        public void Verify_RemoveConceptAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptAliasesServices>();
            var response = service.Any(new RemoveConceptAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
