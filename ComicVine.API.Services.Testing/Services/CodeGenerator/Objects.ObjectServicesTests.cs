// <auto-generated>
// <copyright file="Objects.IObjectServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ObjectsMockingSetup
    {
        public static Mock<IObjectsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockObjectsBusinessWorkflow = new Mock<IObjectsBusinessWorkflow>();
            // Mock Functions
            mockObjectsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IObjectSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IObjectModel>());
            mockObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IObjectModel>().Object);
            mockObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IObjectModel>().Object);
            mockObjectsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IObjectModel>())).Returns(() => new Mock<IObjectModel>().Object);
            mockObjectsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IObjectModel>())).Returns(() => new Mock<IObjectModel>().Object);
            mockObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockObjectsBusinessWorkflow;
        }
    }

    //public class ObjectsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Objects")]
        public void Verify_GetObjects_Should_ReturnAListOfObjectModels()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new GetObjects { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectModel>>(response);
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_GetObjectsAsListing_Should_ReturnAListOfObjectModels()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new GetObjectsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectModel>>(response);
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_GetObject_Should_ReturnAnObjectModel()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new GetObject { ID = 1 });
            Assert.Equal(nameof(IObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_GetObjectByKey_Should_ReturnAnObjectModel()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new GetObjectByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_CreateObject_Should_ReturnAnObjectModel()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new CreateObject { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_UpdateObject_Should_ReturnAnObjectModel()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new UpdateObject { Id = 1 });
            Assert.Equal(nameof(IObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_DeactivateObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new DeactivateObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_DeactivateObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new DeactivateObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_RemoveObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new RemoveObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Objects")]
        public void Verify_RemoveObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectsServices>();
            var response = service.Any(new RemoveObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
