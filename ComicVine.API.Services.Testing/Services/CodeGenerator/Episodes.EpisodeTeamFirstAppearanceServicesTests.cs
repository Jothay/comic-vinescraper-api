// <auto-generated>
// <copyright file="Episodes.IEpisodeTeamFirstAppearanceServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeTeamFirstAppearancesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeTeamFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeTeamFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeTeamFirstAppearancesBusinessWorkflow = new Mock<IEpisodeTeamFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeTeamFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeTeamFirstAppearanceModel>());
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeTeamFirstAppearanceModel>().Object);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeTeamFirstAppearanceModel>().Object);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeTeamFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeTeamFirstAppearanceModel>().Object);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeTeamFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeTeamFirstAppearanceModel>().Object);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeTeamFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeTeamFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeTeamFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_GetEpisodeTeamFirstAppearances_Should_ReturnAListOfEpisodeTeamFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeTeamFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeTeamFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_GetEpisodeTeamFirstAppearancesAsListing_Should_ReturnAListOfEpisodeTeamFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeTeamFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeTeamFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_GetEpisodeTeamFirstAppearance_Should_ReturnAnEpisodeTeamFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeTeamFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeTeamFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_GetEpisodeTeamFirstAppearanceByKey_Should_ReturnAnEpisodeTeamFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeTeamFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeTeamFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_CreateEpisodeTeamFirstAppearance_Should_ReturnAnEpisodeTeamFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeTeamFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeTeamFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_UpdateEpisodeTeamFirstAppearance_Should_ReturnAnEpisodeTeamFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeTeamFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeTeamFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_DeactivateEpisodeTeamFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeTeamFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_DeactivateEpisodeTeamFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeTeamFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_RemoveEpisodeTeamFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeTeamFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeamFirstAppearances")]
        public void Verify_RemoveEpisodeTeamFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeTeamFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
