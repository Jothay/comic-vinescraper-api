

// <auto-generated>
// <copyright file="Characters.ICharacterEnemyServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterEnemiesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterEnemiesMockingSetup
    {
        public static Mock<ICharacterEnemiesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterEnemiesBusinessWorkflow = new Mock<ICharacterEnemiesBusinessWorkflow>();
            // Mock Functions
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterEnemySearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterEnemyModel>());
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterEnemyModel>().Object);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterEnemyModel>().Object);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterEnemyModel>())).Returns(() => new Mock<ICharacterEnemyModel>().Object);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterEnemyModel>())).Returns(() => new Mock<ICharacterEnemyModel>().Object);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterEnemiesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterEnemiesBusinessWorkflow;
        }
    }

    //public class CharacterEnemiesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_GetCharacterEnemies_Should_ReturnAListOfCharacterEnemyModels()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new GetCharacterEnemies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterEnemyModel>>(response);
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_GetCharacterEnemiesAsListing_Should_ReturnAListOfCharacterEnemyModels()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new GetCharacterEnemiesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterEnemyModel>>(response);
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_GetCharacterEnemy_Should_ReturnAnCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new GetCharacterEnemy { ID = 1 });
            Assert.Equal(nameof(ICharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_GetCharacterEnemyByKey_Should_ReturnAnCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new GetCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_CreateCharacterEnemy_Should_ReturnAnCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new CreateCharacterEnemy { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_UpdateCharacterEnemy_Should_ReturnAnCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new UpdateCharacterEnemy { Id = 1 });
            Assert.Equal(nameof(ICharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_DeactivateCharacterEnemy_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new DeactivateCharacterEnemy { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_DeactivateCharacterEnemyByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new DeactivateCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_RemoveCharacterEnemy_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new RemoveCharacterEnemy { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemies")]
        public void Verify_RemoveCharacterEnemyByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemiesServices>();
            var response = service.Any(new RemoveCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
