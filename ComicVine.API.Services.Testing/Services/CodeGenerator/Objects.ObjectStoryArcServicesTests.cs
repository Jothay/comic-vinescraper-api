// <auto-generated>
// <copyright file="Objects.IObjectStoryArcServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ObjectStoryArcsMockingSetup
    {
        public static Mock<IObjectStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockObjectStoryArcsBusinessWorkflow = new Mock<IObjectStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IObjectStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IObjectStoryArcModel>());
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IObjectStoryArcModel>().Object);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IObjectStoryArcModel>().Object);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IObjectStoryArcModel>())).Returns(() => new Mock<IObjectStoryArcModel>().Object);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IObjectStoryArcModel>())).Returns(() => new Mock<IObjectStoryArcModel>().Object);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockObjectStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockObjectStoryArcsBusinessWorkflow;
        }
    }

    //public class ObjectStoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_GetObjectStoryArcs_Should_ReturnAListOfObjectStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new GetObjectStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_GetObjectStoryArcsAsListing_Should_ReturnAListOfObjectStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new GetObjectStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_GetObjectStoryArc_Should_ReturnAnObjectStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new GetObjectStoryArc { ID = 1 });
            Assert.Equal(nameof(IObjectStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_GetObjectStoryArcByKey_Should_ReturnAnObjectStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new GetObjectStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IObjectStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_CreateObjectStoryArc_Should_ReturnAnObjectStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new CreateObjectStoryArc { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IObjectStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_UpdateObjectStoryArc_Should_ReturnAnObjectStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new UpdateObjectStoryArc { Id = 1 });
            Assert.Equal(nameof(IObjectStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_DeactivateObjectStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new DeactivateObjectStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_DeactivateObjectStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new DeactivateObjectStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_RemoveObjectStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new RemoveObjectStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectStoryArcs")]
        public void Verify_RemoveObjectStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectStoryArcsServices>();
            var response = service.Any(new RemoveObjectStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
