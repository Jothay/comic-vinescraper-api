// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeCharactersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeCharactersMockingSetup
    {
        public static Mock<IEpisodeCharactersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeCharactersBusinessWorkflow = new Mock<IEpisodeCharactersBusinessWorkflow>();
            // Mock Functions
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeCharacterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeCharacterModel>());
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeCharacterModel>().Object);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeCharacterModel>().Object);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeCharacterModel>())).Returns(() => new Mock<IEpisodeCharacterModel>().Object);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeCharacterModel>())).Returns(() => new Mock<IEpisodeCharacterModel>().Object);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeCharactersBusinessWorkflow;
        }
    }

    //public class EpisodeCharactersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_GetEpisodeCharacters_Should_ReturnAListOfEpisodeCharacterModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new GetEpisodeCharacters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeCharacterModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_GetEpisodeCharactersAsListing_Should_ReturnAListOfEpisodeCharacterModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new GetEpisodeCharactersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeCharacterModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_GetEpisodeCharacter_Should_ReturnAnEpisodeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new GetEpisodeCharacter { ID = 1 });
            Assert.Equal(nameof(IEpisodeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_GetEpisodeCharacterByKey_Should_ReturnAnEpisodeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new GetEpisodeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_CreateEpisodeCharacter_Should_ReturnAnEpisodeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new CreateEpisodeCharacter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_UpdateEpisodeCharacter_Should_ReturnAnEpisodeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new UpdateEpisodeCharacter { Id = 1 });
            Assert.Equal(nameof(IEpisodeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_DeactivateEpisodeCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new DeactivateEpisodeCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_DeactivateEpisodeCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new DeactivateEpisodeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_RemoveEpisodeCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new RemoveEpisodeCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacters")]
        public void Verify_RemoveEpisodeCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharactersServices>();
            var response = service.Any(new RemoveEpisodeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
