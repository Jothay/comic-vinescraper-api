// <auto-generated>
// <copyright file="Characters.ICharacterVolumeServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterVolumesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterVolumesMockingSetup
    {
        public static Mock<ICharacterVolumesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterVolumesBusinessWorkflow = new Mock<ICharacterVolumesBusinessWorkflow>();
            // Mock Functions
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterVolumeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterVolumeModel>());
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterVolumeModel>().Object);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterVolumeModel>().Object);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterVolumeModel>())).Returns(() => new Mock<ICharacterVolumeModel>().Object);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterVolumeModel>())).Returns(() => new Mock<ICharacterVolumeModel>().Object);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterVolumesBusinessWorkflow;
        }
    }

    //public class CharacterVolumesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_GetCharacterVolumes_Should_ReturnAListOfCharacterVolumeModels()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new GetCharacterVolumes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterVolumeModel>>(response);
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_GetCharacterVolumesAsListing_Should_ReturnAListOfCharacterVolumeModels()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new GetCharacterVolumesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterVolumeModel>>(response);
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_GetCharacterVolume_Should_ReturnAnCharacterVolumeModel()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new GetCharacterVolume { ID = 1 });
            Assert.Equal(nameof(ICharacterVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_GetCharacterVolumeByKey_Should_ReturnAnCharacterVolumeModel()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new GetCharacterVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_CreateCharacterVolume_Should_ReturnAnCharacterVolumeModel()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new CreateCharacterVolume { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_UpdateCharacterVolume_Should_ReturnAnCharacterVolumeModel()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new UpdateCharacterVolume { Id = 1 });
            Assert.Equal(nameof(ICharacterVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_DeactivateCharacterVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new DeactivateCharacterVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_DeactivateCharacterVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new DeactivateCharacterVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_RemoveCharacterVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new RemoveCharacterVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterVolumes")]
        public void Verify_RemoveCharacterVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterVolumesServices>();
            var response = service.Any(new RemoveCharacterVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
