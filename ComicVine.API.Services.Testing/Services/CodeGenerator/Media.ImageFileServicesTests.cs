// <auto-generated>
// <copyright file="Media.IImageFileServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ImageFilesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Media
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ImageFilesMockingSetup
    {
        public static Mock<IImageFilesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockImageFilesBusinessWorkflow = new Mock<IImageFilesBusinessWorkflow>();
            // Mock Functions
            mockImageFilesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IImageFileSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IImageFileModel>());
            mockImageFilesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IImageFileModel>().Object);
            mockImageFilesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IImageFileModel>().Object);
            mockImageFilesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IImageFileModel>())).Returns(() => new Mock<IImageFileModel>().Object);
            mockImageFilesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IImageFileModel>())).Returns(() => new Mock<IImageFileModel>().Object);
            mockImageFilesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockImageFilesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockImageFilesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockImageFilesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockImageFilesBusinessWorkflow;
        }
    }

    //public class ImageFilesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_GetImageFiles_Should_ReturnAListOfImageFileModels()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new GetImageFiles { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IImageFileModel>>(response);
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_GetImageFilesAsListing_Should_ReturnAListOfImageFileModels()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new GetImageFilesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IImageFileModel>>(response);
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_GetImageFile_Should_ReturnAnImageFileModel()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new GetImageFile { ID = 1 });
            Assert.Equal(nameof(IImageFileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_GetImageFileByKey_Should_ReturnAnImageFileModel()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new GetImageFileByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IImageFileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_CreateImageFile_Should_ReturnAnImageFileModel()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new CreateImageFile { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IImageFileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_UpdateImageFile_Should_ReturnAnImageFileModel()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new UpdateImageFile { Id = 1 });
            Assert.Equal(nameof(IImageFileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_DeactivateImageFile_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new DeactivateImageFile { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_DeactivateImageFileByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new DeactivateImageFileByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_RemoveImageFile_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new RemoveImageFile { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ImageFiles")]
        public void Verify_RemoveImageFileByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IImageFilesServices>();
            var response = service.Any(new RemoveImageFileByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
