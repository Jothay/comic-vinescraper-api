// <auto-generated>
// <copyright file="Series.ISeriesServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the SeriesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Series
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class SeriesMockingSetup
    {
        public static Mock<ISeriesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockSeriesBusinessWorkflow = new Mock<ISeriesBusinessWorkflow>();
            // Mock Functions
            mockSeriesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ISeriesSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ISeriesModel>());
            mockSeriesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ISeriesModel>().Object);
            mockSeriesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ISeriesModel>().Object);
            mockSeriesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ISeriesModel>())).Returns(() => new Mock<ISeriesModel>().Object);
            mockSeriesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ISeriesModel>())).Returns(() => new Mock<ISeriesModel>().Object);
            mockSeriesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockSeriesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockSeriesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockSeriesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockSeriesBusinessWorkflow;
        }
    }

    //public class SeriesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Series")]
        public void Verify_GetSeries_Should_ReturnAListOfSeriesModels()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new GetAnySeries { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ISeriesModel>>(response);
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_GetSeriesAsListing_Should_ReturnAListOfSeriesModels()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new GetAnySeriesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ISeriesModel>>(response);
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_GetSeries_Should_ReturnAnSeriesModel()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new GetSeries { ID = 1 });
            Assert.Equal(nameof(ISeriesModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_GetSeriesByKey_Should_ReturnAnSeriesModel()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new GetSeriesByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ISeriesModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_CreateSeries_Should_ReturnAnSeriesModel()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new CreateSeries { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ISeriesModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_UpdateSeries_Should_ReturnAnSeriesModel()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new UpdateSeries { Id = 1 });
            Assert.Equal(nameof(ISeriesModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_DeactivateSeries_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new DeactivateSeries { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_DeactivateSeriesByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new DeactivateSeriesByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_RemoveSeries_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new RemoveSeries { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Series")]
        public void Verify_RemoveSeriesByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesServices>();
            var response = service.Any(new RemoveSeriesByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
