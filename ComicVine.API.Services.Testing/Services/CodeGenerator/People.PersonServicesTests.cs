// <auto-generated>
// <copyright file="People.IPersonServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PeopleRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.People
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class PeopleMockingSetup
    {
        public static Mock<IPeopleBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockPeopleBusinessWorkflow = new Mock<IPeopleBusinessWorkflow>();
            // Mock Functions
            mockPeopleBusinessWorkflow.Setup(m => m.Search(It.IsAny<IPersonSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IPersonModel>());
            mockPeopleBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPersonModel>().Object);
            mockPeopleBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPersonModel>().Object);
            mockPeopleBusinessWorkflow.Setup(m => m.Create(It.IsAny<IPersonModel>())).Returns(() => new Mock<IPersonModel>().Object);
            mockPeopleBusinessWorkflow.Setup(m => m.Update(It.IsAny<IPersonModel>())).Returns(() => new Mock<IPersonModel>().Object);
            mockPeopleBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockPeopleBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockPeopleBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockPeopleBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockPeopleBusinessWorkflow;
        }
    }

    //public class PeopleServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "People")]
        public void Verify_GetPeople_Should_ReturnAListOfPersonModels()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new GetPeople { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPersonModel>>(response);
        }
        [Fact][Trait("Category", "People")]
        public void Verify_GetPeopleAsListing_Should_ReturnAListOfPersonModels()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new GetPeopleAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPersonModel>>(response);
        }
        [Fact][Trait("Category", "People")]
        public void Verify_GetPerson_Should_ReturnAnPersonModel()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new GetPerson { ID = 1 });
            Assert.Equal(nameof(IPersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "People")]
        public void Verify_GetPersonByKey_Should_ReturnAnPersonModel()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new GetPersonByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IPersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "People")]
        public void Verify_CreatePerson_Should_ReturnAnPersonModel()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new CreatePerson { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IPersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "People")]
        public void Verify_UpdatePerson_Should_ReturnAnPersonModel()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new UpdatePerson { Id = 1 });
            Assert.Equal(nameof(IPersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "People")]
        public void Verify_DeactivatePerson_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new DeactivatePerson { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "People")]
        public void Verify_DeactivatePersonByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new DeactivatePersonByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "People")]
        public void Verify_RemovePerson_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new RemovePerson { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "People")]
        public void Verify_RemovePersonByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPeopleServices>();
            var response = service.Any(new RemovePersonByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
