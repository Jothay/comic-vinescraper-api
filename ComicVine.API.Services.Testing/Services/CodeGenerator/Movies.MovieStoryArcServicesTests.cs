// <auto-generated>
// <copyright file="Movies.IMovieStoryArcServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MovieStoryArcsMockingSetup
    {
        public static Mock<IMovieStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMovieStoryArcsBusinessWorkflow = new Mock<IMovieStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieStoryArcModel>());
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieStoryArcModel>().Object);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieStoryArcModel>().Object);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieStoryArcModel>())).Returns(() => new Mock<IMovieStoryArcModel>().Object);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieStoryArcModel>())).Returns(() => new Mock<IMovieStoryArcModel>().Object);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMovieStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMovieStoryArcsBusinessWorkflow;
        }
    }

    //public class MovieStoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_GetMovieStoryArcs_Should_ReturnAListOfMovieStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new GetMovieStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_GetMovieStoryArcsAsListing_Should_ReturnAListOfMovieStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new GetMovieStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_GetMovieStoryArc_Should_ReturnAnMovieStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new GetMovieStoryArc { ID = 1 });
            Assert.Equal(nameof(IMovieStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_GetMovieStoryArcByKey_Should_ReturnAnMovieStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new GetMovieStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_CreateMovieStoryArc_Should_ReturnAnMovieStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new CreateMovieStoryArc { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_UpdateMovieStoryArc_Should_ReturnAnMovieStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new UpdateMovieStoryArc { Id = 1 });
            Assert.Equal(nameof(IMovieStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_DeactivateMovieStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new DeactivateMovieStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_DeactivateMovieStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new DeactivateMovieStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_RemoveMovieStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new RemoveMovieStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStoryArcs")]
        public void Verify_RemoveMovieStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStoryArcsServices>();
            var response = service.Any(new RemoveMovieStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
