// <auto-generated>
// <copyright file="Episodes.IEpisodePersonServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodePeopleRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodePeopleMockingSetup
    {
        public static Mock<IEpisodePeopleBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodePeopleBusinessWorkflow = new Mock<IEpisodePeopleBusinessWorkflow>();
            // Mock Functions
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodePersonSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodePersonModel>());
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodePersonModel>().Object);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodePersonModel>().Object);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodePersonModel>())).Returns(() => new Mock<IEpisodePersonModel>().Object);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodePersonModel>())).Returns(() => new Mock<IEpisodePersonModel>().Object);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodePeopleBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodePeopleBusinessWorkflow;
        }
    }

    //public class EpisodePeopleServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_GetEpisodePeople_Should_ReturnAListOfEpisodePersonModels()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new GetEpisodePeople { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodePersonModel>>(response);
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_GetEpisodePeopleAsListing_Should_ReturnAListOfEpisodePersonModels()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new GetEpisodePeopleAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodePersonModel>>(response);
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_GetEpisodePerson_Should_ReturnAnEpisodePersonModel()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new GetEpisodePerson { ID = 1 });
            Assert.Equal(nameof(IEpisodePersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_GetEpisodePersonByKey_Should_ReturnAnEpisodePersonModel()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new GetEpisodePersonByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodePersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_CreateEpisodePerson_Should_ReturnAnEpisodePersonModel()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new CreateEpisodePerson { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodePersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_UpdateEpisodePerson_Should_ReturnAnEpisodePersonModel()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new UpdateEpisodePerson { Id = 1 });
            Assert.Equal(nameof(IEpisodePersonModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_DeactivateEpisodePerson_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new DeactivateEpisodePerson { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_DeactivateEpisodePersonByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new DeactivateEpisodePersonByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_RemoveEpisodePerson_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new RemoveEpisodePerson { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodePeople")]
        public void Verify_RemoveEpisodePersonByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodePeopleServices>();
            var response = service.Any(new RemoveEpisodePersonByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
