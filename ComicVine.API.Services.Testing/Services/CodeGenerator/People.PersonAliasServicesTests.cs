// <auto-generated>
// <copyright file="People.IPersonAliasServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PersonAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.People
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class PersonAliasesMockingSetup
    {
        public static Mock<IPersonAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockPersonAliasesBusinessWorkflow = new Mock<IPersonAliasesBusinessWorkflow>();
            // Mock Functions
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IPersonAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IPersonAliasModel>());
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPersonAliasModel>().Object);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPersonAliasModel>().Object);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IPersonAliasModel>())).Returns(() => new Mock<IPersonAliasModel>().Object);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IPersonAliasModel>())).Returns(() => new Mock<IPersonAliasModel>().Object);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockPersonAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockPersonAliasesBusinessWorkflow;
        }
    }

    //public class PersonAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_GetPersonAliases_Should_ReturnAListOfPersonAliasModels()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new GetPersonAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPersonAliasModel>>(response);
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_GetPersonAliasesAsListing_Should_ReturnAListOfPersonAliasModels()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new GetPersonAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPersonAliasModel>>(response);
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_GetPersonAlias_Should_ReturnAnPersonAliasModel()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new GetPersonAlias { ID = 1 });
            Assert.Equal(nameof(IPersonAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_GetPersonAliasByKey_Should_ReturnAnPersonAliasModel()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new GetPersonAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IPersonAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_CreatePersonAlias_Should_ReturnAnPersonAliasModel()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new CreatePersonAlias { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IPersonAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_UpdatePersonAlias_Should_ReturnAnPersonAliasModel()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new UpdatePersonAlias { Id = 1 });
            Assert.Equal(nameof(IPersonAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_DeactivatePersonAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new DeactivatePersonAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_DeactivatePersonAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new DeactivatePersonAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_RemovePersonAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new RemovePersonAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PersonAliases")]
        public void Verify_RemovePersonAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPersonAliasesServices>();
            var response = service.Any(new RemovePersonAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
