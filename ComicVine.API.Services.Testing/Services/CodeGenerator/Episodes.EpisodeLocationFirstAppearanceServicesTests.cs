// <auto-generated>
// <copyright file="Episodes.IEpisodeLocationFirstAppearanceServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeLocationFirstAppearancesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeLocationFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeLocationFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeLocationFirstAppearancesBusinessWorkflow = new Mock<IEpisodeLocationFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeLocationFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeLocationFirstAppearanceModel>());
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeLocationFirstAppearanceModel>().Object);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeLocationFirstAppearanceModel>().Object);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeLocationFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeLocationFirstAppearanceModel>().Object);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeLocationFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeLocationFirstAppearanceModel>().Object);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeLocationFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeLocationFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeLocationFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_GetEpisodeLocationFirstAppearances_Should_ReturnAListOfEpisodeLocationFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeLocationFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeLocationFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_GetEpisodeLocationFirstAppearancesAsListing_Should_ReturnAListOfEpisodeLocationFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeLocationFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeLocationFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_GetEpisodeLocationFirstAppearance_Should_ReturnAnEpisodeLocationFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeLocationFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeLocationFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_GetEpisodeLocationFirstAppearanceByKey_Should_ReturnAnEpisodeLocationFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeLocationFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeLocationFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_CreateEpisodeLocationFirstAppearance_Should_ReturnAnEpisodeLocationFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeLocationFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeLocationFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_UpdateEpisodeLocationFirstAppearance_Should_ReturnAnEpisodeLocationFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeLocationFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeLocationFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_DeactivateEpisodeLocationFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeLocationFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_DeactivateEpisodeLocationFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeLocationFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_RemoveEpisodeLocationFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeLocationFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeLocationFirstAppearances")]
        public void Verify_RemoveEpisodeLocationFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeLocationFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeLocationFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
