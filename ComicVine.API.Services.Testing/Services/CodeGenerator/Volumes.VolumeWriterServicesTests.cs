// <auto-generated>
// <copyright file="Volumes.IVolumeWriterServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeWritersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VolumeWritersMockingSetup
    {
        public static Mock<IVolumeWritersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVolumeWritersBusinessWorkflow = new Mock<IVolumeWritersBusinessWorkflow>();
            // Mock Functions
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVolumeWriterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVolumeWriterModel>());
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVolumeWriterModel>().Object);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVolumeWriterModel>().Object);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVolumeWriterModel>())).Returns(() => new Mock<IVolumeWriterModel>().Object);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVolumeWriterModel>())).Returns(() => new Mock<IVolumeWriterModel>().Object);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVolumeWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVolumeWritersBusinessWorkflow;
        }
    }

    //public class VolumeWritersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_GetVolumeWriters_Should_ReturnAListOfVolumeWriterModels()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new GetVolumeWriters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeWriterModel>>(response);
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_GetVolumeWritersAsListing_Should_ReturnAListOfVolumeWriterModels()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new GetVolumeWritersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeWriterModel>>(response);
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_GetVolumeWriter_Should_ReturnAnVolumeWriterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new GetVolumeWriter { ID = 1 });
            Assert.Equal(nameof(IVolumeWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_GetVolumeWriterByKey_Should_ReturnAnVolumeWriterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new GetVolumeWriterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVolumeWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_CreateVolumeWriter_Should_ReturnAnVolumeWriterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new CreateVolumeWriter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVolumeWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_UpdateVolumeWriter_Should_ReturnAnVolumeWriterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new UpdateVolumeWriter { Id = 1 });
            Assert.Equal(nameof(IVolumeWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_DeactivateVolumeWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new DeactivateVolumeWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_DeactivateVolumeWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new DeactivateVolumeWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_RemoveVolumeWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new RemoveVolumeWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeWriters")]
        public void Verify_RemoveVolumeWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeWritersServices>();
            var response = service.Any(new RemoveVolumeWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
