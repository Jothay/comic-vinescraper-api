// <auto-generated>
// <copyright file="Teams.ITeamCharacterFriendServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamCharacterFriendsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamCharacterFriendsMockingSetup
    {
        public static Mock<ITeamCharacterFriendsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamCharacterFriendsBusinessWorkflow = new Mock<ITeamCharacterFriendsBusinessWorkflow>();
            // Mock Functions
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamCharacterFriendSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamCharacterFriendModel>());
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamCharacterFriendModel>().Object);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamCharacterFriendModel>().Object);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamCharacterFriendModel>())).Returns(() => new Mock<ITeamCharacterFriendModel>().Object);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamCharacterFriendModel>())).Returns(() => new Mock<ITeamCharacterFriendModel>().Object);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamCharacterFriendsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamCharacterFriendsBusinessWorkflow;
        }
    }

    //public class TeamCharacterFriendsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_GetTeamCharacterFriends_Should_ReturnAListOfTeamCharacterFriendModels()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new GetTeamCharacterFriends { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamCharacterFriendModel>>(response);
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_GetTeamCharacterFriendsAsListing_Should_ReturnAListOfTeamCharacterFriendModels()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new GetTeamCharacterFriendsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamCharacterFriendModel>>(response);
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_GetTeamCharacterFriend_Should_ReturnAnTeamCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new GetTeamCharacterFriend { ID = 1 });
            Assert.Equal(nameof(ITeamCharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_GetTeamCharacterFriendByKey_Should_ReturnAnTeamCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new GetTeamCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamCharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_CreateTeamCharacterFriend_Should_ReturnAnTeamCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new CreateTeamCharacterFriend { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamCharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_UpdateTeamCharacterFriend_Should_ReturnAnTeamCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new UpdateTeamCharacterFriend { Id = 1 });
            Assert.Equal(nameof(ITeamCharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_DeactivateTeamCharacterFriend_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new DeactivateTeamCharacterFriend { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_DeactivateTeamCharacterFriendByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new DeactivateTeamCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_RemoveTeamCharacterFriend_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new RemoveTeamCharacterFriend { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterFriends")]
        public void Verify_RemoveTeamCharacterFriendByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterFriendsServices>();
            var response = service.Any(new RemoveTeamCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
