// <auto-generated>
// <copyright file="Teams.ITeamStoryArcServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamStoryArcsMockingSetup
    {
        public static Mock<ITeamStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamStoryArcsBusinessWorkflow = new Mock<ITeamStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamStoryArcModel>());
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamStoryArcModel>().Object);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamStoryArcModel>().Object);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamStoryArcModel>())).Returns(() => new Mock<ITeamStoryArcModel>().Object);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamStoryArcModel>())).Returns(() => new Mock<ITeamStoryArcModel>().Object);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamStoryArcsBusinessWorkflow;
        }
    }

    //public class TeamStoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_GetTeamStoryArcs_Should_ReturnAListOfTeamStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new GetTeamStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_GetTeamStoryArcsAsListing_Should_ReturnAListOfTeamStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new GetTeamStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_GetTeamStoryArc_Should_ReturnAnTeamStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new GetTeamStoryArc { ID = 1 });
            Assert.Equal(nameof(ITeamStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_GetTeamStoryArcByKey_Should_ReturnAnTeamStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new GetTeamStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_CreateTeamStoryArc_Should_ReturnAnTeamStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new CreateTeamStoryArc { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_UpdateTeamStoryArc_Should_ReturnAnTeamStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new UpdateTeamStoryArc { Id = 1 });
            Assert.Equal(nameof(ITeamStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_DeactivateTeamStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new DeactivateTeamStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_DeactivateTeamStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new DeactivateTeamStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_RemoveTeamStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new RemoveTeamStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamStoryArcs")]
        public void Verify_RemoveTeamStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamStoryArcsServices>();
            var response = service.Any(new RemoveTeamStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
