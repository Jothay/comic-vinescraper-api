// <auto-generated>
// <copyright file="StoryArcs.IStoryArcServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the StoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.StoryArcs
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class StoryArcsMockingSetup
    {
        public static Mock<IStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockStoryArcsBusinessWorkflow = new Mock<IStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IStoryArcModel>());
            mockStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IStoryArcModel>().Object);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IStoryArcModel>().Object);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IStoryArcModel>())).Returns(() => new Mock<IStoryArcModel>().Object);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IStoryArcModel>())).Returns(() => new Mock<IStoryArcModel>().Object);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockStoryArcsBusinessWorkflow;
        }
    }

    //public class StoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_GetStoryArcs_Should_ReturnAListOfStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new GetStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_GetStoryArcsAsListing_Should_ReturnAListOfStoryArcModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new GetStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_GetStoryArc_Should_ReturnAnStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new GetStoryArc { ID = 1 });
            Assert.Equal(nameof(IStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_GetStoryArcByKey_Should_ReturnAnStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new GetStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_CreateStoryArc_Should_ReturnAnStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new CreateStoryArc { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_UpdateStoryArc_Should_ReturnAnStoryArcModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new UpdateStoryArc { Id = 1 });
            Assert.Equal(nameof(IStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_DeactivateStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new DeactivateStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_DeactivateStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new DeactivateStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_RemoveStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new RemoveStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcs")]
        public void Verify_RemoveStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcsServices>();
            var response = service.Any(new RemoveStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
