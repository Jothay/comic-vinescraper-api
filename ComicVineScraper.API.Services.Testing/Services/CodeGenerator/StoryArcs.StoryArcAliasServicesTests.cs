// <auto-generated>
// <copyright file="StoryArcs.IStoryArcAliasServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the StoryArcAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.StoryArcs
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class StoryArcAliasesMockingSetup
    {
        public static Mock<IStoryArcAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockStoryArcAliasesBusinessWorkflow = new Mock<IStoryArcAliasesBusinessWorkflow>();
            // Mock Functions
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IStoryArcAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IStoryArcAliasModel>());
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IStoryArcAliasModel>().Object);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IStoryArcAliasModel>().Object);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IStoryArcAliasModel>())).Returns(() => new Mock<IStoryArcAliasModel>().Object);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IStoryArcAliasModel>())).Returns(() => new Mock<IStoryArcAliasModel>().Object);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockStoryArcAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockStoryArcAliasesBusinessWorkflow;
        }
    }

    //public class StoryArcAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_GetStoryArcAliases_Should_ReturnAListOfStoryArcAliasModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new GetStoryArcAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcAliasModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_GetStoryArcAliasesAsListing_Should_ReturnAListOfStoryArcAliasModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new GetStoryArcAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcAliasModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_GetStoryArcAlias_Should_ReturnAnStoryArcAliasModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new GetStoryArcAlias { ID = 1 });
            Assert.Equal(nameof(IStoryArcAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_GetStoryArcAliasByKey_Should_ReturnAnStoryArcAliasModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new GetStoryArcAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IStoryArcAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_CreateStoryArcAlias_Should_ReturnAnStoryArcAliasModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new CreateStoryArcAlias { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IStoryArcAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_UpdateStoryArcAlias_Should_ReturnAnStoryArcAliasModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new UpdateStoryArcAlias { Id = 1 });
            Assert.Equal(nameof(IStoryArcAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_DeactivateStoryArcAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new DeactivateStoryArcAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_DeactivateStoryArcAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new DeactivateStoryArcAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_RemoveStoryArcAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new RemoveStoryArcAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcAliases")]
        public void Verify_RemoveStoryArcAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcAliasesServices>();
            var response = service.Any(new RemoveStoryArcAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
