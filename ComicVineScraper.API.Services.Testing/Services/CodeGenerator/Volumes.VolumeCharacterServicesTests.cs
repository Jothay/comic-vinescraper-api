// <auto-generated>
// <copyright file="Volumes.IVolumeCharacterServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeCharactersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VolumeCharactersMockingSetup
    {
        public static Mock<IVolumeCharactersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVolumeCharactersBusinessWorkflow = new Mock<IVolumeCharactersBusinessWorkflow>();
            // Mock Functions
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVolumeCharacterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVolumeCharacterModel>());
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVolumeCharacterModel>().Object);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVolumeCharacterModel>().Object);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVolumeCharacterModel>())).Returns(() => new Mock<IVolumeCharacterModel>().Object);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVolumeCharacterModel>())).Returns(() => new Mock<IVolumeCharacterModel>().Object);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVolumeCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVolumeCharactersBusinessWorkflow;
        }
    }

    //public class VolumeCharactersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_GetVolumeCharacters_Should_ReturnAListOfVolumeCharacterModels()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new GetVolumeCharacters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeCharacterModel>>(response);
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_GetVolumeCharactersAsListing_Should_ReturnAListOfVolumeCharacterModels()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new GetVolumeCharactersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeCharacterModel>>(response);
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_GetVolumeCharacter_Should_ReturnAnVolumeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new GetVolumeCharacter { ID = 1 });
            Assert.Equal(nameof(IVolumeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_GetVolumeCharacterByKey_Should_ReturnAnVolumeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new GetVolumeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVolumeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_CreateVolumeCharacter_Should_ReturnAnVolumeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new CreateVolumeCharacter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVolumeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_UpdateVolumeCharacter_Should_ReturnAnVolumeCharacterModel()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new UpdateVolumeCharacter { Id = 1 });
            Assert.Equal(nameof(IVolumeCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_DeactivateVolumeCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new DeactivateVolumeCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_DeactivateVolumeCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new DeactivateVolumeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_RemoveVolumeCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new RemoveVolumeCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeCharacters")]
        public void Verify_RemoveVolumeCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeCharactersServices>();
            var response = service.Any(new RemoveVolumeCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
