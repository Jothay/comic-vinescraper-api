// <auto-generated>
// <copyright file="Characters.ICharacterDiedInIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterDiedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterDiedInIssuesMockingSetup
    {
        public static Mock<ICharacterDiedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterDiedInIssuesBusinessWorkflow = new Mock<ICharacterDiedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterDiedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterDiedInIssueModel>());
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterDiedInIssueModel>().Object);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterDiedInIssueModel>().Object);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterDiedInIssueModel>())).Returns(() => new Mock<ICharacterDiedInIssueModel>().Object);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterDiedInIssueModel>())).Returns(() => new Mock<ICharacterDiedInIssueModel>().Object);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterDiedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterDiedInIssuesBusinessWorkflow;
        }
    }

    //public class CharacterDiedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_GetCharacterDiedInIssues_Should_ReturnAListOfCharacterDiedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new GetCharacterDiedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterDiedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_GetCharacterDiedInIssuesAsListing_Should_ReturnAListOfCharacterDiedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new GetCharacterDiedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterDiedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_GetCharacterDiedInIssue_Should_ReturnAnCharacterDiedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new GetCharacterDiedInIssue { ID = 1 });
            Assert.Equal(nameof(ICharacterDiedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_GetCharacterDiedInIssueByKey_Should_ReturnAnCharacterDiedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new GetCharacterDiedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterDiedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_CreateCharacterDiedInIssue_Should_ReturnAnCharacterDiedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new CreateCharacterDiedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterDiedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_UpdateCharacterDiedInIssue_Should_ReturnAnCharacterDiedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new UpdateCharacterDiedInIssue { Id = 1 });
            Assert.Equal(nameof(ICharacterDiedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_DeactivateCharacterDiedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new DeactivateCharacterDiedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_DeactivateCharacterDiedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new DeactivateCharacterDiedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_RemoveCharacterDiedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new RemoveCharacterDiedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_RemoveCharacterDiedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterDiedInIssuesServices>();
            var response = service.Any(new RemoveCharacterDiedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
