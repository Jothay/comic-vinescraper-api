// <auto-generated>
// <copyright file="Characters.ICharacterCreatorServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterCreatorsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterCreatorsMockingSetup
    {
        public static Mock<ICharacterCreatorsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterCreatorsBusinessWorkflow = new Mock<ICharacterCreatorsBusinessWorkflow>();
            // Mock Functions
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterCreatorSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterCreatorModel>());
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterCreatorModel>().Object);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterCreatorModel>().Object);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterCreatorModel>())).Returns(() => new Mock<ICharacterCreatorModel>().Object);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterCreatorModel>())).Returns(() => new Mock<ICharacterCreatorModel>().Object);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterCreatorsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterCreatorsBusinessWorkflow;
        }
    }

    //public class CharacterCreatorsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_GetCharacterCreators_Should_ReturnAListOfCharacterCreatorModels()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new GetCharacterCreators { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterCreatorModel>>(response);
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_GetCharacterCreatorsAsListing_Should_ReturnAListOfCharacterCreatorModels()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new GetCharacterCreatorsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterCreatorModel>>(response);
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_GetCharacterCreator_Should_ReturnAnCharacterCreatorModel()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new GetCharacterCreator { ID = 1 });
            Assert.Equal(nameof(ICharacterCreatorModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_GetCharacterCreatorByKey_Should_ReturnAnCharacterCreatorModel()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new GetCharacterCreatorByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterCreatorModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_CreateCharacterCreator_Should_ReturnAnCharacterCreatorModel()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new CreateCharacterCreator { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterCreatorModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_UpdateCharacterCreator_Should_ReturnAnCharacterCreatorModel()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new UpdateCharacterCreator { Id = 1 });
            Assert.Equal(nameof(ICharacterCreatorModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_DeactivateCharacterCreator_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new DeactivateCharacterCreator { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_DeactivateCharacterCreatorByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new DeactivateCharacterCreatorByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_RemoveCharacterCreator_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new RemoveCharacterCreator { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterCreators")]
        public void Verify_RemoveCharacterCreatorByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterCreatorsServices>();
            var response = service.Any(new RemoveCharacterCreatorByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
