// <auto-generated>
// <copyright file="Teams.ITeamMovieServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMoviesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamMoviesMockingSetup
    {
        public static Mock<ITeamMoviesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamMoviesBusinessWorkflow = new Mock<ITeamMoviesBusinessWorkflow>();
            // Mock Functions
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamMovieSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamMovieModel>());
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamMovieModel>().Object);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamMovieModel>().Object);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamMovieModel>())).Returns(() => new Mock<ITeamMovieModel>().Object);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamMovieModel>())).Returns(() => new Mock<ITeamMovieModel>().Object);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamMoviesBusinessWorkflow;
        }
    }

    //public class TeamMoviesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_GetTeamMovies_Should_ReturnAListOfTeamMovieModels()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new GetTeamMovies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamMovieModel>>(response);
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_GetTeamMoviesAsListing_Should_ReturnAListOfTeamMovieModels()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new GetTeamMoviesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamMovieModel>>(response);
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_GetTeamMovie_Should_ReturnAnTeamMovieModel()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new GetTeamMovie { ID = 1 });
            Assert.Equal(nameof(ITeamMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_GetTeamMovieByKey_Should_ReturnAnTeamMovieModel()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new GetTeamMovieByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_CreateTeamMovie_Should_ReturnAnTeamMovieModel()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new CreateTeamMovie { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_UpdateTeamMovie_Should_ReturnAnTeamMovieModel()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new UpdateTeamMovie { Id = 1 });
            Assert.Equal(nameof(ITeamMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_DeactivateTeamMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new DeactivateTeamMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_DeactivateTeamMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new DeactivateTeamMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_RemoveTeamMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new RemoveTeamMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMovies")]
        public void Verify_RemoveTeamMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMoviesServices>();
            var response = service.Any(new RemoveTeamMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
