// <auto-generated>
// <copyright file="Origins.IOriginServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the OriginsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Origins
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class OriginsMockingSetup
    {
        public static Mock<IOriginsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockOriginsBusinessWorkflow = new Mock<IOriginsBusinessWorkflow>();
            // Mock Functions
            mockOriginsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IOriginSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IOriginModel>());
            mockOriginsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IOriginModel>().Object);
            mockOriginsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IOriginModel>().Object);
            mockOriginsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IOriginModel>())).Returns(() => new Mock<IOriginModel>().Object);
            mockOriginsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IOriginModel>())).Returns(() => new Mock<IOriginModel>().Object);
            mockOriginsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockOriginsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockOriginsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockOriginsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockOriginsBusinessWorkflow;
        }
    }

    //public class OriginsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Origins")]
        public void Verify_GetOrigins_Should_ReturnAListOfOriginModels()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new GetOrigins { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IOriginModel>>(response);
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_GetOriginsAsListing_Should_ReturnAListOfOriginModels()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new GetOriginsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IOriginModel>>(response);
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_GetOrigin_Should_ReturnAnOriginModel()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new GetOrigin { ID = 1 });
            Assert.Equal(nameof(IOriginModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_GetOriginByKey_Should_ReturnAnOriginModel()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new GetOriginByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IOriginModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_CreateOrigin_Should_ReturnAnOriginModel()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new CreateOrigin { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IOriginModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_UpdateOrigin_Should_ReturnAnOriginModel()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new UpdateOrigin { Id = 1 });
            Assert.Equal(nameof(IOriginModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_DeactivateOrigin_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new DeactivateOrigin { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_DeactivateOriginByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new DeactivateOriginByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_RemoveOrigin_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new RemoveOrigin { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Origins")]
        public void Verify_RemoveOriginByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginsServices>();
            var response = service.Any(new RemoveOriginByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
