// <auto-generated>
// <copyright file="Videos.IVideoTypeServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VideoTypesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Videos
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VideoTypesMockingSetup
    {
        public static Mock<IVideoTypesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVideoTypesBusinessWorkflow = new Mock<IVideoTypesBusinessWorkflow>();
            // Mock Functions
            mockVideoTypesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVideoTypeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVideoTypeModel>());
            mockVideoTypesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVideoTypeModel>().Object);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVideoTypeModel>().Object);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVideoTypeModel>())).Returns(() => new Mock<IVideoTypeModel>().Object);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVideoTypeModel>())).Returns(() => new Mock<IVideoTypeModel>().Object);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVideoTypesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVideoTypesBusinessWorkflow;
        }
    }

    //public class VideoTypesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_GetVideoTypes_Should_ReturnAListOfVideoTypeModels()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new GetVideoTypes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVideoTypeModel>>(response);
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_GetVideoTypesAsListing_Should_ReturnAListOfVideoTypeModels()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new GetVideoTypesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVideoTypeModel>>(response);
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_GetVideoType_Should_ReturnAnVideoTypeModel()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new GetVideoType { ID = 1 });
            Assert.Equal(nameof(IVideoTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_GetVideoTypeByKey_Should_ReturnAnVideoTypeModel()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new GetVideoTypeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVideoTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_CreateVideoType_Should_ReturnAnVideoTypeModel()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new CreateVideoType { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVideoTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_UpdateVideoType_Should_ReturnAnVideoTypeModel()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new UpdateVideoType { Id = 1 });
            Assert.Equal(nameof(IVideoTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_DeactivateVideoType_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new DeactivateVideoType { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_DeactivateVideoTypeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new DeactivateVideoTypeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_RemoveVideoType_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new RemoveVideoType { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VideoTypes")]
        public void Verify_RemoveVideoTypeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideoTypesServices>();
            var response = service.Any(new RemoveVideoTypeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
