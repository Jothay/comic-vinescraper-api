// <auto-generated>
// <copyright file="Characters.ICharacterMovieServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterMoviesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterMoviesMockingSetup
    {
        public static Mock<ICharacterMoviesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterMoviesBusinessWorkflow = new Mock<ICharacterMoviesBusinessWorkflow>();
            // Mock Functions
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterMovieSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterMovieModel>());
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterMovieModel>().Object);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterMovieModel>().Object);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterMovieModel>())).Returns(() => new Mock<ICharacterMovieModel>().Object);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterMovieModel>())).Returns(() => new Mock<ICharacterMovieModel>().Object);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterMoviesBusinessWorkflow;
        }
    }

    //public class CharacterMoviesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_GetCharacterMovies_Should_ReturnAListOfCharacterMovieModels()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new GetCharacterMovies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterMovieModel>>(response);
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_GetCharacterMoviesAsListing_Should_ReturnAListOfCharacterMovieModels()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new GetCharacterMoviesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterMovieModel>>(response);
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_GetCharacterMovie_Should_ReturnAnCharacterMovieModel()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new GetCharacterMovie { ID = 1 });
            Assert.Equal(nameof(ICharacterMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_GetCharacterMovieByKey_Should_ReturnAnCharacterMovieModel()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new GetCharacterMovieByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_CreateCharacterMovie_Should_ReturnAnCharacterMovieModel()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new CreateCharacterMovie { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_UpdateCharacterMovie_Should_ReturnAnCharacterMovieModel()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new UpdateCharacterMovie { Id = 1 });
            Assert.Equal(nameof(ICharacterMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_DeactivateCharacterMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new DeactivateCharacterMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_DeactivateCharacterMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new DeactivateCharacterMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_RemoveCharacterMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new RemoveCharacterMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterMovies")]
        public void Verify_RemoveCharacterMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterMoviesServices>();
            var response = service.Any(new RemoveCharacterMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
