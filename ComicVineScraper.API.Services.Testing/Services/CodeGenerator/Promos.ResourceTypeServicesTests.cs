// <auto-generated>
// <copyright file="Promos.IResourceTypeServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ResourceTypesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Promos
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ResourceTypesMockingSetup
    {
        public static Mock<IResourceTypesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockResourceTypesBusinessWorkflow = new Mock<IResourceTypesBusinessWorkflow>();
            // Mock Functions
            mockResourceTypesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IResourceTypeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IResourceTypeModel>());
            mockResourceTypesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IResourceTypeModel>().Object);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IResourceTypeModel>().Object);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IResourceTypeModel>())).Returns(() => new Mock<IResourceTypeModel>().Object);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IResourceTypeModel>())).Returns(() => new Mock<IResourceTypeModel>().Object);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockResourceTypesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockResourceTypesBusinessWorkflow;
        }
    }

    //public class ResourceTypesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_GetResourceTypes_Should_ReturnAListOfResourceTypeModels()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new GetResourceTypes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IResourceTypeModel>>(response);
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_GetResourceTypesAsListing_Should_ReturnAListOfResourceTypeModels()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new GetResourceTypesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IResourceTypeModel>>(response);
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_GetResourceType_Should_ReturnAnResourceTypeModel()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new GetResourceType { ID = 1 });
            Assert.Equal(nameof(IResourceTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_GetResourceTypeByKey_Should_ReturnAnResourceTypeModel()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new GetResourceTypeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IResourceTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_CreateResourceType_Should_ReturnAnResourceTypeModel()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new CreateResourceType { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IResourceTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_UpdateResourceType_Should_ReturnAnResourceTypeModel()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new UpdateResourceType { Id = 1 });
            Assert.Equal(nameof(IResourceTypeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_DeactivateResourceType_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new DeactivateResourceType { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_DeactivateResourceTypeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new DeactivateResourceTypeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_RemoveResourceType_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new RemoveResourceType { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ResourceTypes")]
        public void Verify_RemoveResourceTypeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IResourceTypesServices>();
            var response = service.Any(new RemoveResourceTypeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
