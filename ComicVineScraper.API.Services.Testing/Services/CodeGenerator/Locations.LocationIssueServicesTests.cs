// <auto-generated>
// <copyright file="Locations.ILocationIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class LocationIssuesMockingSetup
    {
        public static Mock<ILocationIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockLocationIssuesBusinessWorkflow = new Mock<ILocationIssuesBusinessWorkflow>();
            // Mock Functions
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ILocationIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ILocationIssueModel>());
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ILocationIssueModel>().Object);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ILocationIssueModel>().Object);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ILocationIssueModel>())).Returns(() => new Mock<ILocationIssueModel>().Object);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ILocationIssueModel>())).Returns(() => new Mock<ILocationIssueModel>().Object);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockLocationIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockLocationIssuesBusinessWorkflow;
        }
    }

    //public class LocationIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_GetLocationIssues_Should_ReturnAListOfLocationIssueModels()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new GetLocationIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationIssueModel>>(response);
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_GetLocationIssuesAsListing_Should_ReturnAListOfLocationIssueModels()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new GetLocationIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationIssueModel>>(response);
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_GetLocationIssue_Should_ReturnAnLocationIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new GetLocationIssue { ID = 1 });
            Assert.Equal(nameof(ILocationIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_GetLocationIssueByKey_Should_ReturnAnLocationIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new GetLocationIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ILocationIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_CreateLocationIssue_Should_ReturnAnLocationIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new CreateLocationIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ILocationIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_UpdateLocationIssue_Should_ReturnAnLocationIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new UpdateLocationIssue { Id = 1 });
            Assert.Equal(nameof(ILocationIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_DeactivateLocationIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new DeactivateLocationIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_DeactivateLocationIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new DeactivateLocationIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_RemoveLocationIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new RemoveLocationIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationIssues")]
        public void Verify_RemoveLocationIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationIssuesServices>();
            var response = service.Any(new RemoveLocationIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
