// <auto-generated>
// <copyright file="Characters.ICharacterStoryArcServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterStoryArcsMockingSetup
    {
        public static Mock<ICharacterStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterStoryArcsBusinessWorkflow = new Mock<ICharacterStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterStoryArcModel>());
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterStoryArcModel>().Object);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterStoryArcModel>().Object);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterStoryArcModel>())).Returns(() => new Mock<ICharacterStoryArcModel>().Object);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterStoryArcModel>())).Returns(() => new Mock<ICharacterStoryArcModel>().Object);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterStoryArcsBusinessWorkflow;
        }
    }

    //public class CharacterStoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_GetCharacterStoryArcs_Should_ReturnAListOfCharacterStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new GetCharacterStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_GetCharacterStoryArcsAsListing_Should_ReturnAListOfCharacterStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new GetCharacterStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_GetCharacterStoryArc_Should_ReturnAnCharacterStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new GetCharacterStoryArc { ID = 1 });
            Assert.Equal(nameof(ICharacterStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_GetCharacterStoryArcByKey_Should_ReturnAnCharacterStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new GetCharacterStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_CreateCharacterStoryArc_Should_ReturnAnCharacterStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new CreateCharacterStoryArc { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_UpdateCharacterStoryArc_Should_ReturnAnCharacterStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new UpdateCharacterStoryArc { Id = 1 });
            Assert.Equal(nameof(ICharacterStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_DeactivateCharacterStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new DeactivateCharacterStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_DeactivateCharacterStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new DeactivateCharacterStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_RemoveCharacterStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new RemoveCharacterStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_RemoveCharacterStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterStoryArcsServices>();
            var response = service.Any(new RemoveCharacterStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
