// <auto-generated>
// <copyright file="Objects.IObjectIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ObjectIssuesMockingSetup
    {
        public static Mock<IObjectIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockObjectIssuesBusinessWorkflow = new Mock<IObjectIssuesBusinessWorkflow>();
            // Mock Functions
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IObjectIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IObjectIssueModel>());
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IObjectIssueModel>().Object);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IObjectIssueModel>().Object);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IObjectIssueModel>())).Returns(() => new Mock<IObjectIssueModel>().Object);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IObjectIssueModel>())).Returns(() => new Mock<IObjectIssueModel>().Object);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockObjectIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockObjectIssuesBusinessWorkflow;
        }
    }

    //public class ObjectIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_GetObjectIssues_Should_ReturnAListOfObjectIssueModels()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new GetObjectIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectIssueModel>>(response);
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_GetObjectIssuesAsListing_Should_ReturnAListOfObjectIssueModels()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new GetObjectIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectIssueModel>>(response);
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_GetObjectIssue_Should_ReturnAnObjectIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new GetObjectIssue { ID = 1 });
            Assert.Equal(nameof(IObjectIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_GetObjectIssueByKey_Should_ReturnAnObjectIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new GetObjectIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IObjectIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_CreateObjectIssue_Should_ReturnAnObjectIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new CreateObjectIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IObjectIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_UpdateObjectIssue_Should_ReturnAnObjectIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new UpdateObjectIssue { Id = 1 });
            Assert.Equal(nameof(IObjectIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_DeactivateObjectIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new DeactivateObjectIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_DeactivateObjectIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new DeactivateObjectIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_RemoveObjectIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new RemoveObjectIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_RemoveObjectIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectIssuesServices>();
            var response = service.Any(new RemoveObjectIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
