// <auto-generated>
// <copyright file="Concepts.IConceptVolumeServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptVolumesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ConceptVolumesMockingSetup
    {
        public static Mock<IConceptVolumesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockConceptVolumesBusinessWorkflow = new Mock<IConceptVolumesBusinessWorkflow>();
            // Mock Functions
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IConceptVolumeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IConceptVolumeModel>());
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IConceptVolumeModel>().Object);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IConceptVolumeModel>().Object);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IConceptVolumeModel>())).Returns(() => new Mock<IConceptVolumeModel>().Object);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IConceptVolumeModel>())).Returns(() => new Mock<IConceptVolumeModel>().Object);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockConceptVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockConceptVolumesBusinessWorkflow;
        }
    }

    //public class ConceptVolumesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_GetConceptVolumes_Should_ReturnAListOfConceptVolumeModels()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new GetConceptVolumes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptVolumeModel>>(response);
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_GetConceptVolumesAsListing_Should_ReturnAListOfConceptVolumeModels()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new GetConceptVolumesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptVolumeModel>>(response);
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_GetConceptVolume_Should_ReturnAnConceptVolumeModel()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new GetConceptVolume { ID = 1 });
            Assert.Equal(nameof(IConceptVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_GetConceptVolumeByKey_Should_ReturnAnConceptVolumeModel()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new GetConceptVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IConceptVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_CreateConceptVolume_Should_ReturnAnConceptVolumeModel()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new CreateConceptVolume { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IConceptVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_UpdateConceptVolume_Should_ReturnAnConceptVolumeModel()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new UpdateConceptVolume { Id = 1 });
            Assert.Equal(nameof(IConceptVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_DeactivateConceptVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new DeactivateConceptVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_DeactivateConceptVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new DeactivateConceptVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_RemoveConceptVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new RemoveConceptVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptVolumes")]
        public void Verify_RemoveConceptVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptVolumesServices>();
            var response = service.Any(new RemoveConceptVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
