// <auto-generated>
// <copyright file="People.ICreatorCharacterServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CreatorCharactersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.People
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CreatorCharactersMockingSetup
    {
        public static Mock<ICreatorCharactersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCreatorCharactersBusinessWorkflow = new Mock<ICreatorCharactersBusinessWorkflow>();
            // Mock Functions
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICreatorCharacterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICreatorCharacterModel>());
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICreatorCharacterModel>().Object);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICreatorCharacterModel>().Object);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICreatorCharacterModel>())).Returns(() => new Mock<ICreatorCharacterModel>().Object);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICreatorCharacterModel>())).Returns(() => new Mock<ICreatorCharacterModel>().Object);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCreatorCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCreatorCharactersBusinessWorkflow;
        }
    }

    //public class CreatorCharactersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_GetCreatorCharacters_Should_ReturnAListOfCreatorCharacterModels()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new GetCreatorCharacters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICreatorCharacterModel>>(response);
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_GetCreatorCharactersAsListing_Should_ReturnAListOfCreatorCharacterModels()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new GetCreatorCharactersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICreatorCharacterModel>>(response);
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_GetCreatorCharacter_Should_ReturnAnCreatorCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new GetCreatorCharacter { ID = 1 });
            Assert.Equal(nameof(ICreatorCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_GetCreatorCharacterByKey_Should_ReturnAnCreatorCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new GetCreatorCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICreatorCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_CreateCreatorCharacter_Should_ReturnAnCreatorCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new CreateCreatorCharacter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICreatorCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_UpdateCreatorCharacter_Should_ReturnAnCreatorCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new UpdateCreatorCharacter { Id = 1 });
            Assert.Equal(nameof(ICreatorCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_DeactivateCreatorCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new DeactivateCreatorCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_DeactivateCreatorCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new DeactivateCreatorCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_RemoveCreatorCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new RemoveCreatorCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CreatorCharacters")]
        public void Verify_RemoveCreatorCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICreatorCharactersServices>();
            var response = service.Any(new RemoveCreatorCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
