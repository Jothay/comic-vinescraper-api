// <auto-generated>
// <copyright file="Movies.IMovieProducerServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieProducersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MovieProducersMockingSetup
    {
        public static Mock<IMovieProducersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMovieProducersBusinessWorkflow = new Mock<IMovieProducersBusinessWorkflow>();
            // Mock Functions
            mockMovieProducersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieProducerSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieProducerModel>());
            mockMovieProducersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieProducerModel>().Object);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieProducerModel>().Object);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieProducerModel>())).Returns(() => new Mock<IMovieProducerModel>().Object);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieProducerModel>())).Returns(() => new Mock<IMovieProducerModel>().Object);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMovieProducersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMovieProducersBusinessWorkflow;
        }
    }

    //public class MovieProducersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_GetMovieProducers_Should_ReturnAListOfMovieProducerModels()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new GetMovieProducers { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieProducerModel>>(response);
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_GetMovieProducersAsListing_Should_ReturnAListOfMovieProducerModels()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new GetMovieProducersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieProducerModel>>(response);
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_GetMovieProducer_Should_ReturnAnMovieProducerModel()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new GetMovieProducer { ID = 1 });
            Assert.Equal(nameof(IMovieProducerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_GetMovieProducerByKey_Should_ReturnAnMovieProducerModel()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new GetMovieProducerByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieProducerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_CreateMovieProducer_Should_ReturnAnMovieProducerModel()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new CreateMovieProducer { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieProducerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_UpdateMovieProducer_Should_ReturnAnMovieProducerModel()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new UpdateMovieProducer { Id = 1 });
            Assert.Equal(nameof(IMovieProducerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_DeactivateMovieProducer_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new DeactivateMovieProducer { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_DeactivateMovieProducerByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new DeactivateMovieProducerByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_RemoveMovieProducer_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new RemoveMovieProducer { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieProducers")]
        public void Verify_RemoveMovieProducerByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieProducersServices>();
            var response = service.Any(new RemoveMovieProducerByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
