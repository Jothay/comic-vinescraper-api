// <auto-generated>
// <copyright file="Teams.ITeamVolumeServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamVolumesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamVolumesMockingSetup
    {
        public static Mock<ITeamVolumesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamVolumesBusinessWorkflow = new Mock<ITeamVolumesBusinessWorkflow>();
            // Mock Functions
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamVolumeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamVolumeModel>());
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamVolumeModel>().Object);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamVolumeModel>().Object);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamVolumeModel>())).Returns(() => new Mock<ITeamVolumeModel>().Object);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamVolumeModel>())).Returns(() => new Mock<ITeamVolumeModel>().Object);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamVolumesBusinessWorkflow;
        }
    }

    //public class TeamVolumesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_GetTeamVolumes_Should_ReturnAListOfTeamVolumeModels()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new GetTeamVolumes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamVolumeModel>>(response);
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_GetTeamVolumesAsListing_Should_ReturnAListOfTeamVolumeModels()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new GetTeamVolumesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamVolumeModel>>(response);
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_GetTeamVolume_Should_ReturnAnTeamVolumeModel()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new GetTeamVolume { ID = 1 });
            Assert.Equal(nameof(ITeamVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_GetTeamVolumeByKey_Should_ReturnAnTeamVolumeModel()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new GetTeamVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_CreateTeamVolume_Should_ReturnAnTeamVolumeModel()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new CreateTeamVolume { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_UpdateTeamVolume_Should_ReturnAnTeamVolumeModel()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new UpdateTeamVolume { Id = 1 });
            Assert.Equal(nameof(ITeamVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_DeactivateTeamVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new DeactivateTeamVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_DeactivateTeamVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new DeactivateTeamVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_RemoveTeamVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new RemoveTeamVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamVolumes")]
        public void Verify_RemoveTeamVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamVolumesServices>();
            var response = service.Any(new RemoveTeamVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
