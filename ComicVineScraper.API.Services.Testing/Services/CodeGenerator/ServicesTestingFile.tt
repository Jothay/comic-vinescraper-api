<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)ComicVine.API.DataModel\bin\Debug\ComicVine.API.DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ComicVine.API.CodeGenerator" #>
<#@ import namespace="ComicVine.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateServicesTestingFile(string nameSpace, classInfo entityClass)
{
	//var hasProperties = false;
	//var hasRelatedProperties = false;
	//var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNameLowerFirst = Char.ToLowerInvariant(thisClassName[0]) + thisClassName.Substring(1);
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var thisClassNamePluralizedAny = thisClassNamePluralized;
	var thisClassNamePluralizedLowerFirst = Char.ToLowerInvariant(thisClassNamePluralized[0]) + thisClassNamePluralized.Substring(1);
	if (thisClassName == thisClassNamePluralized)
	{
		// We need a different plural name so the same class doesn't get gen'd twice
		thisClassNamePluralizedAny = "Any" + thisClassNamePluralized;
	}
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	var isRelationalTable = baseClassNameNoShared != "NameableEntityBase";
	//string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.I<#= thisClassName #>Services.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the <#= thisClassNamePluralized #>Repository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.<#= nameSpace #>
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class <#= thisClassNamePluralized #>MockingSetup
    {
        public static Mock<I<#= thisClassNamePluralized #>BusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mock<#= thisClassNamePluralized #>BusinessWorkflow = new Mock<I<#= thisClassNamePluralized #>BusinessWorkflow>();
            // Mock Functions
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Search(It.IsAny<I<#= thisClassName #>SearchModel>(), It.IsAny<bool>())).Returns(() => new List<I<#= thisClassName #>Model>());
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<I<#= thisClassName #>Model>().Object);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<I<#= thisClassName #>Model>().Object);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Create(It.IsAny<I<#= thisClassName #>Model>())).Returns(() => new Mock<I<#= thisClassName #>Model>().Object);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Update(It.IsAny<I<#= thisClassName #>Model>())).Returns(() => new Mock<I<#= thisClassName #>Model>().Object);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mock<#= thisClassNamePluralized #>BusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mock<#= thisClassNamePluralized #>BusinessWorkflow;
        }
    }

    //public class <#= thisClassNamePluralized #>ServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get<#= thisClassNamePluralized #>_Should_ReturnAListOf<#= thisClassName #>Models()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Get<#= thisClassNamePluralizedAny #> { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", <#+ if (!isRelationalTable) { #>Name = "Stephen King", Description = null,<#+ } #> ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<I<#= thisClassName #>Model>>(response);
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get<#= thisClassNamePluralized #>AsListing_Should_ReturnAListOf<#= thisClassName #>Models()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Get<#= thisClassNamePluralizedAny #>AsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", <#+ if (!isRelationalTable) { #>Name = "Stephen King", Description = "famous",<#+ } #> ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<I<#= thisClassName #>Model>>(response);
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get<#= thisClassName #>_Should_ReturnAn<#= thisClassName #>Model()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Get<#= thisClassName #> { ID = 1 });
            Assert.Equal(nameof(I<#= thisClassName #>Model), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get<#= thisClassName #>ByKey_Should_ReturnAn<#= thisClassName #>Model()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Get<#= thisClassName #>ByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(I<#= thisClassName #>Model), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Create<#= thisClassName #>_Should_ReturnAn<#= thisClassName #>Model()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Create<#= thisClassName #> { <#+ if (!isRelationalTable) { #>Name = "Stephen King", <#+ } #>CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(I<#= thisClassName #>Model), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Update<#= thisClassName #>_Should_ReturnAn<#= thisClassName #>Model()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Update<#= thisClassName #> { Id = 1 });
            Assert.Equal(nameof(I<#= thisClassName #>Model), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Deactivate<#= thisClassName #>_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Deactivate<#= thisClassName #> { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Deactivate<#= thisClassName #>ByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Deactivate<#= thisClassName #>ByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Remove<#= thisClassName #>_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Remove<#= thisClassName #> { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Remove<#= thisClassName #>ByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<I<#= thisClassNamePluralized #>Services>();
            var response = service.Any(new Remove<#= thisClassName #>ByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
<#+
} // End Function GenerateInterfaceFile
#>