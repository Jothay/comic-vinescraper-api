// <auto-generated>
// <copyright file="Episodes.IEpisodeAliasServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeAliasesMockingSetup
    {
        public static Mock<IEpisodeAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeAliasesBusinessWorkflow = new Mock<IEpisodeAliasesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeAliasModel>());
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeAliasModel>().Object);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeAliasModel>().Object);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeAliasModel>())).Returns(() => new Mock<IEpisodeAliasModel>().Object);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeAliasModel>())).Returns(() => new Mock<IEpisodeAliasModel>().Object);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeAliasesBusinessWorkflow;
        }
    }

    //public class EpisodeAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_GetEpisodeAliases_Should_ReturnAListOfEpisodeAliasModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new GetEpisodeAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = null, ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeAliasModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_GetEpisodeAliasesAsListing_Should_ReturnAListOfEpisodeAliasModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new GetEpisodeAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "famous", ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeAliasModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_GetEpisodeAlias_Should_ReturnAnEpisodeAliasModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new GetEpisodeAlias { ID = 1 });
            Assert.Equal(nameof(IEpisodeAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_GetEpisodeAliasByKey_Should_ReturnAnEpisodeAliasModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new GetEpisodeAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_CreateEpisodeAlias_Should_ReturnAnEpisodeAliasModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new CreateEpisodeAlias { Name = "Stephen King", CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_UpdateEpisodeAlias_Should_ReturnAnEpisodeAliasModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new UpdateEpisodeAlias { Id = 1 });
            Assert.Equal(nameof(IEpisodeAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_DeactivateEpisodeAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new DeactivateEpisodeAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_DeactivateEpisodeAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new DeactivateEpisodeAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_RemoveEpisodeAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new RemoveEpisodeAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeAliases")]
        public void Verify_RemoveEpisodeAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeAliasesServices>();
            var response = service.Any(new RemoveEpisodeAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
