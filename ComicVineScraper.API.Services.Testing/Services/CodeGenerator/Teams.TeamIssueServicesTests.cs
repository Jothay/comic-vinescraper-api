// <auto-generated>
// <copyright file="Teams.ITeamIssueServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamIssuesMockingSetup
    {
        public static Mock<ITeamIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamIssuesBusinessWorkflow = new Mock<ITeamIssuesBusinessWorkflow>();
            // Mock Functions
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamIssueModel>());
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamIssueModel>().Object);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamIssueModel>().Object);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamIssueModel>())).Returns(() => new Mock<ITeamIssueModel>().Object);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamIssueModel>())).Returns(() => new Mock<ITeamIssueModel>().Object);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamIssuesBusinessWorkflow;
        }
    }

    //public class TeamIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_GetTeamIssues_Should_ReturnAListOfTeamIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new GetTeamIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_GetTeamIssuesAsListing_Should_ReturnAListOfTeamIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new GetTeamIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_GetTeamIssue_Should_ReturnAnTeamIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new GetTeamIssue { ID = 1 });
            Assert.Equal(nameof(ITeamIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_GetTeamIssueByKey_Should_ReturnAnTeamIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new GetTeamIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_CreateTeamIssue_Should_ReturnAnTeamIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new CreateTeamIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_UpdateTeamIssue_Should_ReturnAnTeamIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new UpdateTeamIssue { Id = 1 });
            Assert.Equal(nameof(ITeamIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_DeactivateTeamIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new DeactivateTeamIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_DeactivateTeamIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new DeactivateTeamIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_RemoveTeamIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new RemoveTeamIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamIssues")]
        public void Verify_RemoveTeamIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamIssuesServices>();
            var response = service.Any(new RemoveTeamIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
