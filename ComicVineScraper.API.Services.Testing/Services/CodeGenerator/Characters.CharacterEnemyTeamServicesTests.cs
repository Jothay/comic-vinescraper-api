// <auto-generated>
// <copyright file="Characters.ICharacterEnemyTeamServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterEnemyTeamsRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterEnemyTeamsMockingSetup
    {
        public static Mock<ICharacterEnemyTeamsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterEnemyTeamsBusinessWorkflow = new Mock<ICharacterEnemyTeamsBusinessWorkflow>();
            // Mock Functions
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterEnemyTeamSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterEnemyTeamModel>());
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterEnemyTeamModel>().Object);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterEnemyTeamModel>().Object);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterEnemyTeamModel>())).Returns(() => new Mock<ICharacterEnemyTeamModel>().Object);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterEnemyTeamModel>())).Returns(() => new Mock<ICharacterEnemyTeamModel>().Object);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterEnemyTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterEnemyTeamsBusinessWorkflow;
        }
    }

    //public class CharacterEnemyTeamsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_GetCharacterEnemyTeams_Should_ReturnAListOfCharacterEnemyTeamModels()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new GetCharacterEnemyTeams { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterEnemyTeamModel>>(response);
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_GetCharacterEnemyTeamsAsListing_Should_ReturnAListOfCharacterEnemyTeamModels()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new GetCharacterEnemyTeamsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterEnemyTeamModel>>(response);
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_GetCharacterEnemyTeam_Should_ReturnAnCharacterEnemyTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new GetCharacterEnemyTeam { ID = 1 });
            Assert.Equal(nameof(ICharacterEnemyTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_GetCharacterEnemyTeamByKey_Should_ReturnAnCharacterEnemyTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new GetCharacterEnemyTeamByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterEnemyTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_CreateCharacterEnemyTeam_Should_ReturnAnCharacterEnemyTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new CreateCharacterEnemyTeam { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterEnemyTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_UpdateCharacterEnemyTeam_Should_ReturnAnCharacterEnemyTeamModel()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new UpdateCharacterEnemyTeam { Id = 1 });
            Assert.Equal(nameof(ICharacterEnemyTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_DeactivateCharacterEnemyTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new DeactivateCharacterEnemyTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_DeactivateCharacterEnemyTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new DeactivateCharacterEnemyTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_RemoveCharacterEnemyTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new RemoveCharacterEnemyTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterEnemyTeams")]
        public void Verify_RemoveCharacterEnemyTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterEnemyTeamsServices>();
            var response = service.Any(new RemoveCharacterEnemyTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
