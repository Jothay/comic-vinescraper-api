// <auto-generated>
// <copyright file="Teams.ITeamMemberServices.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMembersRepository Class.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in ComicVine.API.Services.Testing\Services\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamMembersMockingSetup
    {
        public static Mock<ITeamMembersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamMembersBusinessWorkflow = new Mock<ITeamMembersBusinessWorkflow>();
            // Mock Functions
            mockTeamMembersBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamMemberModel>());
            mockTeamMembersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamMemberModel>().Object);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamMemberModel>().Object);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamMemberModel>())).Returns(() => new Mock<ITeamMemberModel>().Object);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamMemberModel>())).Returns(() => new Mock<ITeamMemberModel>().Object);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamMembersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamMembersBusinessWorkflow;
        }
    }

    //public class TeamMembersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_GetTeamMembers_Should_ReturnAListOfTeamMemberModels()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new GetTeamMembers { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamMemberModel>>(response);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_GetTeamMembersAsListing_Should_ReturnAListOfTeamMemberModels()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new GetTeamMembersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamMemberModel>>(response);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_GetTeamMember_Should_ReturnAnTeamMemberModel()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new GetTeamMember { ID = 1 });
            Assert.Equal(nameof(ITeamMemberModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_GetTeamMemberByKey_Should_ReturnAnTeamMemberModel()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new GetTeamMemberByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamMemberModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_CreateTeamMember_Should_ReturnAnTeamMemberModel()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new CreateTeamMember { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamMemberModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_UpdateTeamMember_Should_ReturnAnTeamMemberModel()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new UpdateTeamMember { Id = 1 });
            Assert.Equal(nameof(ITeamMemberModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_DeactivateTeamMember_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new DeactivateTeamMember { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_DeactivateTeamMemberByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new DeactivateTeamMemberByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_RemoveTeamMember_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new RemoveTeamMember { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_RemoveTeamMemberByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamMembersServices>();
            var response = service.Any(new RemoveTeamMemberByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
