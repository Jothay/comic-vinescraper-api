// <auto-generated>
// <copyright file="Origins.IOriginProfileServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the OriginProfiles ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Origins
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class OriginProfilesMockingSetup
    {
        public static Mock<IOriginProfilesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockOriginProfilesBusinessWorkflow = new Mock<IOriginProfilesBusinessWorkflow>();
            // Mock Functions
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IOriginProfileSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IOriginProfileModel>());
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IOriginProfileModel>().Object);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IOriginProfileModel>().Object);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IOriginProfileModel>())).Returns(() => new Mock<IOriginProfileModel>().Object);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IOriginProfileModel>())).Returns(() => new Mock<IOriginProfileModel>().Object);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockOriginProfilesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockOriginProfilesBusinessWorkflow;
        }
    }

    //public class OriginProfilesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_GetOriginProfiles_Should_ReturnAListOfOriginProfileModels()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new GetOriginProfiles { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IOriginProfileModel>>(response);
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_GetOriginProfilesAsListing_Should_ReturnAListOfOriginProfileModels()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new GetOriginProfilesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IOriginProfileModel>>(response);
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_GetOriginProfile_Should_ReturnAnOriginProfileModel()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new GetOriginProfile { ID = 1 });
            Assert.Equal(nameof(IOriginProfileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_GetOriginProfileByKey_Should_ReturnAnOriginProfileModel()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new GetOriginProfileByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IOriginProfileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_CreateOriginProfile_Should_ReturnAnOriginProfileModel()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new CreateOriginProfile { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IOriginProfileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_UpdateOriginProfile_Should_ReturnAnOriginProfileModel()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new UpdateOriginProfile { Id = 1 });
            Assert.Equal(nameof(IOriginProfileModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_DeactivateOriginProfile_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new DeactivateOriginProfile { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_DeactivateOriginProfileByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new DeactivateOriginProfileByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_RemoveOriginProfile_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new RemoveOriginProfile { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "OriginProfiles")]
        public void Verify_RemoveOriginProfileByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IOriginProfilesServices>();
            var response = service.Any(new RemoveOriginProfileByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
