// <auto-generated>
// <copyright file="Objects.IObjectAppearedInIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ObjectAppearedInIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ObjectAppearedInIssuesMockingSetup
    {
        public static Mock<IObjectAppearedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockObjectAppearedInIssuesBusinessWorkflow = new Mock<IObjectAppearedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IObjectAppearedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IObjectAppearedInIssueModel>());
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IObjectAppearedInIssueModel>().Object);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IObjectAppearedInIssueModel>().Object);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IObjectAppearedInIssueModel>())).Returns(() => new Mock<IObjectAppearedInIssueModel>().Object);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IObjectAppearedInIssueModel>())).Returns(() => new Mock<IObjectAppearedInIssueModel>().Object);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockObjectAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockObjectAppearedInIssuesBusinessWorkflow;
        }
    }

    //public class ObjectAppearedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_GetObjectAppearedInIssues_Should_ReturnAListOfObjectAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new GetObjectAppearedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_GetObjectAppearedInIssuesAsListing_Should_ReturnAListOfObjectAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new GetObjectAppearedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_GetObjectAppearedInIssue_Should_ReturnAnObjectAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new GetObjectAppearedInIssue { ID = 1 });
            Assert.Equal(nameof(IObjectAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_GetObjectAppearedInIssueByKey_Should_ReturnAnObjectAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new GetObjectAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IObjectAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_CreateObjectAppearedInIssue_Should_ReturnAnObjectAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new CreateObjectAppearedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IObjectAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_UpdateObjectAppearedInIssue_Should_ReturnAnObjectAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new UpdateObjectAppearedInIssue { Id = 1 });
            Assert.Equal(nameof(IObjectAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_DeactivateObjectAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new DeactivateObjectAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_DeactivateObjectAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new DeactivateObjectAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_RemoveObjectAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new RemoveObjectAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAppearedInIssues")]
        public void Verify_RemoveObjectAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAppearedInIssuesServices>();
            var response = service.Any(new RemoveObjectAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
