// <auto-generated>
// <copyright file="Episodes.IEpisodeStoryArcFirstAppearanceServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeStoryArcFirstAppearances ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeStoryArcFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeStoryArcFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeStoryArcFirstAppearancesBusinessWorkflow = new Mock<IEpisodeStoryArcFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeStoryArcFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeStoryArcFirstAppearanceModel>());
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeStoryArcFirstAppearanceModel>().Object);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeStoryArcFirstAppearanceModel>().Object);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeStoryArcFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeStoryArcFirstAppearanceModel>().Object);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeStoryArcFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeStoryArcFirstAppearanceModel>().Object);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeStoryArcFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeStoryArcFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeStoryArcFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_GetEpisodeStoryArcFirstAppearances_Should_ReturnAListOfEpisodeStoryArcFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeStoryArcFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeStoryArcFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_GetEpisodeStoryArcFirstAppearancesAsListing_Should_ReturnAListOfEpisodeStoryArcFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeStoryArcFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeStoryArcFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_GetEpisodeStoryArcFirstAppearance_Should_ReturnAnEpisodeStoryArcFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeStoryArcFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeStoryArcFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_GetEpisodeStoryArcFirstAppearanceByKey_Should_ReturnAnEpisodeStoryArcFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeStoryArcFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeStoryArcFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_CreateEpisodeStoryArcFirstAppearance_Should_ReturnAnEpisodeStoryArcFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeStoryArcFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeStoryArcFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_UpdateEpisodeStoryArcFirstAppearance_Should_ReturnAnEpisodeStoryArcFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeStoryArcFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeStoryArcFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_DeactivateEpisodeStoryArcFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeStoryArcFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_DeactivateEpisodeStoryArcFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeStoryArcFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_RemoveEpisodeStoryArcFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeStoryArcFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeStoryArcFirstAppearances")]
        public void Verify_RemoveEpisodeStoryArcFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeStoryArcFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeStoryArcFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
