// <auto-generated>
// <copyright file="Movies.IMovieServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Movies ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MoviesMockingSetup
    {
        public static Mock<IMoviesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMoviesBusinessWorkflow = new Mock<IMoviesBusinessWorkflow>();
            // Mock Functions
            mockMoviesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieModel>());
            mockMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieModel>().Object);
            mockMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieModel>().Object);
            mockMoviesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieModel>())).Returns(() => new Mock<IMovieModel>().Object);
            mockMoviesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieModel>())).Returns(() => new Mock<IMovieModel>().Object);
            mockMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMoviesBusinessWorkflow;
        }
    }

    //public class MoviesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Movies")]
        public void Verify_GetMovies_Should_ReturnAListOfMovieModels()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new GetMovies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieModel>>(response);
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_GetMoviesAsListing_Should_ReturnAListOfMovieModels()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new GetMoviesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieModel>>(response);
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_GetMovie_Should_ReturnAnMovieModel()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new GetMovie { ID = 1 });
            Assert.Equal(nameof(IMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_GetMovieByKey_Should_ReturnAnMovieModel()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new GetMovieByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_CreateMovie_Should_ReturnAnMovieModel()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new CreateMovie { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_UpdateMovie_Should_ReturnAnMovieModel()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new UpdateMovie { Id = 1 });
            Assert.Equal(nameof(IMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_DeactivateMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new DeactivateMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_DeactivateMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new DeactivateMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_RemoveMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new RemoveMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Movies")]
        public void Verify_RemoveMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMoviesServices>();
            var response = service.Any(new RemoveMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
