// <auto-generated>
// <copyright file="Episodes.IEpisodeObjectServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeObjects ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeObjectsMockingSetup
    {
        public static Mock<IEpisodeObjectsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeObjectsBusinessWorkflow = new Mock<IEpisodeObjectsBusinessWorkflow>();
            // Mock Functions
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeObjectSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeObjectModel>());
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeObjectModel>().Object);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeObjectModel>().Object);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeObjectModel>())).Returns(() => new Mock<IEpisodeObjectModel>().Object);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeObjectModel>())).Returns(() => new Mock<IEpisodeObjectModel>().Object);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeObjectsBusinessWorkflow;
        }
    }

    //public class EpisodeObjectsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_GetEpisodeObjects_Should_ReturnAListOfEpisodeObjectModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new GetEpisodeObjects { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeObjectModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_GetEpisodeObjectsAsListing_Should_ReturnAListOfEpisodeObjectModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new GetEpisodeObjectsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeObjectModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_GetEpisodeObject_Should_ReturnAnEpisodeObjectModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new GetEpisodeObject { ID = 1 });
            Assert.Equal(nameof(IEpisodeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_GetEpisodeObjectByKey_Should_ReturnAnEpisodeObjectModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new GetEpisodeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_CreateEpisodeObject_Should_ReturnAnEpisodeObjectModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new CreateEpisodeObject { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_UpdateEpisodeObject_Should_ReturnAnEpisodeObjectModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new UpdateEpisodeObject { Id = 1 });
            Assert.Equal(nameof(IEpisodeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_DeactivateEpisodeObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new DeactivateEpisodeObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_DeactivateEpisodeObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new DeactivateEpisodeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_RemoveEpisodeObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new RemoveEpisodeObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeObjects")]
        public void Verify_RemoveEpisodeObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeObjectsServices>();
            var response = service.Any(new RemoveEpisodeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
