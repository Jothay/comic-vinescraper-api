// <auto-generated>
// <copyright file="Volumes.IVolumeServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Volumes ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VolumesMockingSetup
    {
        public static Mock<IVolumesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVolumesBusinessWorkflow = new Mock<IVolumesBusinessWorkflow>();
            // Mock Functions
            mockVolumesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVolumeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVolumeModel>());
            mockVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVolumeModel>().Object);
            mockVolumesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVolumeModel>().Object);
            mockVolumesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVolumeModel>())).Returns(() => new Mock<IVolumeModel>().Object);
            mockVolumesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVolumeModel>())).Returns(() => new Mock<IVolumeModel>().Object);
            mockVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVolumesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVolumesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVolumesBusinessWorkflow;
        }
    }

    //public class VolumesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Volumes")]
        public void Verify_GetVolumes_Should_ReturnAListOfVolumeModels()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new GetVolumes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeModel>>(response);
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_GetVolumesAsListing_Should_ReturnAListOfVolumeModels()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new GetVolumesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeModel>>(response);
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_GetVolume_Should_ReturnAnVolumeModel()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new GetVolume { ID = 1 });
            Assert.Equal(nameof(IVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_GetVolumeByKey_Should_ReturnAnVolumeModel()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new GetVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_CreateVolume_Should_ReturnAnVolumeModel()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new CreateVolume { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_UpdateVolume_Should_ReturnAnVolumeModel()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new UpdateVolume { Id = 1 });
            Assert.Equal(nameof(IVolumeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_DeactivateVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new DeactivateVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_DeactivateVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new DeactivateVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_RemoveVolume_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new RemoveVolume { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Volumes")]
        public void Verify_RemoveVolumeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumesServices>();
            var response = service.Any(new RemoveVolumeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
