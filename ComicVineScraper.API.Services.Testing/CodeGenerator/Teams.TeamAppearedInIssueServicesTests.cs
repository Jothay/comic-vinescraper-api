// <auto-generated>
// <copyright file="Teams.ITeamAppearedInIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the TeamAppearedInIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamAppearedInIssuesMockingSetup
    {
        public static Mock<ITeamAppearedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamAppearedInIssuesBusinessWorkflow = new Mock<ITeamAppearedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamAppearedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamAppearedInIssueModel>());
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamAppearedInIssueModel>().Object);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamAppearedInIssueModel>().Object);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamAppearedInIssueModel>())).Returns(() => new Mock<ITeamAppearedInIssueModel>().Object);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamAppearedInIssueModel>())).Returns(() => new Mock<ITeamAppearedInIssueModel>().Object);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamAppearedInIssuesBusinessWorkflow;
        }
    }

    //public class TeamAppearedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_GetTeamAppearedInIssues_Should_ReturnAListOfTeamAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new GetTeamAppearedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_GetTeamAppearedInIssuesAsListing_Should_ReturnAListOfTeamAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new GetTeamAppearedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_GetTeamAppearedInIssue_Should_ReturnAnTeamAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new GetTeamAppearedInIssue { ID = 1 });
            Assert.Equal(nameof(ITeamAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_GetTeamAppearedInIssueByKey_Should_ReturnAnTeamAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new GetTeamAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_CreateTeamAppearedInIssue_Should_ReturnAnTeamAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new CreateTeamAppearedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_UpdateTeamAppearedInIssue_Should_ReturnAnTeamAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new UpdateTeamAppearedInIssue { Id = 1 });
            Assert.Equal(nameof(ITeamAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_DeactivateTeamAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new DeactivateTeamAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_DeactivateTeamAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new DeactivateTeamAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_RemoveTeamAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new RemoveTeamAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamAppearedInIssues")]
        public void Verify_RemoveTeamAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamAppearedInIssuesServices>();
            var response = service.Any(new RemoveTeamAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
