// <auto-generated>
// <copyright file="Episodes.IEpisodeTeamServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeTeams ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeTeamsMockingSetup
    {
        public static Mock<IEpisodeTeamsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeTeamsBusinessWorkflow = new Mock<IEpisodeTeamsBusinessWorkflow>();
            // Mock Functions
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeTeamSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeTeamModel>());
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeTeamModel>().Object);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeTeamModel>().Object);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeTeamModel>())).Returns(() => new Mock<IEpisodeTeamModel>().Object);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeTeamModel>())).Returns(() => new Mock<IEpisodeTeamModel>().Object);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeTeamsBusinessWorkflow;
        }
    }

    //public class EpisodeTeamsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_GetEpisodeTeams_Should_ReturnAListOfEpisodeTeamModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new GetEpisodeTeams { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeTeamModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_GetEpisodeTeamsAsListing_Should_ReturnAListOfEpisodeTeamModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new GetEpisodeTeamsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeTeamModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_GetEpisodeTeam_Should_ReturnAnEpisodeTeamModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new GetEpisodeTeam { ID = 1 });
            Assert.Equal(nameof(IEpisodeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_GetEpisodeTeamByKey_Should_ReturnAnEpisodeTeamModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new GetEpisodeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_CreateEpisodeTeam_Should_ReturnAnEpisodeTeamModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new CreateEpisodeTeam { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_UpdateEpisodeTeam_Should_ReturnAnEpisodeTeamModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new UpdateEpisodeTeam { Id = 1 });
            Assert.Equal(nameof(IEpisodeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_DeactivateEpisodeTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new DeactivateEpisodeTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_DeactivateEpisodeTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new DeactivateEpisodeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_RemoveEpisodeTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new RemoveEpisodeTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeTeams")]
        public void Verify_RemoveEpisodeTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeTeamsServices>();
            var response = service.Any(new RemoveEpisodeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
