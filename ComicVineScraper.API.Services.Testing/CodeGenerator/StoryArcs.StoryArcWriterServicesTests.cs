// <auto-generated>
// <copyright file="StoryArcs.IStoryArcWriterServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the StoryArcWriters ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.StoryArcs
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class StoryArcWritersMockingSetup
    {
        public static Mock<IStoryArcWritersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockStoryArcWritersBusinessWorkflow = new Mock<IStoryArcWritersBusinessWorkflow>();
            // Mock Functions
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IStoryArcWriterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IStoryArcWriterModel>());
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IStoryArcWriterModel>().Object);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IStoryArcWriterModel>().Object);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IStoryArcWriterModel>())).Returns(() => new Mock<IStoryArcWriterModel>().Object);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IStoryArcWriterModel>())).Returns(() => new Mock<IStoryArcWriterModel>().Object);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockStoryArcWritersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockStoryArcWritersBusinessWorkflow;
        }
    }

    //public class StoryArcWritersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_GetStoryArcWriters_Should_ReturnAListOfStoryArcWriterModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new GetStoryArcWriters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcWriterModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_GetStoryArcWritersAsListing_Should_ReturnAListOfStoryArcWriterModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new GetStoryArcWritersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcWriterModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_GetStoryArcWriter_Should_ReturnAnStoryArcWriterModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new GetStoryArcWriter { ID = 1 });
            Assert.Equal(nameof(IStoryArcWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_GetStoryArcWriterByKey_Should_ReturnAnStoryArcWriterModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new GetStoryArcWriterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IStoryArcWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_CreateStoryArcWriter_Should_ReturnAnStoryArcWriterModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new CreateStoryArcWriter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IStoryArcWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_UpdateStoryArcWriter_Should_ReturnAnStoryArcWriterModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new UpdateStoryArcWriter { Id = 1 });
            Assert.Equal(nameof(IStoryArcWriterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_DeactivateStoryArcWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new DeactivateStoryArcWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_DeactivateStoryArcWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new DeactivateStoryArcWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_RemoveStoryArcWriter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new RemoveStoryArcWriter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcWriters")]
        public void Verify_RemoveStoryArcWriterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcWritersServices>();
            var response = service.Any(new RemoveStoryArcWriterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
