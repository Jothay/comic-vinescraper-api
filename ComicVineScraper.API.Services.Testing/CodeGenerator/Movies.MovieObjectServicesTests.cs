// <auto-generated>
// <copyright file="Movies.IMovieObjectServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the MovieObjects ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MovieObjectsMockingSetup
    {
        public static Mock<IMovieObjectsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMovieObjectsBusinessWorkflow = new Mock<IMovieObjectsBusinessWorkflow>();
            // Mock Functions
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieObjectSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieObjectModel>());
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieObjectModel>().Object);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieObjectModel>().Object);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieObjectModel>())).Returns(() => new Mock<IMovieObjectModel>().Object);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieObjectModel>())).Returns(() => new Mock<IMovieObjectModel>().Object);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMovieObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMovieObjectsBusinessWorkflow;
        }
    }

    //public class MovieObjectsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_GetMovieObjects_Should_ReturnAListOfMovieObjectModels()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new GetMovieObjects { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieObjectModel>>(response);
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_GetMovieObjectsAsListing_Should_ReturnAListOfMovieObjectModels()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new GetMovieObjectsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieObjectModel>>(response);
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_GetMovieObject_Should_ReturnAnMovieObjectModel()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new GetMovieObject { ID = 1 });
            Assert.Equal(nameof(IMovieObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_GetMovieObjectByKey_Should_ReturnAnMovieObjectModel()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new GetMovieObjectByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_CreateMovieObject_Should_ReturnAnMovieObjectModel()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new CreateMovieObject { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_UpdateMovieObject_Should_ReturnAnMovieObjectModel()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new UpdateMovieObject { Id = 1 });
            Assert.Equal(nameof(IMovieObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_DeactivateMovieObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new DeactivateMovieObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_DeactivateMovieObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new DeactivateMovieObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_RemoveMovieObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new RemoveMovieObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieObjects")]
        public void Verify_RemoveMovieObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieObjectsServices>();
            var response = service.Any(new RemoveMovieObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
