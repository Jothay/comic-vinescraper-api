// <auto-generated>
// <copyright file="People.IGenderServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Genders ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.People
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class GendersMockingSetup
    {
        public static Mock<IGendersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockGendersBusinessWorkflow = new Mock<IGendersBusinessWorkflow>();
            // Mock Functions
            mockGendersBusinessWorkflow.Setup(m => m.Search(It.IsAny<IGenderSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IGenderModel>());
            mockGendersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IGenderModel>().Object);
            mockGendersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IGenderModel>().Object);
            mockGendersBusinessWorkflow.Setup(m => m.Create(It.IsAny<IGenderModel>())).Returns(() => new Mock<IGenderModel>().Object);
            mockGendersBusinessWorkflow.Setup(m => m.Update(It.IsAny<IGenderModel>())).Returns(() => new Mock<IGenderModel>().Object);
            mockGendersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockGendersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockGendersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockGendersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockGendersBusinessWorkflow;
        }
    }

    //public class GendersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Genders")]
        public void Verify_GetGenders_Should_ReturnAListOfGenderModels()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new GetGenders { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IGenderModel>>(response);
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_GetGendersAsListing_Should_ReturnAListOfGenderModels()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new GetGendersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IGenderModel>>(response);
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_GetGender_Should_ReturnAnGenderModel()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new GetGender { ID = 1 });
            Assert.Equal(nameof(IGenderModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_GetGenderByKey_Should_ReturnAnGenderModel()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new GetGenderByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IGenderModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_CreateGender_Should_ReturnAnGenderModel()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new CreateGender { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IGenderModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_UpdateGender_Should_ReturnAnGenderModel()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new UpdateGender { Id = 1 });
            Assert.Equal(nameof(IGenderModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_DeactivateGender_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new DeactivateGender { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_DeactivateGenderByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new DeactivateGenderByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_RemoveGender_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new RemoveGender { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Genders")]
        public void Verify_RemoveGenderByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IGendersServices>();
            var response = service.Any(new RemoveGenderByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
