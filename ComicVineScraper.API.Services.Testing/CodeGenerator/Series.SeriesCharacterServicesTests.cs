// <auto-generated>
// <copyright file="Series.ISeriesCharacterServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the SeriesCharacters ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Series
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class SeriesCharactersMockingSetup
    {
        public static Mock<ISeriesCharactersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockSeriesCharactersBusinessWorkflow = new Mock<ISeriesCharactersBusinessWorkflow>();
            // Mock Functions
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Search(It.IsAny<ISeriesCharacterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ISeriesCharacterModel>());
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ISeriesCharacterModel>().Object);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ISeriesCharacterModel>().Object);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Create(It.IsAny<ISeriesCharacterModel>())).Returns(() => new Mock<ISeriesCharacterModel>().Object);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Update(It.IsAny<ISeriesCharacterModel>())).Returns(() => new Mock<ISeriesCharacterModel>().Object);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockSeriesCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockSeriesCharactersBusinessWorkflow;
        }
    }

    //public class SeriesCharactersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_GetSeriesCharacters_Should_ReturnAListOfSeriesCharacterModels()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new GetSeriesCharacters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ISeriesCharacterModel>>(response);
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_GetSeriesCharactersAsListing_Should_ReturnAListOfSeriesCharacterModels()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new GetSeriesCharactersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ISeriesCharacterModel>>(response);
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_GetSeriesCharacter_Should_ReturnAnSeriesCharacterModel()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new GetSeriesCharacter { ID = 1 });
            Assert.Equal(nameof(ISeriesCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_GetSeriesCharacterByKey_Should_ReturnAnSeriesCharacterModel()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new GetSeriesCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ISeriesCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_CreateSeriesCharacter_Should_ReturnAnSeriesCharacterModel()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new CreateSeriesCharacter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ISeriesCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_UpdateSeriesCharacter_Should_ReturnAnSeriesCharacterModel()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new UpdateSeriesCharacter { Id = 1 });
            Assert.Equal(nameof(ISeriesCharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_DeactivateSeriesCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new DeactivateSeriesCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_DeactivateSeriesCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new DeactivateSeriesCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_RemoveSeriesCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new RemoveSeriesCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "SeriesCharacters")]
        public void Verify_RemoveSeriesCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ISeriesCharactersServices>();
            var response = service.Any(new RemoveSeriesCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
