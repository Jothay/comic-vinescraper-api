// <auto-generated>
// <copyright file="Videos.IVideoServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Videos ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Videos
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VideosMockingSetup
    {
        public static Mock<IVideosBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVideosBusinessWorkflow = new Mock<IVideosBusinessWorkflow>();
            // Mock Functions
            mockVideosBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVideoSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVideoModel>());
            mockVideosBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVideoModel>().Object);
            mockVideosBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVideoModel>().Object);
            mockVideosBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVideoModel>())).Returns(() => new Mock<IVideoModel>().Object);
            mockVideosBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVideoModel>())).Returns(() => new Mock<IVideoModel>().Object);
            mockVideosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVideosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVideosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVideosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVideosBusinessWorkflow;
        }
    }

    //public class VideosServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Videos")]
        public void Verify_GetVideos_Should_ReturnAListOfVideoModels()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new GetVideos { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVideoModel>>(response);
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_GetVideosAsListing_Should_ReturnAListOfVideoModels()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new GetVideosAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVideoModel>>(response);
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_GetVideo_Should_ReturnAnVideoModel()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new GetVideo { ID = 1 });
            Assert.Equal(nameof(IVideoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_GetVideoByKey_Should_ReturnAnVideoModel()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new GetVideoByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVideoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_CreateVideo_Should_ReturnAnVideoModel()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new CreateVideo { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVideoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_UpdateVideo_Should_ReturnAnVideoModel()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new UpdateVideo { Id = 1 });
            Assert.Equal(nameof(IVideoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_DeactivateVideo_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new DeactivateVideo { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_DeactivateVideoByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new DeactivateVideoByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_RemoveVideo_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new RemoveVideo { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Videos")]
        public void Verify_RemoveVideoByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVideosServices>();
            var response = service.Any(new RemoveVideoByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
