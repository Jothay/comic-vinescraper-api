// <auto-generated>
// <copyright file="Concepts.IConceptIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ConceptIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ConceptIssuesMockingSetup
    {
        public static Mock<IConceptIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockConceptIssuesBusinessWorkflow = new Mock<IConceptIssuesBusinessWorkflow>();
            // Mock Functions
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IConceptIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IConceptIssueModel>());
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IConceptIssueModel>().Object);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IConceptIssueModel>().Object);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IConceptIssueModel>())).Returns(() => new Mock<IConceptIssueModel>().Object);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IConceptIssueModel>())).Returns(() => new Mock<IConceptIssueModel>().Object);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockConceptIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockConceptIssuesBusinessWorkflow;
        }
    }

    //public class ConceptIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_GetConceptIssues_Should_ReturnAListOfConceptIssueModels()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new GetConceptIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptIssueModel>>(response);
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_GetConceptIssuesAsListing_Should_ReturnAListOfConceptIssueModels()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new GetConceptIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptIssueModel>>(response);
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_GetConceptIssue_Should_ReturnAnConceptIssueModel()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new GetConceptIssue { ID = 1 });
            Assert.Equal(nameof(IConceptIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_GetConceptIssueByKey_Should_ReturnAnConceptIssueModel()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new GetConceptIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IConceptIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_CreateConceptIssue_Should_ReturnAnConceptIssueModel()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new CreateConceptIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IConceptIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_UpdateConceptIssue_Should_ReturnAnConceptIssueModel()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new UpdateConceptIssue { Id = 1 });
            Assert.Equal(nameof(IConceptIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_DeactivateConceptIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new DeactivateConceptIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_DeactivateConceptIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new DeactivateConceptIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_RemoveConceptIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new RemoveConceptIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ConceptIssues")]
        public void Verify_RemoveConceptIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptIssuesServices>();
            var response = service.Any(new RemoveConceptIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
