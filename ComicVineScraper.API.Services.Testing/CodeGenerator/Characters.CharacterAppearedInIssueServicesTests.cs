// <auto-generated>
// <copyright file="Characters.ICharacterAppearedInIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the CharacterAppearedInIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterAppearedInIssuesMockingSetup
    {
        public static Mock<ICharacterAppearedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterAppearedInIssuesBusinessWorkflow = new Mock<ICharacterAppearedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterAppearedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterAppearedInIssueModel>());
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterAppearedInIssueModel>().Object);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterAppearedInIssueModel>().Object);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterAppearedInIssueModel>())).Returns(() => new Mock<ICharacterAppearedInIssueModel>().Object);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterAppearedInIssueModel>())).Returns(() => new Mock<ICharacterAppearedInIssueModel>().Object);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterAppearedInIssuesBusinessWorkflow;
        }
    }

    //public class CharacterAppearedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_GetCharacterAppearedInIssues_Should_ReturnAListOfCharacterAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new GetCharacterAppearedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_GetCharacterAppearedInIssuesAsListing_Should_ReturnAListOfCharacterAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new GetCharacterAppearedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_GetCharacterAppearedInIssue_Should_ReturnAnCharacterAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new GetCharacterAppearedInIssue { ID = 1 });
            Assert.Equal(nameof(ICharacterAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_GetCharacterAppearedInIssueByKey_Should_ReturnAnCharacterAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new GetCharacterAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_CreateCharacterAppearedInIssue_Should_ReturnAnCharacterAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new CreateCharacterAppearedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_UpdateCharacterAppearedInIssue_Should_ReturnAnCharacterAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new UpdateCharacterAppearedInIssue { Id = 1 });
            Assert.Equal(nameof(ICharacterAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_DeactivateCharacterAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new DeactivateCharacterAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_DeactivateCharacterAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new DeactivateCharacterAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_RemoveCharacterAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new RemoveCharacterAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterAppearedInIssues")]
        public void Verify_RemoveCharacterAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterAppearedInIssuesServices>();
            var response = service.Any(new RemoveCharacterAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
