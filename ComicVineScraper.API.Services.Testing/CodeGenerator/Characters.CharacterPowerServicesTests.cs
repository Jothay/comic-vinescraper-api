// <auto-generated>
// <copyright file="Characters.ICharacterPowerServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the CharacterPowers ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterPowersMockingSetup
    {
        public static Mock<ICharacterPowersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterPowersBusinessWorkflow = new Mock<ICharacterPowersBusinessWorkflow>();
            // Mock Functions
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterPowerSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterPowerModel>());
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterPowerModel>().Object);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterPowerModel>().Object);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterPowerModel>())).Returns(() => new Mock<ICharacterPowerModel>().Object);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterPowerModel>())).Returns(() => new Mock<ICharacterPowerModel>().Object);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterPowersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterPowersBusinessWorkflow;
        }
    }

    //public class CharacterPowersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_GetCharacterPowers_Should_ReturnAListOfCharacterPowerModels()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new GetCharacterPowers { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterPowerModel>>(response);
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_GetCharacterPowersAsListing_Should_ReturnAListOfCharacterPowerModels()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new GetCharacterPowersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterPowerModel>>(response);
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_GetCharacterPower_Should_ReturnAnCharacterPowerModel()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new GetCharacterPower { ID = 1 });
            Assert.Equal(nameof(ICharacterPowerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_GetCharacterPowerByKey_Should_ReturnAnCharacterPowerModel()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new GetCharacterPowerByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterPowerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_CreateCharacterPower_Should_ReturnAnCharacterPowerModel()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new CreateCharacterPower { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterPowerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_UpdateCharacterPower_Should_ReturnAnCharacterPowerModel()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new UpdateCharacterPower { Id = 1 });
            Assert.Equal(nameof(ICharacterPowerModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_DeactivateCharacterPower_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new DeactivateCharacterPower { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_DeactivateCharacterPowerByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new DeactivateCharacterPowerByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_RemoveCharacterPower_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new RemoveCharacterPower { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterPowers")]
        public void Verify_RemoveCharacterPowerByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterPowersServices>();
            var response = service.Any(new RemoveCharacterPowerByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
