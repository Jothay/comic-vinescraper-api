// <auto-generated>
// <copyright file="Movies.IMovieStudioServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the MovieStudios ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class MovieStudiosMockingSetup
    {
        public static Mock<IMovieStudiosBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockMovieStudiosBusinessWorkflow = new Mock<IMovieStudiosBusinessWorkflow>();
            // Mock Functions
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Search(It.IsAny<IMovieStudioSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IMovieStudioModel>());
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovieStudioModel>().Object);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovieStudioModel>().Object);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Create(It.IsAny<IMovieStudioModel>())).Returns(() => new Mock<IMovieStudioModel>().Object);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Update(It.IsAny<IMovieStudioModel>())).Returns(() => new Mock<IMovieStudioModel>().Object);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockMovieStudiosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockMovieStudiosBusinessWorkflow;
        }
    }

    //public class MovieStudiosServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_GetMovieStudios_Should_ReturnAListOfMovieStudioModels()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new GetMovieStudios { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieStudioModel>>(response);
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_GetMovieStudiosAsListing_Should_ReturnAListOfMovieStudioModels()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new GetMovieStudiosAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IMovieStudioModel>>(response);
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_GetMovieStudio_Should_ReturnAnMovieStudioModel()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new GetMovieStudio { ID = 1 });
            Assert.Equal(nameof(IMovieStudioModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_GetMovieStudioByKey_Should_ReturnAnMovieStudioModel()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new GetMovieStudioByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IMovieStudioModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_CreateMovieStudio_Should_ReturnAnMovieStudioModel()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new CreateMovieStudio { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IMovieStudioModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_UpdateMovieStudio_Should_ReturnAnMovieStudioModel()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new UpdateMovieStudio { Id = 1 });
            Assert.Equal(nameof(IMovieStudioModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_DeactivateMovieStudio_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new DeactivateMovieStudio { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_DeactivateMovieStudioByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new DeactivateMovieStudioByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_RemoveMovieStudio_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new RemoveMovieStudio { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "MovieStudios")]
        public void Verify_RemoveMovieStudioByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IMovieStudiosServices>();
            var response = service.Any(new RemoveMovieStudioByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
