// <auto-generated>
// <copyright file="Issues.IIssueAliasServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the IssueAliases ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Issues
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class IssueAliasesMockingSetup
    {
        public static Mock<IIssueAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockIssueAliasesBusinessWorkflow = new Mock<IIssueAliasesBusinessWorkflow>();
            // Mock Functions
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IIssueAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IIssueAliasModel>());
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IIssueAliasModel>().Object);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IIssueAliasModel>().Object);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IIssueAliasModel>())).Returns(() => new Mock<IIssueAliasModel>().Object);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IIssueAliasModel>())).Returns(() => new Mock<IIssueAliasModel>().Object);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockIssueAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockIssueAliasesBusinessWorkflow;
        }
    }

    //public class IssueAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_GetIssueAliases_Should_ReturnAListOfIssueAliasModels()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new GetIssueAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IIssueAliasModel>>(response);
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_GetIssueAliasesAsListing_Should_ReturnAListOfIssueAliasModels()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new GetIssueAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IIssueAliasModel>>(response);
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_GetIssueAlias_Should_ReturnAnIssueAliasModel()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new GetIssueAlias { ID = 1 });
            Assert.Equal(nameof(IIssueAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_GetIssueAliasByKey_Should_ReturnAnIssueAliasModel()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new GetIssueAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IIssueAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_CreateIssueAlias_Should_ReturnAnIssueAliasModel()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new CreateIssueAlias { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IIssueAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_UpdateIssueAlias_Should_ReturnAnIssueAliasModel()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new UpdateIssueAlias { Id = 1 });
            Assert.Equal(nameof(IIssueAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_DeactivateIssueAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new DeactivateIssueAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_DeactivateIssueAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new DeactivateIssueAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_RemoveIssueAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new RemoveIssueAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "IssueAliases")]
        public void Verify_RemoveIssueAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IIssueAliasesServices>();
            var response = service.Any(new RemoveIssueAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
