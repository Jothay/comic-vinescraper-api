// <auto-generated>
// <copyright file="Concepts.IConceptServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Concepts ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ConceptsMockingSetup
    {
        public static Mock<IConceptsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockConceptsBusinessWorkflow = new Mock<IConceptsBusinessWorkflow>();
            // Mock Functions
            mockConceptsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IConceptSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IConceptModel>());
            mockConceptsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IConceptModel>().Object);
            mockConceptsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IConceptModel>().Object);
            mockConceptsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IConceptModel>())).Returns(() => new Mock<IConceptModel>().Object);
            mockConceptsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IConceptModel>())).Returns(() => new Mock<IConceptModel>().Object);
            mockConceptsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockConceptsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockConceptsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockConceptsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockConceptsBusinessWorkflow;
        }
    }

    //public class ConceptsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Concepts")]
        public void Verify_GetConcepts_Should_ReturnAListOfConceptModels()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new GetConcepts { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptModel>>(response);
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_GetConceptsAsListing_Should_ReturnAListOfConceptModels()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new GetConceptsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IConceptModel>>(response);
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_GetConcept_Should_ReturnAnConceptModel()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new GetConcept { ID = 1 });
            Assert.Equal(nameof(IConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_GetConceptByKey_Should_ReturnAnConceptModel()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new GetConceptByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_CreateConcept_Should_ReturnAnConceptModel()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new CreateConcept { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_UpdateConcept_Should_ReturnAnConceptModel()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new UpdateConcept { Id = 1 });
            Assert.Equal(nameof(IConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_DeactivateConcept_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new DeactivateConcept { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_DeactivateConceptByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new DeactivateConceptByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_RemoveConcept_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new RemoveConcept { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Concepts")]
        public void Verify_RemoveConceptByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IConceptsServices>();
            var response = service.Any(new RemoveConceptByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
