// <auto-generated>
// <copyright file="Episodes.IEpisodeConceptServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeConcepts ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeConceptsMockingSetup
    {
        public static Mock<IEpisodeConceptsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeConceptsBusinessWorkflow = new Mock<IEpisodeConceptsBusinessWorkflow>();
            // Mock Functions
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeConceptSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeConceptModel>());
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeConceptModel>().Object);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeConceptModel>().Object);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeConceptModel>())).Returns(() => new Mock<IEpisodeConceptModel>().Object);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeConceptModel>())).Returns(() => new Mock<IEpisodeConceptModel>().Object);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeConceptsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeConceptsBusinessWorkflow;
        }
    }

    //public class EpisodeConceptsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_GetEpisodeConcepts_Should_ReturnAListOfEpisodeConceptModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new GetEpisodeConcepts { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeConceptModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_GetEpisodeConceptsAsListing_Should_ReturnAListOfEpisodeConceptModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new GetEpisodeConceptsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeConceptModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_GetEpisodeConcept_Should_ReturnAnEpisodeConceptModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new GetEpisodeConcept { ID = 1 });
            Assert.Equal(nameof(IEpisodeConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_GetEpisodeConceptByKey_Should_ReturnAnEpisodeConceptModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new GetEpisodeConceptByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_CreateEpisodeConcept_Should_ReturnAnEpisodeConceptModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new CreateEpisodeConcept { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_UpdateEpisodeConcept_Should_ReturnAnEpisodeConceptModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new UpdateEpisodeConcept { Id = 1 });
            Assert.Equal(nameof(IEpisodeConceptModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_DeactivateEpisodeConcept_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new DeactivateEpisodeConcept { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_DeactivateEpisodeConceptByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new DeactivateEpisodeConceptByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_RemoveEpisodeConcept_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new RemoveEpisodeConcept { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConcepts")]
        public void Verify_RemoveEpisodeConceptByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptsServices>();
            var response = service.Any(new RemoveEpisodeConceptByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
