// <auto-generated>
// <copyright file="Locations.ILocationMovieServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the LocationMovies ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class LocationMoviesMockingSetup
    {
        public static Mock<ILocationMoviesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockLocationMoviesBusinessWorkflow = new Mock<ILocationMoviesBusinessWorkflow>();
            // Mock Functions
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ILocationMovieSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ILocationMovieModel>());
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ILocationMovieModel>().Object);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ILocationMovieModel>().Object);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ILocationMovieModel>())).Returns(() => new Mock<ILocationMovieModel>().Object);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ILocationMovieModel>())).Returns(() => new Mock<ILocationMovieModel>().Object);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockLocationMoviesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockLocationMoviesBusinessWorkflow;
        }
    }

    //public class LocationMoviesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_GetLocationMovies_Should_ReturnAListOfLocationMovieModels()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new GetLocationMovies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationMovieModel>>(response);
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_GetLocationMoviesAsListing_Should_ReturnAListOfLocationMovieModels()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new GetLocationMoviesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationMovieModel>>(response);
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_GetLocationMovie_Should_ReturnAnLocationMovieModel()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new GetLocationMovie { ID = 1 });
            Assert.Equal(nameof(ILocationMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_GetLocationMovieByKey_Should_ReturnAnLocationMovieModel()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new GetLocationMovieByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ILocationMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_CreateLocationMovie_Should_ReturnAnLocationMovieModel()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new CreateLocationMovie { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ILocationMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_UpdateLocationMovie_Should_ReturnAnLocationMovieModel()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new UpdateLocationMovie { Id = 1 });
            Assert.Equal(nameof(ILocationMovieModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_DeactivateLocationMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new DeactivateLocationMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_DeactivateLocationMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new DeactivateLocationMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_RemoveLocationMovie_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new RemoveLocationMovie { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationMovies")]
        public void Verify_RemoveLocationMovieByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationMoviesServices>();
            var response = service.Any(new RemoveLocationMovieByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
