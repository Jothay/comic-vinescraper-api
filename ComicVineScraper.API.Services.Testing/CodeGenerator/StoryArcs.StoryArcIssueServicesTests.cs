// <auto-generated>
// <copyright file="StoryArcs.IStoryArcIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the StoryArcIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.StoryArcs
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class StoryArcIssuesMockingSetup
    {
        public static Mock<IStoryArcIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockStoryArcIssuesBusinessWorkflow = new Mock<IStoryArcIssuesBusinessWorkflow>();
            // Mock Functions
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IStoryArcIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IStoryArcIssueModel>());
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IStoryArcIssueModel>().Object);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IStoryArcIssueModel>().Object);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IStoryArcIssueModel>())).Returns(() => new Mock<IStoryArcIssueModel>().Object);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IStoryArcIssueModel>())).Returns(() => new Mock<IStoryArcIssueModel>().Object);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockStoryArcIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockStoryArcIssuesBusinessWorkflow;
        }
    }

    //public class StoryArcIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_GetStoryArcIssues_Should_ReturnAListOfStoryArcIssueModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new GetStoryArcIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcIssueModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_GetStoryArcIssuesAsListing_Should_ReturnAListOfStoryArcIssueModels()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new GetStoryArcIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IStoryArcIssueModel>>(response);
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_GetStoryArcIssue_Should_ReturnAnStoryArcIssueModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new GetStoryArcIssue { ID = 1 });
            Assert.Equal(nameof(IStoryArcIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_GetStoryArcIssueByKey_Should_ReturnAnStoryArcIssueModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new GetStoryArcIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IStoryArcIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_CreateStoryArcIssue_Should_ReturnAnStoryArcIssueModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new CreateStoryArcIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IStoryArcIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_UpdateStoryArcIssue_Should_ReturnAnStoryArcIssueModel()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new UpdateStoryArcIssue { Id = 1 });
            Assert.Equal(nameof(IStoryArcIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_DeactivateStoryArcIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new DeactivateStoryArcIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_DeactivateStoryArcIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new DeactivateStoryArcIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_RemoveStoryArcIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new RemoveStoryArcIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_RemoveStoryArcIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IStoryArcIssuesServices>();
            var response = service.Any(new RemoveStoryArcIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
