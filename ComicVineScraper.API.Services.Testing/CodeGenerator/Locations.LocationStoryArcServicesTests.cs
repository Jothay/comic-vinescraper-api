// <auto-generated>
// <copyright file="Locations.ILocationStoryArcServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the LocationStoryArcs ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class LocationStoryArcsMockingSetup
    {
        public static Mock<ILocationStoryArcsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockLocationStoryArcsBusinessWorkflow = new Mock<ILocationStoryArcsBusinessWorkflow>();
            // Mock Functions
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ILocationStoryArcSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ILocationStoryArcModel>());
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ILocationStoryArcModel>().Object);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ILocationStoryArcModel>().Object);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ILocationStoryArcModel>())).Returns(() => new Mock<ILocationStoryArcModel>().Object);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ILocationStoryArcModel>())).Returns(() => new Mock<ILocationStoryArcModel>().Object);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockLocationStoryArcsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockLocationStoryArcsBusinessWorkflow;
        }
    }

    //public class LocationStoryArcsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_GetLocationStoryArcs_Should_ReturnAListOfLocationStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new GetLocationStoryArcs { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_GetLocationStoryArcsAsListing_Should_ReturnAListOfLocationStoryArcModels()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new GetLocationStoryArcsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationStoryArcModel>>(response);
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_GetLocationStoryArc_Should_ReturnAnLocationStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new GetLocationStoryArc { ID = 1 });
            Assert.Equal(nameof(ILocationStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_GetLocationStoryArcByKey_Should_ReturnAnLocationStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new GetLocationStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ILocationStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_CreateLocationStoryArc_Should_ReturnAnLocationStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new CreateLocationStoryArc { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ILocationStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_UpdateLocationStoryArc_Should_ReturnAnLocationStoryArcModel()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new UpdateLocationStoryArc { Id = 1 });
            Assert.Equal(nameof(ILocationStoryArcModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_DeactivateLocationStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new DeactivateLocationStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_DeactivateLocationStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new DeactivateLocationStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_RemoveLocationStoryArc_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new RemoveLocationStoryArc { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationStoryArcs")]
        public void Verify_RemoveLocationStoryArcByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationStoryArcsServices>();
            var response = service.Any(new RemoveLocationStoryArcByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
