// <auto-generated>
// <copyright file="Episodes.IEpisodeServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Episodes ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodesMockingSetup
    {
        public static Mock<IEpisodesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodesBusinessWorkflow = new Mock<IEpisodesBusinessWorkflow>();
            // Mock Functions
            mockEpisodesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeModel>());
            mockEpisodesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeModel>().Object);
            mockEpisodesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeModel>().Object);
            mockEpisodesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeModel>())).Returns(() => new Mock<IEpisodeModel>().Object);
            mockEpisodesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeModel>())).Returns(() => new Mock<IEpisodeModel>().Object);
            mockEpisodesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodesBusinessWorkflow;
        }
    }

    //public class EpisodesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Episodes")]
        public void Verify_GetEpisodes_Should_ReturnAListOfEpisodeModels()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new GetEpisodes { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeModel>>(response);
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_GetEpisodesAsListing_Should_ReturnAListOfEpisodeModels()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new GetEpisodesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeModel>>(response);
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_GetEpisode_Should_ReturnAnEpisodeModel()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new GetEpisode { ID = 1 });
            Assert.Equal(nameof(IEpisodeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_GetEpisodeByKey_Should_ReturnAnEpisodeModel()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new GetEpisodeByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_CreateEpisode_Should_ReturnAnEpisodeModel()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new CreateEpisode { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_UpdateEpisode_Should_ReturnAnEpisodeModel()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new UpdateEpisode { Id = 1 });
            Assert.Equal(nameof(IEpisodeModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_DeactivateEpisode_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new DeactivateEpisode { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_DeactivateEpisodeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new DeactivateEpisodeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_RemoveEpisode_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new RemoveEpisode { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Episodes")]
        public void Verify_RemoveEpisodeByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodesServices>();
            var response = service.Any(new RemoveEpisodeByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
