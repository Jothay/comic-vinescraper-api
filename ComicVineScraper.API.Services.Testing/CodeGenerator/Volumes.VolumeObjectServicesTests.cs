// <auto-generated>
// <copyright file="Volumes.IVolumeObjectServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the VolumeObjects ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VolumeObjectsMockingSetup
    {
        public static Mock<IVolumeObjectsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVolumeObjectsBusinessWorkflow = new Mock<IVolumeObjectsBusinessWorkflow>();
            // Mock Functions
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVolumeObjectSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVolumeObjectModel>());
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVolumeObjectModel>().Object);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVolumeObjectModel>().Object);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVolumeObjectModel>())).Returns(() => new Mock<IVolumeObjectModel>().Object);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVolumeObjectModel>())).Returns(() => new Mock<IVolumeObjectModel>().Object);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVolumeObjectsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVolumeObjectsBusinessWorkflow;
        }
    }

    //public class VolumeObjectsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_GetVolumeObjects_Should_ReturnAListOfVolumeObjectModels()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new GetVolumeObjects { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeObjectModel>>(response);
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_GetVolumeObjectsAsListing_Should_ReturnAListOfVolumeObjectModels()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new GetVolumeObjectsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeObjectModel>>(response);
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_GetVolumeObject_Should_ReturnAnVolumeObjectModel()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new GetVolumeObject { ID = 1 });
            Assert.Equal(nameof(IVolumeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_GetVolumeObjectByKey_Should_ReturnAnVolumeObjectModel()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new GetVolumeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVolumeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_CreateVolumeObject_Should_ReturnAnVolumeObjectModel()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new CreateVolumeObject { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVolumeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_UpdateVolumeObject_Should_ReturnAnVolumeObjectModel()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new UpdateVolumeObject { Id = 1 });
            Assert.Equal(nameof(IVolumeObjectModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_DeactivateVolumeObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new DeactivateVolumeObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_DeactivateVolumeObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new DeactivateVolumeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_RemoveVolumeObject_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new RemoveVolumeObject { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeObjects")]
        public void Verify_RemoveVolumeObjectByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeObjectsServices>();
            var response = service.Any(new RemoveVolumeObjectByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
