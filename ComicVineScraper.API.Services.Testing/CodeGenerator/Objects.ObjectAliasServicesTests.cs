// <auto-generated>
// <copyright file="Objects.IObjectAliasServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ObjectAliases ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class ObjectAliasesMockingSetup
    {
        public static Mock<IObjectAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockObjectAliasesBusinessWorkflow = new Mock<IObjectAliasesBusinessWorkflow>();
            // Mock Functions
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IObjectAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IObjectAliasModel>());
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IObjectAliasModel>().Object);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IObjectAliasModel>().Object);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IObjectAliasModel>())).Returns(() => new Mock<IObjectAliasModel>().Object);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IObjectAliasModel>())).Returns(() => new Mock<IObjectAliasModel>().Object);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockObjectAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockObjectAliasesBusinessWorkflow;
        }
    }

    //public class ObjectAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_GetObjectAliases_Should_ReturnAListOfObjectAliasModels()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new GetObjectAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectAliasModel>>(response);
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_GetObjectAliasesAsListing_Should_ReturnAListOfObjectAliasModels()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new GetObjectAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IObjectAliasModel>>(response);
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_GetObjectAlias_Should_ReturnAnObjectAliasModel()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new GetObjectAlias { ID = 1 });
            Assert.Equal(nameof(IObjectAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_GetObjectAliasByKey_Should_ReturnAnObjectAliasModel()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new GetObjectAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IObjectAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_CreateObjectAlias_Should_ReturnAnObjectAliasModel()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new CreateObjectAlias { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IObjectAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_UpdateObjectAlias_Should_ReturnAnObjectAliasModel()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new UpdateObjectAlias { Id = 1 });
            Assert.Equal(nameof(IObjectAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_DeactivateObjectAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new DeactivateObjectAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_DeactivateObjectAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new DeactivateObjectAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_RemoveObjectAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new RemoveObjectAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "ObjectAliases")]
        public void Verify_RemoveObjectAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IObjectAliasesServices>();
            var response = service.Any(new RemoveObjectAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
