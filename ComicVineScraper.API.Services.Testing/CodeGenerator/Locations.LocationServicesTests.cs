// <auto-generated>
// <copyright file="Locations.ILocationServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Locations ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class LocationsMockingSetup
    {
        public static Mock<ILocationsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockLocationsBusinessWorkflow = new Mock<ILocationsBusinessWorkflow>();
            // Mock Functions
            mockLocationsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ILocationSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ILocationModel>());
            mockLocationsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ILocationModel>().Object);
            mockLocationsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ILocationModel>().Object);
            mockLocationsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ILocationModel>())).Returns(() => new Mock<ILocationModel>().Object);
            mockLocationsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ILocationModel>())).Returns(() => new Mock<ILocationModel>().Object);
            mockLocationsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockLocationsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockLocationsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockLocationsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockLocationsBusinessWorkflow;
        }
    }

    //public class LocationsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Locations")]
        public void Verify_GetLocations_Should_ReturnAListOfLocationModels()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new GetLocations { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationModel>>(response);
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_GetLocationsAsListing_Should_ReturnAListOfLocationModels()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new GetLocationsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationModel>>(response);
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_GetLocation_Should_ReturnAnLocationModel()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new GetLocation { ID = 1 });
            Assert.Equal(nameof(ILocationModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_GetLocationByKey_Should_ReturnAnLocationModel()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new GetLocationByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ILocationModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_CreateLocation_Should_ReturnAnLocationModel()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new CreateLocation { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ILocationModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_UpdateLocation_Should_ReturnAnLocationModel()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new UpdateLocation { Id = 1 });
            Assert.Equal(nameof(ILocationModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_DeactivateLocation_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new DeactivateLocation { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_DeactivateLocationByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new DeactivateLocationByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_RemoveLocation_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new RemoveLocation { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Locations")]
        public void Verify_RemoveLocationByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationsServices>();
            var response = service.Any(new RemoveLocationByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
