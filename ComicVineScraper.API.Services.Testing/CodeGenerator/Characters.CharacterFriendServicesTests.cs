// <auto-generated>
// <copyright file="Characters.ICharacterFriendServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the CharacterFriends ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharacterFriendsMockingSetup
    {
        public static Mock<ICharacterFriendsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharacterFriendsBusinessWorkflow = new Mock<ICharacterFriendsBusinessWorkflow>();
            // Mock Functions
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterFriendSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterFriendModel>());
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterFriendModel>().Object);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterFriendModel>().Object);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterFriendModel>())).Returns(() => new Mock<ICharacterFriendModel>().Object);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterFriendModel>())).Returns(() => new Mock<ICharacterFriendModel>().Object);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharacterFriendsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharacterFriendsBusinessWorkflow;
        }
    }

    //public class CharacterFriendsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_GetCharacterFriends_Should_ReturnAListOfCharacterFriendModels()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new GetCharacterFriends { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterFriendModel>>(response);
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_GetCharacterFriendsAsListing_Should_ReturnAListOfCharacterFriendModels()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new GetCharacterFriendsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterFriendModel>>(response);
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_GetCharacterFriend_Should_ReturnAnCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new GetCharacterFriend { ID = 1 });
            Assert.Equal(nameof(ICharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_GetCharacterFriendByKey_Should_ReturnAnCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new GetCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_CreateCharacterFriend_Should_ReturnAnCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new CreateCharacterFriend { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_UpdateCharacterFriend_Should_ReturnAnCharacterFriendModel()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new UpdateCharacterFriend { Id = 1 });
            Assert.Equal(nameof(ICharacterFriendModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_DeactivateCharacterFriend_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new DeactivateCharacterFriend { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_DeactivateCharacterFriendByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new DeactivateCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_RemoveCharacterFriend_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new RemoveCharacterFriend { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "CharacterFriends")]
        public void Verify_RemoveCharacterFriendByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharacterFriendsServices>();
            var response = service.Any(new RemoveCharacterFriendByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
