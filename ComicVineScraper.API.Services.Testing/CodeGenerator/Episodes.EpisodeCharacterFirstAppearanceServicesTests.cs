// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterFirstAppearanceServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeCharacterFirstAppearances ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeCharacterFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeCharacterFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeCharacterFirstAppearancesBusinessWorkflow = new Mock<IEpisodeCharacterFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeCharacterFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeCharacterFirstAppearanceModel>());
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeCharacterFirstAppearanceModel>().Object);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeCharacterFirstAppearanceModel>().Object);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeCharacterFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeCharacterFirstAppearanceModel>().Object);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeCharacterFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeCharacterFirstAppearanceModel>().Object);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeCharacterFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeCharacterFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeCharacterFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_GetEpisodeCharacterFirstAppearances_Should_ReturnAListOfEpisodeCharacterFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeCharacterFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeCharacterFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_GetEpisodeCharacterFirstAppearancesAsListing_Should_ReturnAListOfEpisodeCharacterFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeCharacterFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeCharacterFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_GetEpisodeCharacterFirstAppearance_Should_ReturnAnEpisodeCharacterFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeCharacterFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeCharacterFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_GetEpisodeCharacterFirstAppearanceByKey_Should_ReturnAnEpisodeCharacterFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeCharacterFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeCharacterFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_CreateEpisodeCharacterFirstAppearance_Should_ReturnAnEpisodeCharacterFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeCharacterFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeCharacterFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_UpdateEpisodeCharacterFirstAppearance_Should_ReturnAnEpisodeCharacterFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeCharacterFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeCharacterFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_DeactivateEpisodeCharacterFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeCharacterFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_DeactivateEpisodeCharacterFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeCharacterFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_RemoveEpisodeCharacterFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeCharacterFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeCharacterFirstAppearances")]
        public void Verify_RemoveEpisodeCharacterFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeCharacterFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeCharacterFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
