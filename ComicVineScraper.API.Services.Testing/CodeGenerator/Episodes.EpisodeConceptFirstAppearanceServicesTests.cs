// <auto-generated>
// <copyright file="Episodes.IEpisodeConceptFirstAppearanceServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeConceptFirstAppearances ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class EpisodeConceptFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeConceptFirstAppearancesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockEpisodeConceptFirstAppearancesBusinessWorkflow = new Mock<IEpisodeConceptFirstAppearancesBusinessWorkflow>();
            // Mock Functions
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IEpisodeConceptFirstAppearanceSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IEpisodeConceptFirstAppearanceModel>());
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisodeConceptFirstAppearanceModel>().Object);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisodeConceptFirstAppearanceModel>().Object);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IEpisodeConceptFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeConceptFirstAppearanceModel>().Object);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IEpisodeConceptFirstAppearanceModel>())).Returns(() => new Mock<IEpisodeConceptFirstAppearanceModel>().Object);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockEpisodeConceptFirstAppearancesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockEpisodeConceptFirstAppearancesBusinessWorkflow;
        }
    }

    //public class EpisodeConceptFirstAppearancesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_GetEpisodeConceptFirstAppearances_Should_ReturnAListOfEpisodeConceptFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeConceptFirstAppearances { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeConceptFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_GetEpisodeConceptFirstAppearancesAsListing_Should_ReturnAListOfEpisodeConceptFirstAppearanceModels()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeConceptFirstAppearancesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IEpisodeConceptFirstAppearanceModel>>(response);
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_GetEpisodeConceptFirstAppearance_Should_ReturnAnEpisodeConceptFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeConceptFirstAppearance { ID = 1 });
            Assert.Equal(nameof(IEpisodeConceptFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_GetEpisodeConceptFirstAppearanceByKey_Should_ReturnAnEpisodeConceptFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new GetEpisodeConceptFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IEpisodeConceptFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_CreateEpisodeConceptFirstAppearance_Should_ReturnAnEpisodeConceptFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new CreateEpisodeConceptFirstAppearance { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IEpisodeConceptFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_UpdateEpisodeConceptFirstAppearance_Should_ReturnAnEpisodeConceptFirstAppearanceModel()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new UpdateEpisodeConceptFirstAppearance { Id = 1 });
            Assert.Equal(nameof(IEpisodeConceptFirstAppearanceModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_DeactivateEpisodeConceptFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeConceptFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_DeactivateEpisodeConceptFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new DeactivateEpisodeConceptFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_RemoveEpisodeConceptFirstAppearance_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeConceptFirstAppearance { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "EpisodeConceptFirstAppearances")]
        public void Verify_RemoveEpisodeConceptFirstAppearanceByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IEpisodeConceptFirstAppearancesServices>();
            var response = service.Any(new RemoveEpisodeConceptFirstAppearanceByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
