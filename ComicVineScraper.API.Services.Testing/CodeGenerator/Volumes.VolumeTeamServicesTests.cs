// <auto-generated>
// <copyright file="Volumes.IVolumeTeamServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the VolumeTeams ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class VolumeTeamsMockingSetup
    {
        public static Mock<IVolumeTeamsBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockVolumeTeamsBusinessWorkflow = new Mock<IVolumeTeamsBusinessWorkflow>();
            // Mock Functions
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Search(It.IsAny<IVolumeTeamSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IVolumeTeamModel>());
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IVolumeTeamModel>().Object);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IVolumeTeamModel>().Object);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Create(It.IsAny<IVolumeTeamModel>())).Returns(() => new Mock<IVolumeTeamModel>().Object);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Update(It.IsAny<IVolumeTeamModel>())).Returns(() => new Mock<IVolumeTeamModel>().Object);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockVolumeTeamsBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockVolumeTeamsBusinessWorkflow;
        }
    }

    //public class VolumeTeamsServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_GetVolumeTeams_Should_ReturnAListOfVolumeTeamModels()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new GetVolumeTeams { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeTeamModel>>(response);
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_GetVolumeTeamsAsListing_Should_ReturnAListOfVolumeTeamModels()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new GetVolumeTeamsAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IVolumeTeamModel>>(response);
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_GetVolumeTeam_Should_ReturnAnVolumeTeamModel()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new GetVolumeTeam { ID = 1 });
            Assert.Equal(nameof(IVolumeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_GetVolumeTeamByKey_Should_ReturnAnVolumeTeamModel()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new GetVolumeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IVolumeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_CreateVolumeTeam_Should_ReturnAnVolumeTeamModel()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new CreateVolumeTeam { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IVolumeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_UpdateVolumeTeam_Should_ReturnAnVolumeTeamModel()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new UpdateVolumeTeam { Id = 1 });
            Assert.Equal(nameof(IVolumeTeamModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_DeactivateVolumeTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new DeactivateVolumeTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_DeactivateVolumeTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new DeactivateVolumeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_RemoveVolumeTeam_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new RemoveVolumeTeam { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "VolumeTeams")]
        public void Verify_RemoveVolumeTeamByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IVolumeTeamsServices>();
            var response = service.Any(new RemoveVolumeTeamByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
