// <auto-generated>
// <copyright file="Teams.ITeamCharacterEnemyServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the TeamCharacterEnemies ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class TeamCharacterEnemiesMockingSetup
    {
        public static Mock<ITeamCharacterEnemiesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockTeamCharacterEnemiesBusinessWorkflow = new Mock<ITeamCharacterEnemiesBusinessWorkflow>();
            // Mock Functions
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ITeamCharacterEnemySearchModel>(), It.IsAny<bool>())).Returns(() => new List<ITeamCharacterEnemyModel>());
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamCharacterEnemyModel>().Object);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamCharacterEnemyModel>().Object);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ITeamCharacterEnemyModel>())).Returns(() => new Mock<ITeamCharacterEnemyModel>().Object);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ITeamCharacterEnemyModel>())).Returns(() => new Mock<ITeamCharacterEnemyModel>().Object);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockTeamCharacterEnemiesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockTeamCharacterEnemiesBusinessWorkflow;
        }
    }

    //public class TeamCharacterEnemiesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_GetTeamCharacterEnemies_Should_ReturnAListOfTeamCharacterEnemyModels()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new GetTeamCharacterEnemies { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamCharacterEnemyModel>>(response);
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_GetTeamCharacterEnemiesAsListing_Should_ReturnAListOfTeamCharacterEnemyModels()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new GetTeamCharacterEnemiesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ITeamCharacterEnemyModel>>(response);
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_GetTeamCharacterEnemy_Should_ReturnAnTeamCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new GetTeamCharacterEnemy { ID = 1 });
            Assert.Equal(nameof(ITeamCharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_GetTeamCharacterEnemyByKey_Should_ReturnAnTeamCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new GetTeamCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ITeamCharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_CreateTeamCharacterEnemy_Should_ReturnAnTeamCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new CreateTeamCharacterEnemy { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ITeamCharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_UpdateTeamCharacterEnemy_Should_ReturnAnTeamCharacterEnemyModel()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new UpdateTeamCharacterEnemy { Id = 1 });
            Assert.Equal(nameof(ITeamCharacterEnemyModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_DeactivateTeamCharacterEnemy_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new DeactivateTeamCharacterEnemy { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_DeactivateTeamCharacterEnemyByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new DeactivateTeamCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_RemoveTeamCharacterEnemy_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new RemoveTeamCharacterEnemy { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "TeamCharacterEnemies")]
        public void Verify_RemoveTeamCharacterEnemyByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ITeamCharacterEnemiesServices>();
            var response = service.Any(new RemoveTeamCharacterEnemyByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
