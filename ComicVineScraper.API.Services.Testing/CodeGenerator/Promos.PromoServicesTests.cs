// <auto-generated>
// <copyright file="Promos.IPromoServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Promos ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Promos
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class PromosMockingSetup
    {
        public static Mock<IPromosBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockPromosBusinessWorkflow = new Mock<IPromosBusinessWorkflow>();
            // Mock Functions
            mockPromosBusinessWorkflow.Setup(m => m.Search(It.IsAny<IPromoSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IPromoModel>());
            mockPromosBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPromoModel>().Object);
            mockPromosBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPromoModel>().Object);
            mockPromosBusinessWorkflow.Setup(m => m.Create(It.IsAny<IPromoModel>())).Returns(() => new Mock<IPromoModel>().Object);
            mockPromosBusinessWorkflow.Setup(m => m.Update(It.IsAny<IPromoModel>())).Returns(() => new Mock<IPromoModel>().Object);
            mockPromosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockPromosBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockPromosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockPromosBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockPromosBusinessWorkflow;
        }
    }

    //public class PromosServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Promos")]
        public void Verify_GetPromos_Should_ReturnAListOfPromoModels()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new GetPromos { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPromoModel>>(response);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_GetPromosAsListing_Should_ReturnAListOfPromoModels()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new GetPromosAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPromoModel>>(response);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_GetPromo_Should_ReturnAnPromoModel()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new GetPromo { ID = 1 });
            Assert.Equal(nameof(IPromoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_GetPromoByKey_Should_ReturnAnPromoModel()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new GetPromoByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IPromoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_CreatePromo_Should_ReturnAnPromoModel()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new CreatePromo { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IPromoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_UpdatePromo_Should_ReturnAnPromoModel()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new UpdatePromo { Id = 1 });
            Assert.Equal(nameof(IPromoModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_DeactivatePromo_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new DeactivatePromo { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_DeactivatePromoByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new DeactivatePromoByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_RemovePromo_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new RemovePromo { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Promos")]
        public void Verify_RemovePromoByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPromosServices>();
            var response = service.Any(new RemovePromoByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
