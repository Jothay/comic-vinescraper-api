// <auto-generated>
// <copyright file="Powers.IPowerAliasServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the PowerAliases ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Powers
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class PowerAliasesMockingSetup
    {
        public static Mock<IPowerAliasesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockPowerAliasesBusinessWorkflow = new Mock<IPowerAliasesBusinessWorkflow>();
            // Mock Functions
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Search(It.IsAny<IPowerAliasSearchModel>(), It.IsAny<bool>())).Returns(() => new List<IPowerAliasModel>());
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IPowerAliasModel>().Object);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IPowerAliasModel>().Object);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Create(It.IsAny<IPowerAliasModel>())).Returns(() => new Mock<IPowerAliasModel>().Object);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Update(It.IsAny<IPowerAliasModel>())).Returns(() => new Mock<IPowerAliasModel>().Object);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockPowerAliasesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockPowerAliasesBusinessWorkflow;
        }
    }

    //public class PowerAliasesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_GetPowerAliases_Should_ReturnAListOfPowerAliasModels()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new GetPowerAliases { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPowerAliasModel>>(response);
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_GetPowerAliasesAsListing_Should_ReturnAListOfPowerAliasModels()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new GetPowerAliasesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<IPowerAliasModel>>(response);
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_GetPowerAlias_Should_ReturnAnPowerAliasModel()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new GetPowerAlias { ID = 1 });
            Assert.Equal(nameof(IPowerAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_GetPowerAliasByKey_Should_ReturnAnPowerAliasModel()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new GetPowerAliasByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(IPowerAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_CreatePowerAlias_Should_ReturnAnPowerAliasModel()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new CreatePowerAlias { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(IPowerAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_UpdatePowerAlias_Should_ReturnAnPowerAliasModel()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new UpdatePowerAlias { Id = 1 });
            Assert.Equal(nameof(IPowerAliasModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_DeactivatePowerAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new DeactivatePowerAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_DeactivatePowerAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new DeactivatePowerAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_RemovePowerAlias_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new RemovePowerAlias { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "PowerAliases")]
        public void Verify_RemovePowerAliasByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<IPowerAliasesServices>();
            var response = service.Any(new RemovePowerAliasByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
