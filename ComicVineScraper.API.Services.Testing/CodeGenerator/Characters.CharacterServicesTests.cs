// <auto-generated>
// <copyright file="Characters.ICharacterServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Characters ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class CharactersMockingSetup
    {
        public static Mock<ICharactersBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockCharactersBusinessWorkflow = new Mock<ICharactersBusinessWorkflow>();
            // Mock Functions
            mockCharactersBusinessWorkflow.Setup(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ICharacterModel>());
            mockCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacterModel>().Object);
            mockCharactersBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacterModel>().Object);
            mockCharactersBusinessWorkflow.Setup(m => m.Create(It.IsAny<ICharacterModel>())).Returns(() => new Mock<ICharacterModel>().Object);
            mockCharactersBusinessWorkflow.Setup(m => m.Update(It.IsAny<ICharacterModel>())).Returns(() => new Mock<ICharacterModel>().Object);
            mockCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockCharactersBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockCharactersBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockCharactersBusinessWorkflow;
        }
    }

    //public class CharactersServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "Characters")]
        public void Verify_GetCharacters_Should_ReturnAListOfCharacterModels()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new GetCharacters { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterModel>>(response);
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_GetCharactersAsListing_Should_ReturnAListOfCharacterModels()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new GetCharactersAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ICharacterModel>>(response);
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_GetCharacter_Should_ReturnAnCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new GetCharacter { ID = 1 });
            Assert.Equal(nameof(ICharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_GetCharacterByKey_Should_ReturnAnCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new GetCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ICharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_CreateCharacter_Should_ReturnAnCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new CreateCharacter { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ICharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_UpdateCharacter_Should_ReturnAnCharacterModel()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new UpdateCharacter { Id = 1 });
            Assert.Equal(nameof(ICharacterModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_DeactivateCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new DeactivateCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_DeactivateCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new DeactivateCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_RemoveCharacter_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new RemoveCharacter { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "Characters")]
        public void Verify_RemoveCharacterByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ICharactersServices>();
            var response = service.Any(new RemoveCharacterByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
