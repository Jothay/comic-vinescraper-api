// <auto-generated>
// <copyright file="Locations.ILocationAppearedInIssueServicesTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the LocationAppearedInIssues ServiceStack Services Tests.</summary>
// <remarks>This file was autogenerated using ServicesTestingFileMaster.tt in
// ComicVineScraper.API.Services.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using API.Services;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Moq;
    using Xunit;

    public static class LocationAppearedInIssuesMockingSetup
    {
        public static Mock<ILocationAppearedInIssuesBusinessWorkflow> DoMockingSetupForBusinessWorkflow()
        {
            var mockLocationAppearedInIssuesBusinessWorkflow = new Mock<ILocationAppearedInIssuesBusinessWorkflow>();
            // Mock Functions
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Search(It.IsAny<ILocationAppearedInIssueSearchModel>(), It.IsAny<bool>())).Returns(() => new List<ILocationAppearedInIssueModel>());
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ILocationAppearedInIssueModel>().Object);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ILocationAppearedInIssueModel>().Object);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Create(It.IsAny<ILocationAppearedInIssueModel>())).Returns(() => new Mock<ILocationAppearedInIssueModel>().Object);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Update(It.IsAny<ILocationAppearedInIssueModel>())).Returns(() => new Mock<ILocationAppearedInIssueModel>().Object);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<int>())).Returns(() => true);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Deactivate(It.IsAny<string>())).Returns(() => true);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<int>())).Returns(() => true);
            mockLocationAppearedInIssuesBusinessWorkflow.Setup(m => m.Remove(It.IsAny<string>())).Returns(() => true);
            // Return
            return mockLocationAppearedInIssuesBusinessWorkflow;
        }
    }

    //public class LocationAppearedInIssuesServicesTests : ServicesTestsWithTearDown
    public partial class AllServicesTests
    {
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_GetLocationAppearedInIssues_Should_ReturnAListOfLocationAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new GetLocationAppearedInIssues { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_GetLocationAppearedInIssuesAsListing_Should_ReturnAListOfLocationAppearedInIssueModels()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new GetLocationAppearedInIssuesAsListing { Id = 1, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN",  ModifiedSince = DateTime.Now, Paging = null });
            Assert.IsType<List<ILocationAppearedInIssueModel>>(response);
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_GetLocationAppearedInIssue_Should_ReturnAnLocationAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new GetLocationAppearedInIssue { ID = 1 });
            Assert.Equal(nameof(ILocationAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_GetLocationAppearedInIssueByKey_Should_ReturnAnLocationAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new GetLocationAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(nameof(ILocationAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_CreateLocationAppearedInIssue_Should_ReturnAnLocationAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new CreateLocationAppearedInIssue { CustomKey = "KING-STEPHEN", Active = true, CreatedDate = DateTime.Now, UpdatedDate = DateTime.Now });
            Assert.Equal(nameof(ILocationAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_UpdateLocationAppearedInIssue_Should_ReturnAnLocationAppearedInIssueModel()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new UpdateLocationAppearedInIssue { Id = 1 });
            Assert.Equal(nameof(ILocationAppearedInIssueModel), response.GetType().Name.Replace("Proxy", ""));
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_DeactivateLocationAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new DeactivateLocationAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_DeactivateLocationAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new DeactivateLocationAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_RemoveLocationAppearedInIssue_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new RemoveLocationAppearedInIssue { ID = 1 });
            Assert.Equal(true, response);
        }
        [Fact][Trait("Category", "LocationAppearedInIssues")]
        public void Verify_RemoveLocationAppearedInIssueByKey_Should_ReturnTrue()
        {
            var service = AppHost.Container.Resolve<ILocationAppearedInIssuesServices>();
            var response = service.Any(new RemoveLocationAppearedInIssueByKey { CustomKey = "TEST" });
            Assert.Equal(true, response);
        }
    }
}
