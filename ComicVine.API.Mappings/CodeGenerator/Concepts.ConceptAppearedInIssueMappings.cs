// <auto-generated>
// <copyright file="Concepts.IConceptAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptAppearedInIssueMapperExtensions
    {
        public static IConceptAppearedInIssueMapper Mapper = new ConceptAppearedInIssueMapper();

        public static void OverrideMapper(IConceptAppearedInIssueMapper mapper) { Mapper = mapper; }

        public static IConceptAppearedInIssue MapToEntity(this IConceptAppearedInIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IConceptAppearedInIssueModel model, ref IConceptAppearedInIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IConceptAppearedInIssueModel MapToModel(this IConceptAppearedInIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IConceptAppearedInIssueModel MapToModelLite(this IConceptAppearedInIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IConceptAppearedInIssueModel MapToModelListing(this IConceptAppearedInIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IConceptAppearedInIssueSearchModel MapToSearchModel(this IConceptAppearedInIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptAppearedInIssueModel model, IConceptAppearedInIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptAppearedInIssueMapper : IConceptAppearedInIssueMapper
    {
        public virtual IConceptAppearedInIssue MapToEntity(IConceptAppearedInIssueModel model)
        {
            var entity = EntityMapper.MapToEntity<ConceptAppearedInIssue, IConceptAppearedInIssueModel>(model);
            // ConceptAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IConceptAppearedInIssueModel model, ref IConceptAppearedInIssue entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ConceptAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IConceptAppearedInIssueModel MapToModel(IConceptAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModel<IConceptAppearedInIssue, ConceptAppearedInIssueModel>(entity);
            // ConceptAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            model.AppearedInIssueId = entity.AppearedInIssueId;
            model.AppearedInIssue = entity.AppearedInIssue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IConceptAppearedInIssueModel MapToModelLite(IConceptAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelLite<IConceptAppearedInIssue, ConceptAppearedInIssueModel>(entity);
            // ConceptAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual IConceptAppearedInIssueModel MapToModelListing(IConceptAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelListing<IConceptAppearedInIssue, ConceptAppearedInIssueModel>(entity);
            // ConceptAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual IConceptAppearedInIssueSearchModel MapToSearchModel(IConceptAppearedInIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IConceptAppearedInIssueModel, ConceptAppearedInIssueSearchModel>(model);
            // Search Properties
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptApiDetailUrl = model.Concept?.ApiDetailUrl;
            searchModel.ConceptSiteDetailUrl = model.Concept?.SiteDetailUrl;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptShortDescription = model.Concept?.ShortDescription;
            searchModel.ConceptDescription = model.Concept?.Description;
            searchModel.AppearedInIssueId = model.AppearedInIssueId;
            searchModel.AppearedInIssueCustomKey = model.AppearedInIssue?.CustomKey;
            searchModel.AppearedInIssueApiDetailUrl = model.AppearedInIssue?.ApiDetailUrl;
            searchModel.AppearedInIssueSiteDetailUrl = model.AppearedInIssue?.SiteDetailUrl;
            searchModel.AppearedInIssueName = model.AppearedInIssue?.Name;
            searchModel.AppearedInIssueShortDescription = model.AppearedInIssue?.ShortDescription;
            searchModel.AppearedInIssueDescription = model.AppearedInIssue?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IConceptAppearedInIssueModel model, IConceptAppearedInIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ConceptAppearedInIssue Properties
                // <None>
                // Related Objects
                && model.ConceptId == entity.ConceptId
                && model.AppearedInIssueId == entity.AppearedInIssueId
                ;
        }
    }
}
