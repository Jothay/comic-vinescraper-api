// <auto-generated>
// <copyright file="Media.IImageFileModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ImageFile model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Media
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ImageFileMapperExtensions
    {
        public static IImageFileMapper Mapper = new ImageFileMapper();

        public static void OverrideMapper(IImageFileMapper mapper) { Mapper = mapper; }

        public static IImageFile MapToEntity(this IImageFileModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IImageFileModel model, ref IImageFile entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IImageFileModel MapToModel(this IImageFile entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IImageFileModel MapToModelLite(this IImageFile entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IImageFileModel MapToModelListing(this IImageFile entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IImageFileSearchModel MapToSearchModel(this IImageFileModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IImageFileModel model, IImageFile entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ImageFileMapper : IImageFileMapper
    {
        public virtual IImageFile MapToEntity(IImageFileModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<ImageFile, IImageFileModel>(model);
            // ImageFile Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.Characters = model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.Chats = model.Chats?.Where(i => i.Active).Select(ChatMapperExtensions.MapToEntity).Cast<Chat>().ToList();
            entity.Concepts = model.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>().ToList();
            entity.Episodes = model.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToEntity).Cast<Episode>().ToList();
            entity.Issues = model.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.Locations = model.Locations?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>().ToList();
            entity.Movies = model.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToEntity).Cast<Movie>().ToList();
            entity.Objects = model.Objects?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>().ToList();
            entity.People = model.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>().ToList();
            entity.Promos = model.Promos?.Where(i => i.Active).Select(PromoMapperExtensions.MapToEntity).Cast<Promo>().ToList();
            entity.Publishers = model.Publishers?.Where(i => i.Active).Select(PublisherMapperExtensions.MapToEntity).Cast<Publisher>().ToList();
            entity.StoryArcs = model.StoryArcs?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.Teams = model.Teams?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            entity.Videos = model.Videos?.Where(i => i.Active).Select(VideoMapperExtensions.MapToEntity).Cast<Video>().ToList();
            entity.Volumes = model.Volumes?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IImageFileModel model, ref IImageFile entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // ImageFile Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.Characters = model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).ToList();
            entity.Chats = model.Chats?.Where(i => i.Active).Select(ChatMapperExtensions.MapToEntity).ToList();
            entity.Concepts = model.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).ToList();
            entity.Episodes = model.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToEntity).ToList();
            entity.Issues = model.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).ToList();
            entity.Locations = model.Locations?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).ToList();
            entity.Movies = model.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToEntity).ToList();
            entity.Objects = model.Objects?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).ToList();
            entity.People = model.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).ToList();
            entity.Promos = model.Promos?.Where(i => i.Active).Select(PromoMapperExtensions.MapToEntity).ToList();
            entity.Publishers = model.Publishers?.Where(i => i.Active).Select(PublisherMapperExtensions.MapToEntity).ToList();
            entity.StoryArcs = model.StoryArcs?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).ToList();
            entity.Teams = model.Teams?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).ToList();
            entity.Videos = model.Videos?.Where(i => i.Active).Select(VideoMapperExtensions.MapToEntity).ToList();
            entity.Volumes = model.Volumes?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).ToList();
        }

        public virtual IImageFileModel MapToModel(IImageFile entity)
        {
            var model = NameableEntityMapper.MapToModel<IImageFile, ImageFileModel>(entity);
            // ImageFile Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            model.Characters = entity.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModelLite).ToList();
            model.Chats = entity.Chats?.Where(i => i.Active).Select(ChatMapperExtensions.MapToModelLite).ToList();
            model.Concepts = entity.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToModelLite).ToList();
            model.Episodes = entity.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToModelLite).ToList();
            model.Issues = entity.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModelLite).ToList();
            model.Locations = entity.Locations?.Where(i => i.Active).Select(LocationMapperExtensions.MapToModelLite).ToList();
            model.Movies = entity.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToModelLite).ToList();
            model.Objects = entity.Objects?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToModelLite).ToList();
            model.People = entity.People?.Where(i => i.Active).Select(PersonMapperExtensions.MapToModelLite).ToList();
            model.Promos = entity.Promos?.Where(i => i.Active).Select(PromoMapperExtensions.MapToModelLite).ToList();
            model.Publishers = entity.Publishers?.Where(i => i.Active).Select(PublisherMapperExtensions.MapToModelLite).ToList();
            model.StoryArcs = entity.StoryArcs?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModelLite).ToList();
            model.Teams = entity.Teams?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModelLite).ToList();
            model.Videos = entity.Videos?.Where(i => i.Active).Select(VideoMapperExtensions.MapToModelLite).ToList();
            model.Volumes = entity.Volumes?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IImageFileModel MapToModelLite(IImageFile entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IImageFile, ImageFileModel>(entity);
            // ImageFile Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IImageFileModel MapToModelListing(IImageFile entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IImageFile, ImageFileModel>(entity);
            // ImageFile Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IImageFileSearchModel MapToSearchModel(IImageFileModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IImageFileModel, ImageFileSearchModel>(model);
            // Search Properties
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IImageFileModel model, IImageFile entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // ImageFile Properties
                // <None>
                // Related Objects
                // <None>
                ;
        }
    }
}
