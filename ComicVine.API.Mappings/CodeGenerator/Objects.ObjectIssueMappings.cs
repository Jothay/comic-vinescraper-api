// <auto-generated>
// <copyright file="Objects.IObjectIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ObjectIssueMapperExtensions
    {
        public static readonly ObjectIssueMapper Mapper = new ObjectIssueMapper();

        public static IObjectIssue MapToEntity(this IObjectIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IObjectIssueModel model, ref IObjectIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IObjectIssueModel MapToModel(this IObjectIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IObjectIssueModel MapToModelLite(this IObjectIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IObjectIssueModel MapToModelListing(this IObjectIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IObjectIssueSearchModel MapToSearchModel(this IObjectIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IObjectIssueModel model, IObjectIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ObjectIssueMapper : IObjectIssueMapper
    {
        public IObjectIssue MapToEntity(IObjectIssueModel model)
        {
            var entity = EntityMapper.MapToEntity<ObjectIssue, IObjectIssueModel>(model);
            // ObjectIssue Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IObjectIssueModel model, ref IObjectIssue entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ObjectIssue Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IObjectIssueModel MapToModel(IObjectIssue entity)
        {
            var model = EntityMapper.MapToModel<IObjectIssue, ObjectIssueModel>(entity);
            // ObjectIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.Object = entity.Object?.MapToModel();
            model.IssueId = entity.IssueId;
            model.Issue = entity.Issue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IObjectIssueModel MapToModelLite(IObjectIssue entity)
        {
            var model = EntityMapper.MapToModelLite<IObjectIssue, ObjectIssueModel>(entity);
            // ObjectIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public IObjectIssueModel MapToModelListing(IObjectIssue entity)
        {
            var model = EntityMapper.MapToModelListing<IObjectIssue, ObjectIssueModel>(entity);
            // ObjectIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public IObjectIssueSearchModel MapToSearchModel(IObjectIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IObjectIssueModel, ObjectIssueSearchModel>(model);
            // Search Properties
            searchModel.ObjectId = model.ObjectId;
            searchModel.ObjectCustomKey = model.Object?.CustomKey;
            searchModel.ObjectName = model.Object?.Name;
            searchModel.ObjectDescription = model.Object?.Description;
            searchModel.IssueId = model.IssueId;
            searchModel.IssueCustomKey = model.Issue?.CustomKey;
            searchModel.IssueName = model.Issue?.Name;
            searchModel.IssueDescription = model.Issue?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IObjectIssueModel model, IObjectIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ObjectIssue Properties
                // <None>
                // Related Objects
                && model.ObjectId == entity.ObjectId
                && model.IssueId == entity.IssueId
                ;
        }
    }
}
