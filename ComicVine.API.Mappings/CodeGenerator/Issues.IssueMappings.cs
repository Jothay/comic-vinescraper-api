// <auto-generated>
// <copyright file="Issues.IIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Issue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Issues
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class IssueMapperExtensions
    {
        public static IIssueMapper Mapper = new IssueMapper();

        public static void OverrideMapper(IIssueMapper mapper) { Mapper = mapper; }

        public static IIssue MapToEntity(this IIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IIssueModel model, ref IIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IIssueModel MapToModel(this IIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IIssueModel MapToModelLite(this IIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IIssueModel MapToModelListing(this IIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IIssueSearchModel MapToSearchModel(this IIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IIssueModel model, IIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class IssueMapper : IIssueMapper
    {
        public virtual IIssue MapToEntity(IIssueModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Issue, IIssueModel>(model);
            // Issue Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.CoverDate = model.CoverDate;
            entity.StoreDate = model.StoreDate;
            entity.IssueNumber = model.IssueNumber;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            entity.IssueAliases = model.IssueAliases?.Where(i => i.Active).Select(IssueAliasMapperExtensions.MapToEntity).Cast<IssueAlias>().ToList();
            entity.IssueStoryArcs = model.IssueStoryArcs?.Where(i => i.Active).Select(StoryArcIssueMapperExtensions.MapToEntity).Cast<StoryArcIssue>().ToList();
            entity.IssueWriters = model.IssueWriters?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToEntity).Cast<IssueWriter>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IIssueModel model, ref IIssue entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Issue Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.CoverDate = model.CoverDate;
            entity.StoreDate = model.StoreDate;
            entity.IssueNumber = model.IssueNumber;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            entity.IssueAliases = model.IssueAliases?.Where(i => i.Active).Select(IssueAliasMapperExtensions.MapToEntity).ToList();
            entity.IssueStoryArcs = model.IssueStoryArcs?.Where(i => i.Active).Select(StoryArcIssueMapperExtensions.MapToEntity).ToList();
            entity.IssueWriters = model.IssueWriters?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToEntity).ToList();
        }

        public virtual IIssueModel MapToModel(IIssue entity)
        {
            var model = NameableEntityMapper.MapToModel<IIssue, IssueModel>(entity);
            // Issue Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.CoverDate = entity.CoverDate;
            model.StoreDate = entity.StoreDate;
            model.IssueNumber = entity.IssueNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            // Associated Objects
            model.IssueAliases = entity.IssueAliases?.Where(i => i.Active).Select(IssueAliasMapperExtensions.MapToModelLite).ToList();
            model.IssueStoryArcs = entity.IssueStoryArcs?.Where(i => i.Active).Select(StoryArcIssueMapperExtensions.MapToModelLite).ToList();
            model.IssueWriters = entity.IssueWriters?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IIssueModel MapToModelLite(IIssue entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IIssue, IssueModel>(entity);
            // Issue Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.CoverDate = entity.CoverDate;
            model.StoreDate = entity.StoreDate;
            model.IssueNumber = entity.IssueNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual IIssueModel MapToModelListing(IIssue entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IIssue, IssueModel>(entity);
            // Issue Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.CoverDate = entity.CoverDate;
            model.StoreDate = entity.StoreDate;
            model.IssueNumber = entity.IssueNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual IIssueSearchModel MapToSearchModel(IIssueModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IIssueModel, IssueSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileApiDetailUrl = model.PrimaryImageFile?.ApiDetailUrl;
            searchModel.PrimaryImageFileSiteDetailUrl = model.PrimaryImageFile?.SiteDetailUrl;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileShortDescription = model.PrimaryImageFile?.ShortDescription;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeApiDetailUrl = model.Volume?.ApiDetailUrl;
            searchModel.VolumeSiteDetailUrl = model.Volume?.SiteDetailUrl;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeShortDescription = model.Volume?.ShortDescription;
            searchModel.VolumeDescription = model.Volume?.Description;
            searchModel.HasStaffReview = model.HasStaffReview;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IIssueModel model, IIssue entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Issue Properties
                && model.HasStaffReview == entity.HasStaffReview
                && model.CoverDate == entity.CoverDate
                && model.StoreDate == entity.StoreDate
                && model.IssueNumber == entity.IssueNumber
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.VolumeId == entity.VolumeId
                ;
        }
    }
}
