// <auto-generated>
// <copyright file="dbo.IMovieModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Movie model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class MovieMapperExtensions
    {
        public static readonly MovieMapper Mapper = new MovieMapper();

        public static IMovie MapToEntity(this IMovieModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IMovieModel model, ref IMovie entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IMovieModel MapToModel(this IMovie entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IMovieModel MapToModelLite(this IMovie entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IMovieModel MapToModelListing(this IMovie entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IMovieSearchModel MapToSearchModel(this IMovieModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IMovieModel model, IMovie entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class MovieMapper : IMovieMapper
    {
        public IMovie MapToEntity(IMovieModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Movie, IMovieModel>(model);
            // Movie Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.Distributor = model.Distributor;
            entity.BoxOfficeRevenue = model.BoxOfficeRevenue;
            entity.TotalRevenue = model.TotalRevenue;
            entity.Budget = model.Budget;
            entity.Rating = model.Rating;
            entity.ReleaseDate = model.ReleaseDate;
            entity.RunTime = model.RunTime;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            // Associated Objects
            entity.Characters = model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.Concepts = model.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>().ToList();
            entity.LocationCredits = model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>().ToList();
            entity.ObjectCredits = model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>().ToList();
            entity.ProducerCredits = model.ProducerCredits?.Where(i => i.Active).Select(ProducerMapperExtensions.MapToEntity).Cast<Producer>().ToList();
            entity.StudioCredits = model.StudioCredits?.Where(i => i.Active).Select(StudioMapperExtensions.MapToEntity).Cast<Studio>().ToList();
            entity.TeamCredits = model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            entity.WriterCredits = model.WriterCredits?.Where(i => i.Active).Select(WriterMapperExtensions.MapToEntity).Cast<Writer>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(IMovieModel model, ref IMovie entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Movie Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.Distributor = model.Distributor;
            entity.BoxOfficeRevenue = model.BoxOfficeRevenue;
            entity.TotalRevenue = model.TotalRevenue;
            entity.Budget = model.Budget;
            entity.Rating = model.Rating;
            entity.ReleaseDate = model.ReleaseDate;
            entity.RunTime = model.RunTime;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            // Associated Objects
            entity.Characters = (ICollection<ICharacter>)model.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.Concepts = (ICollection<IConcept>)model.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>();
            entity.LocationCredits = (ICollection<ILocation>)model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>();
            entity.ObjectCredits = (ICollection<IObject>)model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>();
            entity.ProducerCredits = (ICollection<IProducer>)model.ProducerCredits?.Where(i => i.Active).Select(ProducerMapperExtensions.MapToEntity).Cast<Producer>();
            entity.StudioCredits = (ICollection<IStudio>)model.StudioCredits?.Where(i => i.Active).Select(StudioMapperExtensions.MapToEntity).Cast<Studio>();
            entity.TeamCredits = (ICollection<ITeam>)model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>();
            entity.WriterCredits = (ICollection<IWriter>)model.WriterCredits?.Where(i => i.Active).Select(WriterMapperExtensions.MapToEntity).Cast<Writer>();
        }

        public IMovieModel MapToModel(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModel<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile.MapToModel();
            // Associated Objects
            model.Characters = entity.Characters?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.Concepts = entity.Concepts?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToModel).ToList();
            model.LocationCredits = entity.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToModel).ToList();
            model.ObjectCredits = entity.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToModel).ToList();
            model.ProducerCredits = entity.ProducerCredits?.Where(i => i.Active).Select(ProducerMapperExtensions.MapToModel).ToList();
            model.StudioCredits = entity.StudioCredits?.Where(i => i.Active).Select(StudioMapperExtensions.MapToModel).ToList();
            model.TeamCredits = entity.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModel).ToList();
            model.WriterCredits = entity.WriterCredits?.Where(i => i.Active).Select(WriterMapperExtensions.MapToModel).ToList();
            // Return Entity
            return model;
        }

        public IMovieModel MapToModelLite(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public IMovieModel MapToModelListing(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public IMovieSearchModel MapToSearchModel(IMovieModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IMovieModel, MovieSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile.Description;
            searchModel.HasStaffReview = model.HasStaffReview;
            searchModel.Distributor = model.Distributor;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IMovieModel model, IMovie entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Movie Properties
                && model.HasStaffReview == entity.HasStaffReview
                && model.Distributor == entity.Distributor
                && model.BoxOfficeRevenue == entity.BoxOfficeRevenue
                && model.TotalRevenue == entity.TotalRevenue
                && model.Budget == entity.Budget
                && model.Rating == entity.Rating
                && model.ReleaseDate == entity.ReleaseDate
                && model.RunTime == entity.RunTime
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                ;
        }
    }
}
