// <auto-generated>
// <copyright file="Teams.ITeamModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Team model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamMapperExtensions
    {
        public static readonly TeamMapper Mapper = new TeamMapper();

        public static ITeam MapToEntity(this ITeamModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamModel model, ref ITeam entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamModel MapToModel(this ITeam entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamModel MapToModelLite(this ITeam entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamModel MapToModelListing(this ITeam entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamSearchModel MapToSearchModel(this ITeamModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamModel model, ITeam entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamMapper : ITeamMapper
    {
        public ITeam MapToEntity(ITeamModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Team, ITeamModel>(model);
            // Team Properties
            // <None>
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            // Associated Objects
            entity.TeamAliases = model.TeamAliases?.Where(i => i.Active).Select(TeamAliasMapperExtensions.MapToEntity).Cast<TeamAlias>().ToList();
            entity.TeamCharacterEnemies = model.TeamCharacterEnemies?.Where(i => i.Active).Select(TeamCharacterEnemyMapperExtensions.MapToEntity).Cast<TeamCharacterEnemy>().ToList();
            entity.TeamCharacterFriends = model.TeamCharacterFriends?.Where(i => i.Active).Select(TeamCharacterFriendMapperExtensions.MapToEntity).Cast<TeamCharacterFriend>().ToList();
            entity.TeamIssuesAppearedIn = model.TeamIssuesAppearedIn?.Where(i => i.Active).Select(TeamAppearedInIssueMapperExtensions.MapToEntity).Cast<TeamAppearedInIssue>().ToList();
            entity.TeamIssuesDisbandedIn = model.TeamIssuesDisbandedIn?.Where(i => i.Active).Select(TeamDisbandedInIssueMapperExtensions.MapToEntity).Cast<TeamDisbandedInIssue>().ToList();
            entity.TeamIssues = model.TeamIssues?.Where(i => i.Active).Select(TeamIssueMapperExtensions.MapToEntity).Cast<TeamIssue>().ToList();
            entity.TeamMembers = model.TeamMembers?.Where(i => i.Active).Select(TeamMemberMapperExtensions.MapToEntity).Cast<TeamMember>().ToList();
            entity.TeamMovies = model.TeamMovies?.Where(i => i.Active).Select(TeamMovieMapperExtensions.MapToEntity).Cast<TeamMovie>().ToList();
            entity.TeamStoryArcs = model.TeamStoryArcs?.Where(i => i.Active).Select(TeamStoryArcMapperExtensions.MapToEntity).Cast<TeamStoryArc>().ToList();
            entity.TeamVolumes = model.TeamVolumes?.Where(i => i.Active).Select(TeamVolumeMapperExtensions.MapToEntity).Cast<TeamVolume>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(ITeamModel model, ref ITeam entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Team Properties
            // <None>
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            // Associated Objects
            entity.TeamAliases = (ICollection<ITeamAlias>)model.TeamAliases?.Where(i => i.Active).Select(TeamAliasMapperExtensions.MapToEntity).Cast<TeamAlias>();
            entity.TeamCharacterEnemies = (ICollection<ITeamCharacterEnemy>)model.TeamCharacterEnemies?.Where(i => i.Active).Select(TeamCharacterEnemyMapperExtensions.MapToEntity).Cast<TeamCharacterEnemy>();
            entity.TeamCharacterFriends = (ICollection<ITeamCharacterFriend>)model.TeamCharacterFriends?.Where(i => i.Active).Select(TeamCharacterFriendMapperExtensions.MapToEntity).Cast<TeamCharacterFriend>();
            entity.TeamIssuesAppearedIn = (ICollection<ITeamAppearedInIssue>)model.TeamIssuesAppearedIn?.Where(i => i.Active).Select(TeamAppearedInIssueMapperExtensions.MapToEntity).Cast<TeamAppearedInIssue>();
            entity.TeamIssuesDisbandedIn = (ICollection<ITeamDisbandedInIssue>)model.TeamIssuesDisbandedIn?.Where(i => i.Active).Select(TeamDisbandedInIssueMapperExtensions.MapToEntity).Cast<TeamDisbandedInIssue>();
            entity.TeamIssues = (ICollection<ITeamIssue>)model.TeamIssues?.Where(i => i.Active).Select(TeamIssueMapperExtensions.MapToEntity).Cast<TeamIssue>();
            entity.TeamMembers = (ICollection<ITeamMember>)model.TeamMembers?.Where(i => i.Active).Select(TeamMemberMapperExtensions.MapToEntity).Cast<TeamMember>();
            entity.TeamMovies = (ICollection<ITeamMovie>)model.TeamMovies?.Where(i => i.Active).Select(TeamMovieMapperExtensions.MapToEntity).Cast<TeamMovie>();
            entity.TeamStoryArcs = (ICollection<ITeamStoryArc>)model.TeamStoryArcs?.Where(i => i.Active).Select(TeamStoryArcMapperExtensions.MapToEntity).Cast<TeamStoryArc>();
            entity.TeamVolumes = (ICollection<ITeamVolume>)model.TeamVolumes?.Where(i => i.Active).Select(TeamVolumeMapperExtensions.MapToEntity).Cast<TeamVolume>();
        }

        public ITeamModel MapToModel(ITeam entity)
        {
            var model = NameableEntityMapper.MapToModel<ITeam, TeamModel>(entity);
            // Team Properties
            // <None>
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.FirstIssueAppearance = entity.FirstIssueAppearance?.MapToModel();
            model.PublisherId = entity.PublisherId;
            model.Publisher = entity.Publisher?.MapToModel();
            // Associated Objects
            model.TeamAliases = entity.TeamAliases?.Where(i => i.Active).Select(TeamAliasMapperExtensions.MapToModelLite).ToList();
            model.TeamCharacterEnemies = entity.TeamCharacterEnemies?.Where(i => i.Active).Select(TeamCharacterEnemyMapperExtensions.MapToModelLite).ToList();
            model.TeamCharacterFriends = entity.TeamCharacterFriends?.Where(i => i.Active).Select(TeamCharacterFriendMapperExtensions.MapToModelLite).ToList();
            model.TeamIssuesAppearedIn = entity.TeamIssuesAppearedIn?.Where(i => i.Active).Select(TeamAppearedInIssueMapperExtensions.MapToModelLite).ToList();
            model.TeamIssuesDisbandedIn = entity.TeamIssuesDisbandedIn?.Where(i => i.Active).Select(TeamDisbandedInIssueMapperExtensions.MapToModelLite).ToList();
            model.TeamIssues = entity.TeamIssues?.Where(i => i.Active).Select(TeamIssueMapperExtensions.MapToModelLite).ToList();
            model.TeamMembers = entity.TeamMembers?.Where(i => i.Active).Select(TeamMemberMapperExtensions.MapToModelLite).ToList();
            model.TeamMovies = entity.TeamMovies?.Where(i => i.Active).Select(TeamMovieMapperExtensions.MapToModelLite).ToList();
            model.TeamStoryArcs = entity.TeamStoryArcs?.Where(i => i.Active).Select(TeamStoryArcMapperExtensions.MapToModelLite).ToList();
            model.TeamVolumes = entity.TeamVolumes?.Where(i => i.Active).Select(TeamVolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public ITeamModel MapToModelLite(ITeam entity)
        {
            var model = NameableEntityMapper.MapToModelLite<ITeam, TeamModel>(entity);
            // Team Properties
            // <None>
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public ITeamModel MapToModelListing(ITeam entity)
        {
            var model = NameableEntityMapper.MapToModelListing<ITeam, TeamModel>(entity);
            // Team Properties
            // <None>
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public ITeamSearchModel MapToSearchModel(ITeamModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<ITeamModel, TeamSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            searchModel.FirstIssueAppearanceCustomKey = model.FirstIssueAppearance?.CustomKey;
            searchModel.FirstIssueAppearanceName = model.FirstIssueAppearance?.Name;
            searchModel.FirstIssueAppearanceDescription = model.FirstIssueAppearance?.Description;
            searchModel.PublisherId = model.PublisherId;
            searchModel.PublisherCustomKey = model.Publisher?.CustomKey;
            searchModel.PublisherName = model.Publisher?.Name;
            searchModel.PublisherDescription = model.Publisher?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ITeamModel model, ITeam entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Team Properties
                // <None>
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.FirstIssueAppearanceId == entity.FirstIssueAppearanceId
                && model.PublisherId == entity.PublisherId
                ;
        }
    }
}
