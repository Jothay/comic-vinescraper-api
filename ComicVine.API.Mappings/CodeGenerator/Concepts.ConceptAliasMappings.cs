// <auto-generated>
// <copyright file="Concepts.IConceptAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptAliasMapperExtensions
    {
        public static readonly ConceptAliasMapper Mapper = new ConceptAliasMapper();

        public static IConceptAlias MapToEntity(this IConceptAliasModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IConceptAliasModel model, ref IConceptAlias entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IConceptAliasModel MapToModel(this IConceptAlias entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IConceptAliasModel MapToModelLite(this IConceptAlias entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IConceptAliasModel MapToModelListing(this IConceptAlias entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IConceptAliasSearchModel MapToSearchModel(this IConceptAliasModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptAliasModel model, IConceptAlias entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptAliasMapper : IConceptAliasMapper
    {
        public IConceptAlias MapToEntity(IConceptAliasModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<ConceptAlias, IConceptAliasModel>(model);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IConceptAliasModel model, ref IConceptAlias entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IConceptAliasModel MapToModel(IConceptAlias entity)
        {
            var model = NameableEntityMapper.MapToModel<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IConceptAliasModel MapToModelLite(IConceptAlias entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public IConceptAliasModel MapToModelListing(IConceptAlias entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IConceptAlias, ConceptAliasModel>(entity);
            // ConceptAlias Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            // Return Entity
            return model;
        }

        public IConceptAliasSearchModel MapToSearchModel(IConceptAliasModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IConceptAliasModel, ConceptAliasSearchModel>(model);
            // Search Properties
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptDescription = model.Concept?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IConceptAliasModel model, IConceptAlias entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // ConceptAlias Properties
                // <None>
                // Related Objects
                && model.ConceptId == entity.ConceptId
                ;
        }
    }
}
