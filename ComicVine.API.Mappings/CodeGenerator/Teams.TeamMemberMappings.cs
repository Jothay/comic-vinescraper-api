// <auto-generated>
// <copyright file="Teams.ITeamMemberModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMember model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamMemberMapperExtensions
    {
        public static ITeamMemberMapper Mapper = new TeamMemberMapper();

        public static void OverrideMapper(ITeamMemberMapper mapper) { Mapper = mapper; }

        public static ITeamMember MapToEntity(this ITeamMemberModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamMemberModel model, ref ITeamMember entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamMemberModel MapToModel(this ITeamMember entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamMemberModel MapToModelLite(this ITeamMember entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamMemberModel MapToModelListing(this ITeamMember entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamMemberSearchModel MapToSearchModel(this ITeamMemberModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamMemberModel model, ITeamMember entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamMemberMapper : ITeamMemberMapper
    {
        public virtual ITeamMember MapToEntity(ITeamMemberModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamMember, ITeamMemberModel>(model);
            // TeamMember Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ITeamMemberModel model, ref ITeamMember entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamMember Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ITeamMemberModel MapToModel(ITeamMember entity)
        {
            var model = EntityMapper.MapToModel<ITeamMember, TeamMemberModel>(entity);
            // TeamMember Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ITeamMemberModel MapToModelLite(ITeamMember entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamMember, TeamMemberModel>(entity);
            // TeamMember Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual ITeamMemberModel MapToModelListing(ITeamMember entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamMember, TeamMemberModel>(entity);
            // TeamMember Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public virtual ITeamMemberSearchModel MapToSearchModel(ITeamMemberModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamMemberModel, TeamMemberSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamApiDetailUrl = model.Team?.ApiDetailUrl;
            searchModel.TeamSiteDetailUrl = model.Team?.SiteDetailUrl;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamShortDescription = model.Team?.ShortDescription;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ITeamMemberModel model, ITeamMember entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamMember Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.CharacterId == entity.CharacterId
                ;
        }
    }
}
