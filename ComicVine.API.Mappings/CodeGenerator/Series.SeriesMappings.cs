// <auto-generated>
// <copyright file="Series.ISeriesModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between Series and SeriesModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Series
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class SeriesMapperExtensions
    {
        public static ISeriesMapper Mapper = new SeriesMapper();

        public static void OverrideMapper(ISeriesMapper mapper) { Mapper = mapper; }

        public static ISeries MapToEntity(this ISeriesModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ISeriesModel model, ref ISeries entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ISeriesModel MapToModel(this ISeries entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ISeriesModel MapToModelLite(this ISeries entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ISeriesModel MapToModelListing(this ISeries entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ISeriesSearchModel MapToSearchModel(this ISeriesModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ISeriesModel model, ISeries entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class SeriesMapper : ISeriesMapper
    {
        public virtual ISeries MapToEntity(ISeriesModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Series, ISeriesModel>(model);
            // Series Properties
            entity.Startyear = model.Startyear;
            // Related Objects
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            entity.FirstEpisodeId = model.FirstEpisodeId;
            entity.FirstEpisode = (Episode)model.FirstEpisode?.MapToEntity();
            entity.LastEpisodeId = model.LastEpisodeId;
            entity.LastEpisode = (Episode)model.LastEpisode?.MapToEntity();
            // Associated Objects
            entity.Episodes = model.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToEntity).Cast<Episode>().ToList();
            entity.SeriesAliases = model.SeriesAliases?.Where(i => i.Active).Select(SeriesAliasMapperExtensions.MapToEntity).Cast<SeriesAlias>().ToList();
            entity.SeriesCharacters = model.SeriesCharacters?.Where(i => i.Active).Select(SeriesCharacterMapperExtensions.MapToEntity).Cast<SeriesCharacter>().ToList();
            entity.SeriesLocations = model.SeriesLocations?.Where(i => i.Active).Select(SeriesLocationMapperExtensions.MapToEntity).Cast<SeriesLocation>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ISeriesModel model, ref ISeries entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Series Properties
            entity.Startyear = model.Startyear;
            // Related Objects
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            entity.FirstEpisodeId = model.FirstEpisodeId;
            entity.FirstEpisode = (Episode)model.FirstEpisode?.MapToEntity();
            entity.LastEpisodeId = model.LastEpisodeId;
            entity.LastEpisode = (Episode)model.LastEpisode?.MapToEntity();
            // Associated Objects
            entity.Episodes = model.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToEntity).ToList();
            entity.SeriesAliases = model.SeriesAliases?.Where(i => i.Active).Select(SeriesAliasMapperExtensions.MapToEntity).ToList();
            entity.SeriesCharacters = model.SeriesCharacters?.Where(i => i.Active).Select(SeriesCharacterMapperExtensions.MapToEntity).ToList();
            entity.SeriesLocations = model.SeriesLocations?.Where(i => i.Active).Select(SeriesLocationMapperExtensions.MapToEntity).ToList();
        }

        public virtual ISeriesModel MapToModel(ISeries entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<ISeries, SeriesModel>(entity);
            // Series Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PublisherId = entity.PublisherId;
            model.Publisher = entity.Publisher?.MapToModel();
            model.FirstEpisodeId = entity.FirstEpisodeId;
            model.FirstEpisode = entity.FirstEpisode?.MapToModel();
            model.LastEpisodeId = entity.LastEpisodeId;
            model.LastEpisode = entity.LastEpisode?.MapToModel();
            // Associated Objects
            model.Episodes = entity.Episodes?.Where(i => i.Active).Select(EpisodeMapperExtensions.MapToModelLite).ToList();
            model.SeriesAliases = entity.SeriesAliases?.Where(i => i.Active).Select(SeriesAliasMapperExtensions.MapToModelLite).ToList();
            model.SeriesCharacters = entity.SeriesCharacters?.Where(i => i.Active).Select(SeriesCharacterMapperExtensions.MapToModelLite).ToList();
            model.SeriesLocations = entity.SeriesLocations?.Where(i => i.Active).Select(SeriesLocationMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual ISeriesModel MapToModelLite(ISeries entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<ISeries, SeriesModel>(entity);
            // Series Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PublisherId = entity.PublisherId;
            model.FirstEpisodeId = entity.FirstEpisodeId;
            model.LastEpisodeId = entity.LastEpisodeId;
            // Return Entity
            return model;
        }

        public virtual ISeriesModel MapToModelListing(ISeries entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<ISeries, SeriesModel>(entity);
            // Series Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PublisherId = entity.PublisherId;
            model.FirstEpisodeId = entity.FirstEpisodeId;
            model.LastEpisodeId = entity.LastEpisodeId;
            // Return Entity
            return model;
        }

        public virtual ISeriesSearchModel MapToSearchModel(ISeriesModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<ISeriesModel, SeriesSearchModel>(model);
            // Search Properties
            searchModel.PublisherId = model.PublisherId;
            searchModel.PublisherCustomKey = model.Publisher?.CustomKey;
            searchModel.PublisherApiDetailUrl = model.Publisher?.ApiDetailUrl;
            searchModel.PublisherSiteDetailUrl = model.Publisher?.SiteDetailUrl;
            searchModel.PublisherName = model.Publisher?.Name;
            searchModel.PublisherShortDescription = model.Publisher?.ShortDescription;
            searchModel.PublisherDescription = model.Publisher?.Description;
            searchModel.FirstEpisodeId = model.FirstEpisodeId;
            searchModel.FirstEpisodeCustomKey = model.FirstEpisode?.CustomKey;
            searchModel.FirstEpisodeApiDetailUrl = model.FirstEpisode?.ApiDetailUrl;
            searchModel.FirstEpisodeSiteDetailUrl = model.FirstEpisode?.SiteDetailUrl;
            searchModel.FirstEpisodeName = model.FirstEpisode?.Name;
            searchModel.FirstEpisodeShortDescription = model.FirstEpisode?.ShortDescription;
            searchModel.FirstEpisodeDescription = model.FirstEpisode?.Description;
            searchModel.LastEpisodeId = model.LastEpisodeId;
            searchModel.LastEpisodeCustomKey = model.LastEpisode?.CustomKey;
            searchModel.LastEpisodeApiDetailUrl = model.LastEpisode?.ApiDetailUrl;
            searchModel.LastEpisodeSiteDetailUrl = model.LastEpisode?.SiteDetailUrl;
            searchModel.LastEpisodeName = model.LastEpisode?.Name;
            searchModel.LastEpisodeShortDescription = model.LastEpisode?.ShortDescription;
            searchModel.LastEpisodeDescription = model.LastEpisode?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ISeriesModel model, ISeries entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Series Properties
                && model.Startyear == entity.Startyear
                // Related Objects
                && model.PublisherId == entity.PublisherId
                && model.FirstEpisodeId == entity.FirstEpisodeId
                && model.LastEpisodeId == entity.LastEpisodeId
                ;
        }
    }
}
