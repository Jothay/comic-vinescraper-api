// <auto-generated>
// <copyright file="Objects.IObjectVolumeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectVolume model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ObjectVolumeMapperExtensions
    {
        public static readonly ObjectVolumeMapper Mapper = new ObjectVolumeMapper();

        public static IObjectVolume MapToEntity(this IObjectVolumeModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IObjectVolumeModel model, ref IObjectVolume entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IObjectVolumeModel MapToModel(this IObjectVolume entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IObjectVolumeModel MapToModelLite(this IObjectVolume entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IObjectVolumeModel MapToModelListing(this IObjectVolume entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IObjectVolumeSearchModel MapToSearchModel(this IObjectVolumeModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IObjectVolumeModel model, IObjectVolume entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ObjectVolumeMapper : IObjectVolumeMapper
    {
        public IObjectVolume MapToEntity(IObjectVolumeModel model)
        {
            var entity = EntityMapper.MapToEntity<ObjectVolume, IObjectVolumeModel>(model);
            // ObjectVolume Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IObjectVolumeModel model, ref IObjectVolume entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ObjectVolume Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IObjectVolumeModel MapToModel(IObjectVolume entity)
        {
            var model = EntityMapper.MapToModel<IObjectVolume, ObjectVolumeModel>(entity);
            // ObjectVolume Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.Object = entity.Object?.MapToModel();
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IObjectVolumeModel MapToModelLite(IObjectVolume entity)
        {
            var model = EntityMapper.MapToModelLite<IObjectVolume, ObjectVolumeModel>(entity);
            // ObjectVolume Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public IObjectVolumeModel MapToModelListing(IObjectVolume entity)
        {
            var model = EntityMapper.MapToModelListing<IObjectVolume, ObjectVolumeModel>(entity);
            // ObjectVolume Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public IObjectVolumeSearchModel MapToSearchModel(IObjectVolumeModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IObjectVolumeModel, ObjectVolumeSearchModel>(model);
            // Search Properties
            searchModel.ObjectId = model.ObjectId;
            searchModel.ObjectCustomKey = model.Object?.CustomKey;
            searchModel.ObjectName = model.Object?.Name;
            searchModel.ObjectDescription = model.Object?.Description;
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeDescription = model.Volume?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IObjectVolumeModel model, IObjectVolume entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ObjectVolume Properties
                // <None>
                // Related Objects
                && model.ObjectId == entity.ObjectId
                && model.VolumeId == entity.VolumeId
                ;
        }
    }
}
