// <auto-generated>
// <copyright file="Teams.ITeamCharacterFriendModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamCharacterFriend model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamCharacterFriendMapperExtensions
    {
        public static ITeamCharacterFriendMapper Mapper = new TeamCharacterFriendMapper();

        public static void OverrideMapper(ITeamCharacterFriendMapper mapper) { Mapper = mapper; }

        public static ITeamCharacterFriend MapToEntity(this ITeamCharacterFriendModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamCharacterFriendModel model, ref ITeamCharacterFriend entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamCharacterFriendModel MapToModel(this ITeamCharacterFriend entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamCharacterFriendModel MapToModelLite(this ITeamCharacterFriend entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamCharacterFriendModel MapToModelListing(this ITeamCharacterFriend entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamCharacterFriendSearchModel MapToSearchModel(this ITeamCharacterFriendModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamCharacterFriendModel model, ITeamCharacterFriend entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamCharacterFriendMapper : ITeamCharacterFriendMapper
    {
        public virtual ITeamCharacterFriend MapToEntity(ITeamCharacterFriendModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamCharacterFriend, ITeamCharacterFriendModel>(model);
            // TeamCharacterFriend Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.FriendId = model.FriendId;
            entity.Friend = (Character)model.Friend?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ITeamCharacterFriendModel model, ref ITeamCharacterFriend entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamCharacterFriend Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.FriendId = model.FriendId;
            entity.Friend = (Character)model.Friend?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ITeamCharacterFriendModel MapToModel(ITeamCharacterFriend entity)
        {
            var model = EntityMapper.MapToModel<ITeamCharacterFriend, TeamCharacterFriendModel>(entity);
            // TeamCharacterFriend Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.FriendId = entity.FriendId;
            model.Friend = entity.Friend?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ITeamCharacterFriendModel MapToModelLite(ITeamCharacterFriend entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamCharacterFriend, TeamCharacterFriendModel>(entity);
            // TeamCharacterFriend Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.FriendId = entity.FriendId;
            // Return Entity
            return model;
        }

        public virtual ITeamCharacterFriendModel MapToModelListing(ITeamCharacterFriend entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamCharacterFriend, TeamCharacterFriendModel>(entity);
            // TeamCharacterFriend Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.FriendId = entity.FriendId;
            // Return Entity
            return model;
        }

        public virtual ITeamCharacterFriendSearchModel MapToSearchModel(ITeamCharacterFriendModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamCharacterFriendModel, TeamCharacterFriendSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamApiDetailUrl = model.Team?.ApiDetailUrl;
            searchModel.TeamSiteDetailUrl = model.Team?.SiteDetailUrl;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamShortDescription = model.Team?.ShortDescription;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.FriendId = model.FriendId;
            searchModel.FriendCustomKey = model.Friend?.CustomKey;
            searchModel.FriendApiDetailUrl = model.Friend?.ApiDetailUrl;
            searchModel.FriendSiteDetailUrl = model.Friend?.SiteDetailUrl;
            searchModel.FriendName = model.Friend?.Name;
            searchModel.FriendShortDescription = model.Friend?.ShortDescription;
            searchModel.FriendDescription = model.Friend?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ITeamCharacterFriendModel model, ITeamCharacterFriend entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamCharacterFriend Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.FriendId == entity.FriendId
                ;
        }
    }
}
