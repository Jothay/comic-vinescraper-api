// <auto-generated>
// <copyright file="Series.ISeriesCharacterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the SeriesCharacter model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Series
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class SeriesCharacterMapperExtensions
    {
        public static readonly SeriesCharacterMapper Mapper = new SeriesCharacterMapper();

        public static ISeriesCharacter MapToEntity(this ISeriesCharacterModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ISeriesCharacterModel model, ref ISeriesCharacter entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ISeriesCharacterModel MapToModel(this ISeriesCharacter entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ISeriesCharacterModel MapToModelLite(this ISeriesCharacter entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ISeriesCharacterModel MapToModelListing(this ISeriesCharacter entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ISeriesCharacterSearchModel MapToSearchModel(this ISeriesCharacterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ISeriesCharacterModel model, ISeriesCharacter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class SeriesCharacterMapper : ISeriesCharacterMapper
    {
        public ISeriesCharacter MapToEntity(ISeriesCharacterModel model)
        {
            var entity = EntityMapper.MapToEntity<SeriesCharacter, ISeriesCharacterModel>(model);
            // SeriesCharacter Properties
            // <None>
            // Related Objects
            entity.SeriesId = model.SeriesId;
            entity.Series = (Series)model.Series?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ISeriesCharacterModel model, ref ISeriesCharacter entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // SeriesCharacter Properties
            // <None>
            // Related Objects
            entity.SeriesId = model.SeriesId;
            entity.Series = (Series)model.Series?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ISeriesCharacterModel MapToModel(ISeriesCharacter entity)
        {
            var model = EntityMapper.MapToModel<ISeriesCharacter, SeriesCharacterModel>(entity);
            // SeriesCharacter Properties
            // <None>
            // Related Objects
            model.SeriesId = entity.SeriesId;
            model.Series = entity.Series?.MapToModel();
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ISeriesCharacterModel MapToModelLite(ISeriesCharacter entity)
        {
            var model = EntityMapper.MapToModelLite<ISeriesCharacter, SeriesCharacterModel>(entity);
            // SeriesCharacter Properties
            // <None>
            // Related Objects
            model.SeriesId = entity.SeriesId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public ISeriesCharacterModel MapToModelListing(ISeriesCharacter entity)
        {
            var model = EntityMapper.MapToModelListing<ISeriesCharacter, SeriesCharacterModel>(entity);
            // SeriesCharacter Properties
            // <None>
            // Related Objects
            model.SeriesId = entity.SeriesId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public ISeriesCharacterSearchModel MapToSearchModel(ISeriesCharacterModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ISeriesCharacterModel, SeriesCharacterSearchModel>(model);
            // Search Properties
            searchModel.SeriesId = model.SeriesId;
            searchModel.SeriesCustomKey = model.Series?.CustomKey;
            searchModel.SeriesName = model.Series?.Name;
            searchModel.SeriesDescription = model.Series?.Description;
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterDescription = model.Character?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ISeriesCharacterModel model, ISeriesCharacter entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // SeriesCharacter Properties
                // <None>
                // Related Objects
                && model.SeriesId == entity.SeriesId
                && model.CharacterId == entity.CharacterId
                ;
        }
    }
}
