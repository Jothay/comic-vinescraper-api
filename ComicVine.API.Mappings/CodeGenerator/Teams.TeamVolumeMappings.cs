// <auto-generated>
// <copyright file="Teams.ITeamVolumeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamVolume model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamVolumeMapperExtensions
    {
        public static ITeamVolumeMapper Mapper = new TeamVolumeMapper();

        public static void OverrideMapper(ITeamVolumeMapper mapper) { Mapper = mapper; }

        public static ITeamVolume MapToEntity(this ITeamVolumeModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamVolumeModel model, ref ITeamVolume entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamVolumeModel MapToModel(this ITeamVolume entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamVolumeModel MapToModelLite(this ITeamVolume entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamVolumeModel MapToModelListing(this ITeamVolume entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamVolumeSearchModel MapToSearchModel(this ITeamVolumeModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamVolumeModel model, ITeamVolume entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamVolumeMapper : ITeamVolumeMapper
    {
        public virtual ITeamVolume MapToEntity(ITeamVolumeModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamVolume, ITeamVolumeModel>(model);
            // TeamVolume Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ITeamVolumeModel model, ref ITeamVolume entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamVolume Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ITeamVolumeModel MapToModel(ITeamVolume entity)
        {
            var model = EntityMapper.MapToModel<ITeamVolume, TeamVolumeModel>(entity);
            // TeamVolume Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ITeamVolumeModel MapToModelLite(ITeamVolume entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamVolume, TeamVolumeModel>(entity);
            // TeamVolume Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual ITeamVolumeModel MapToModelListing(ITeamVolume entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamVolume, TeamVolumeModel>(entity);
            // TeamVolume Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public virtual ITeamVolumeSearchModel MapToSearchModel(ITeamVolumeModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamVolumeModel, TeamVolumeSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamApiDetailUrl = model.Team?.ApiDetailUrl;
            searchModel.TeamSiteDetailUrl = model.Team?.SiteDetailUrl;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamShortDescription = model.Team?.ShortDescription;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeApiDetailUrl = model.Volume?.ApiDetailUrl;
            searchModel.VolumeSiteDetailUrl = model.Volume?.SiteDetailUrl;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeShortDescription = model.Volume?.ShortDescription;
            searchModel.VolumeDescription = model.Volume?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ITeamVolumeModel model, ITeamVolume entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamVolume Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.VolumeId == entity.VolumeId
                ;
        }
    }
}
