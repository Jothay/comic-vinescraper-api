// <auto-generated>
// <copyright file="Movies.IMovieModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Movie model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class MovieMapperExtensions
    {
        public static readonly MovieMapper Mapper = new MovieMapper();

        public static IMovie MapToEntity(this IMovieModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IMovieModel model, ref IMovie entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IMovieModel MapToModel(this IMovie entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IMovieModel MapToModelLite(this IMovie entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IMovieModel MapToModelListing(this IMovie entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IMovieSearchModel MapToSearchModel(this IMovieModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IMovieModel model, IMovie entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class MovieMapper : IMovieMapper
    {
        public IMovie MapToEntity(IMovieModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Movie, IMovieModel>(model);
            // Movie Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.Distributor = model.Distributor;
            entity.BoxOfficeRevenue = model.BoxOfficeRevenue;
            entity.TotalRevenue = model.TotalRevenue;
            entity.Budget = model.Budget;
            entity.Rating = model.Rating;
            entity.ReleaseDate = model.ReleaseDate;
            entity.RunTime = model.RunTime;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.MovieCharacters = model.MovieCharacters?.Where(i => i.Active).Select(MovieCharacterMapperExtensions.MapToEntity).Cast<MovieCharacter>().ToList();
            entity.MovieConcepts = model.MovieConcepts?.Where(i => i.Active).Select(MovieConceptMapperExtensions.MapToEntity).Cast<MovieConcept>().ToList();
            entity.MovieLocations = model.MovieLocations?.Where(i => i.Active).Select(MovieLocationMapperExtensions.MapToEntity).Cast<MovieLocation>().ToList();
            entity.MovieObjects = model.MovieObjects?.Where(i => i.Active).Select(MovieObjectMapperExtensions.MapToEntity).Cast<MovieObject>().ToList();
            entity.MovieProducers = model.MovieProducers?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToEntity).Cast<MovieProducer>().ToList();
            entity.MovieStoryArcs = model.MovieStoryArcs?.Where(i => i.Active).Select(MovieStoryArcMapperExtensions.MapToEntity).Cast<MovieStoryArc>().ToList();
            entity.MovieStudios = model.MovieStudios?.Where(i => i.Active).Select(MovieStudioMapperExtensions.MapToEntity).Cast<MovieStudio>().ToList();
            entity.MovieTeams = model.MovieTeams?.Where(i => i.Active).Select(MovieTeamMapperExtensions.MapToEntity).Cast<MovieTeam>().ToList();
            entity.MovieWriters = model.MovieWriters?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToEntity).Cast<MovieWriter>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(IMovieModel model, ref IMovie entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Movie Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.Distributor = model.Distributor;
            entity.BoxOfficeRevenue = model.BoxOfficeRevenue;
            entity.TotalRevenue = model.TotalRevenue;
            entity.Budget = model.Budget;
            entity.Rating = model.Rating;
            entity.ReleaseDate = model.ReleaseDate;
            entity.RunTime = model.RunTime;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.MovieCharacters = (ICollection<IMovieCharacter>)model.MovieCharacters?.Where(i => i.Active).Select(MovieCharacterMapperExtensions.MapToEntity).Cast<MovieCharacter>();
            entity.MovieConcepts = (ICollection<IMovieConcept>)model.MovieConcepts?.Where(i => i.Active).Select(MovieConceptMapperExtensions.MapToEntity).Cast<MovieConcept>();
            entity.MovieLocations = (ICollection<IMovieLocation>)model.MovieLocations?.Where(i => i.Active).Select(MovieLocationMapperExtensions.MapToEntity).Cast<MovieLocation>();
            entity.MovieObjects = (ICollection<IMovieObject>)model.MovieObjects?.Where(i => i.Active).Select(MovieObjectMapperExtensions.MapToEntity).Cast<MovieObject>();
            entity.MovieProducers = (ICollection<IMovieProducer>)model.MovieProducers?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToEntity).Cast<MovieProducer>();
            entity.MovieStoryArcs = (ICollection<IMovieStoryArc>)model.MovieStoryArcs?.Where(i => i.Active).Select(MovieStoryArcMapperExtensions.MapToEntity).Cast<MovieStoryArc>();
            entity.MovieStudios = (ICollection<IMovieStudio>)model.MovieStudios?.Where(i => i.Active).Select(MovieStudioMapperExtensions.MapToEntity).Cast<MovieStudio>();
            entity.MovieTeams = (ICollection<IMovieTeam>)model.MovieTeams?.Where(i => i.Active).Select(MovieTeamMapperExtensions.MapToEntity).Cast<MovieTeam>();
            entity.MovieWriters = (ICollection<IMovieWriter>)model.MovieWriters?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToEntity).Cast<MovieWriter>();
        }

        public IMovieModel MapToModel(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModel<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            // Associated Objects
            model.MovieCharacters = entity.MovieCharacters?.Where(i => i.Active).Select(MovieCharacterMapperExtensions.MapToModelLite).ToList();
            model.MovieConcepts = entity.MovieConcepts?.Where(i => i.Active).Select(MovieConceptMapperExtensions.MapToModelLite).ToList();
            model.MovieLocations = entity.MovieLocations?.Where(i => i.Active).Select(MovieLocationMapperExtensions.MapToModelLite).ToList();
            model.MovieObjects = entity.MovieObjects?.Where(i => i.Active).Select(MovieObjectMapperExtensions.MapToModelLite).ToList();
            model.MovieProducers = entity.MovieProducers?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToModelLite).ToList();
            model.MovieStoryArcs = entity.MovieStoryArcs?.Where(i => i.Active).Select(MovieStoryArcMapperExtensions.MapToModelLite).ToList();
            model.MovieStudios = entity.MovieStudios?.Where(i => i.Active).Select(MovieStudioMapperExtensions.MapToModelLite).ToList();
            model.MovieTeams = entity.MovieTeams?.Where(i => i.Active).Select(MovieTeamMapperExtensions.MapToModelLite).ToList();
            model.MovieWriters = entity.MovieWriters?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public IMovieModel MapToModelLite(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public IMovieModel MapToModelListing(IMovie entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IMovie, MovieModel>(entity);
            // Movie Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.Distributor = entity.Distributor;
            model.BoxOfficeRevenue = entity.BoxOfficeRevenue;
            model.TotalRevenue = entity.TotalRevenue;
            model.Budget = entity.Budget;
            model.Rating = entity.Rating;
            model.ReleaseDate = entity.ReleaseDate;
            model.RunTime = entity.RunTime;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public IMovieSearchModel MapToSearchModel(IMovieModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IMovieModel, MovieSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.HasStaffReview = model.HasStaffReview;
            searchModel.Distributor = model.Distributor;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IMovieModel model, IMovie entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Movie Properties
                && model.HasStaffReview == entity.HasStaffReview
                && model.Distributor == entity.Distributor
                && model.BoxOfficeRevenue == entity.BoxOfficeRevenue
                && model.TotalRevenue == entity.TotalRevenue
                && model.Budget == entity.Budget
                && model.Rating == entity.Rating
                && model.ReleaseDate == entity.ReleaseDate
                && model.RunTime == entity.RunTime
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                ;
        }
    }
}
