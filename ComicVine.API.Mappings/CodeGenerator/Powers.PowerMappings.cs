// <auto-generated>
// <copyright file="Powers.IPowerModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between Power and PowerModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Powers
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class PowerMapperExtensions
    {
        public static IPowerMapper Mapper = new PowerMapper();

        public static void OverrideMapper(IPowerMapper mapper) { Mapper = mapper; }

        public static IPower MapToEntity(this IPowerModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IPowerModel model, ref IPower entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IPowerModel MapToModel(this IPower entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IPowerModel MapToModelLite(this IPower entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IPowerModel MapToModelListing(this IPower entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IPowerSearchModel MapToSearchModel(this IPowerModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IPowerModel model, IPower entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class PowerMapper : IPowerMapper
    {
        public virtual IPower MapToEntity(IPowerModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Power, IPowerModel>(model);
            // Power Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.CharacterPowers = model.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToEntity).Cast<CharacterPower>().ToList();
            entity.PowerAliases = model.PowerAliases?.Where(i => i.Active).Select(PowerAliasMapperExtensions.MapToEntity).Cast<PowerAlias>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IPowerModel model, ref IPower entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Power Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            entity.CharacterPowers = model.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToEntity).ToList();
            entity.PowerAliases = model.PowerAliases?.Where(i => i.Active).Select(PowerAliasMapperExtensions.MapToEntity).ToList();
        }

        public virtual IPowerModel MapToModel(IPower entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IPower, PowerModel>(entity);
            // Power Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            model.CharacterPowers = entity.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToModelLite).ToList();
            model.PowerAliases = entity.PowerAliases?.Where(i => i.Active).Select(PowerAliasMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IPowerModel MapToModelLite(IPower entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IPower, PowerModel>(entity);
            // Power Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IPowerModel MapToModelListing(IPower entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IPower, PowerModel>(entity);
            // Power Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IPowerSearchModel MapToSearchModel(IPowerModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IPowerModel, PowerSearchModel>(model);
            // Search Properties
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IPowerModel model, IPower entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Power Properties
                // <None>
                // Related Objects
                // <None>
                ;
        }
    }
}
