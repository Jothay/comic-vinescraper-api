// <auto-generated>
// <copyright file="Characters.ICharacterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Character model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Characters
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class CharacterMapperExtensions
    {
        public static readonly CharacterMapper Mapper = new CharacterMapper();

        public static ICharacter MapToEntity(this ICharacterModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ICharacterModel model, ref ICharacter entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ICharacterModel MapToModel(this ICharacter entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ICharacterModel MapToModelLite(this ICharacter entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ICharacterModel MapToModelListing(this ICharacter entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ICharacterSearchModel MapToSearchModel(this ICharacterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ICharacterModel model, ICharacter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class CharacterMapper : ICharacterMapper
    {
        public ICharacter MapToEntity(ICharacterModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Character, ICharacterModel>(model);
            // Character Properties
            entity.RealName = model.RealName;
            entity.DateOfBirth = model.DateOfBirth;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender?.MapToEntity();
            entity.OriginId = model.OriginId;
            entity.Origin = (Origin)model.Origin?.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            // Associated Objects
            entity.CharacterAliases = model.CharacterAliases?.Where(i => i.Active).Select(CharacterAliasMapperExtensions.MapToEntity).Cast<CharacterAlias>().ToList();
            entity.CharacterCreators = model.CharacterCreators?.Where(i => i.Active).Select(CharacterCreatorMapperExtensions.MapToEntity).Cast<CharacterCreator>().ToList();
            entity.CharacterEnemies = model.CharacterEnemies?.Where(i => i.Active).Select(CharacterEnemyMapperExtensions.MapToEntity).Cast<CharacterEnemy>().ToList();
            entity.CharacterEnemyTeams = model.CharacterEnemyTeams?.Where(i => i.Active).Select(CharacterEnemyTeamMapperExtensions.MapToEntity).Cast<CharacterEnemyTeam>().ToList();
            entity.CharacterFriends = model.CharacterFriends?.Where(i => i.Active).Select(CharacterFriendMapperExtensions.MapToEntity).Cast<CharacterFriend>().ToList();
            entity.CharacterFriendlyTeams = model.CharacterFriendlyTeams?.Where(i => i.Active).Select(CharacterFriendlyTeamMapperExtensions.MapToEntity).Cast<CharacterFriendlyTeam>().ToList();
            entity.CharacterIssuesAppearedIn = model.CharacterIssuesAppearedIn?.Where(i => i.Active).Select(CharacterAppearedInIssueMapperExtensions.MapToEntity).Cast<CharacterAppearedInIssue>().ToList();
            entity.CharacterIssuesDiedIn = model.CharacterIssuesDiedIn?.Where(i => i.Active).Select(CharacterDiedInIssueMapperExtensions.MapToEntity).Cast<CharacterDiedInIssue>().ToList();
            entity.CharacterIssues = model.CharacterIssues?.Where(i => i.Active).Select(CharacterIssueMapperExtensions.MapToEntity).Cast<CharacterIssue>().ToList();
            entity.CharacterMovies = model.CharacterMovies?.Where(i => i.Active).Select(CharacterMovieMapperExtensions.MapToEntity).Cast<CharacterMovie>().ToList();
            entity.CharacterPowers = model.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToEntity).Cast<CharacterPower>().ToList();
            entity.CharacterStoryArcs = model.CharacterStoryArcs?.Where(i => i.Active).Select(CharacterStoryArcMapperExtensions.MapToEntity).Cast<CharacterStoryArc>().ToList();
            entity.CharacterTeams = model.CharacterTeams?.Where(i => i.Active).Select(CharacterTeamMapperExtensions.MapToEntity).Cast<CharacterTeam>().ToList();
            entity.CharacterVolumes = model.CharacterVolumes?.Where(i => i.Active).Select(CharacterVolumeMapperExtensions.MapToEntity).Cast<CharacterVolume>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(ICharacterModel model, ref ICharacter entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Character Properties
            entity.RealName = model.RealName;
            entity.DateOfBirth = model.DateOfBirth;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender?.MapToEntity();
            entity.OriginId = model.OriginId;
            entity.Origin = (Origin)model.Origin?.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher?.MapToEntity();
            // Associated Objects
            entity.CharacterAliases = (ICollection<ICharacterAlias>)model.CharacterAliases?.Where(i => i.Active).Select(CharacterAliasMapperExtensions.MapToEntity).Cast<CharacterAlias>();
            entity.CharacterCreators = (ICollection<ICharacterCreator>)model.CharacterCreators?.Where(i => i.Active).Select(CharacterCreatorMapperExtensions.MapToEntity).Cast<CharacterCreator>();
            entity.CharacterEnemies = (ICollection<ICharacterEnemy>)model.CharacterEnemies?.Where(i => i.Active).Select(CharacterEnemyMapperExtensions.MapToEntity).Cast<CharacterEnemy>();
            entity.CharacterEnemyTeams = (ICollection<ICharacterEnemyTeam>)model.CharacterEnemyTeams?.Where(i => i.Active).Select(CharacterEnemyTeamMapperExtensions.MapToEntity).Cast<CharacterEnemyTeam>();
            entity.CharacterFriends = (ICollection<ICharacterFriend>)model.CharacterFriends?.Where(i => i.Active).Select(CharacterFriendMapperExtensions.MapToEntity).Cast<CharacterFriend>();
            entity.CharacterFriendlyTeams = (ICollection<ICharacterFriendlyTeam>)model.CharacterFriendlyTeams?.Where(i => i.Active).Select(CharacterFriendlyTeamMapperExtensions.MapToEntity).Cast<CharacterFriendlyTeam>();
            entity.CharacterIssuesAppearedIn = (ICollection<ICharacterAppearedInIssue>)model.CharacterIssuesAppearedIn?.Where(i => i.Active).Select(CharacterAppearedInIssueMapperExtensions.MapToEntity).Cast<CharacterAppearedInIssue>();
            entity.CharacterIssuesDiedIn = (ICollection<ICharacterDiedInIssue>)model.CharacterIssuesDiedIn?.Where(i => i.Active).Select(CharacterDiedInIssueMapperExtensions.MapToEntity).Cast<CharacterDiedInIssue>();
            entity.CharacterIssues = (ICollection<ICharacterIssue>)model.CharacterIssues?.Where(i => i.Active).Select(CharacterIssueMapperExtensions.MapToEntity).Cast<CharacterIssue>();
            entity.CharacterMovies = (ICollection<ICharacterMovie>)model.CharacterMovies?.Where(i => i.Active).Select(CharacterMovieMapperExtensions.MapToEntity).Cast<CharacterMovie>();
            entity.CharacterPowers = (ICollection<ICharacterPower>)model.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToEntity).Cast<CharacterPower>();
            entity.CharacterStoryArcs = (ICollection<ICharacterStoryArc>)model.CharacterStoryArcs?.Where(i => i.Active).Select(CharacterStoryArcMapperExtensions.MapToEntity).Cast<CharacterStoryArc>();
            entity.CharacterTeams = (ICollection<ICharacterTeam>)model.CharacterTeams?.Where(i => i.Active).Select(CharacterTeamMapperExtensions.MapToEntity).Cast<CharacterTeam>();
            entity.CharacterVolumes = (ICollection<ICharacterVolume>)model.CharacterVolumes?.Where(i => i.Active).Select(CharacterVolumeMapperExtensions.MapToEntity).Cast<CharacterVolume>();
        }

        public ICharacterModel MapToModel(ICharacter entity)
        {
            var model = NameableEntityMapper.MapToModel<ICharacter, CharacterModel>(entity);
            // Character Properties
            model.RealName = entity.RealName;
            model.DateOfBirth = entity.DateOfBirth;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.FirstIssueAppearance = entity.FirstIssueAppearance?.MapToModel();
            model.GenderId = entity.GenderId;
            model.Gender = entity.Gender?.MapToModel();
            model.OriginId = entity.OriginId;
            model.Origin = entity.Origin?.MapToModel();
            model.PublisherId = entity.PublisherId;
            model.Publisher = entity.Publisher?.MapToModel();
            // Associated Objects
            model.CharacterAliases = entity.CharacterAliases?.Where(i => i.Active).Select(CharacterAliasMapperExtensions.MapToModelLite).ToList();
            model.CharacterCreators = entity.CharacterCreators?.Where(i => i.Active).Select(CharacterCreatorMapperExtensions.MapToModelLite).ToList();
            model.CharacterEnemies = entity.CharacterEnemies?.Where(i => i.Active).Select(CharacterEnemyMapperExtensions.MapToModelLite).ToList();
            model.CharacterEnemyTeams = entity.CharacterEnemyTeams?.Where(i => i.Active).Select(CharacterEnemyTeamMapperExtensions.MapToModelLite).ToList();
            model.CharacterFriends = entity.CharacterFriends?.Where(i => i.Active).Select(CharacterFriendMapperExtensions.MapToModelLite).ToList();
            model.CharacterFriendlyTeams = entity.CharacterFriendlyTeams?.Where(i => i.Active).Select(CharacterFriendlyTeamMapperExtensions.MapToModelLite).ToList();
            model.CharacterIssuesAppearedIn = entity.CharacterIssuesAppearedIn?.Where(i => i.Active).Select(CharacterAppearedInIssueMapperExtensions.MapToModelLite).ToList();
            model.CharacterIssuesDiedIn = entity.CharacterIssuesDiedIn?.Where(i => i.Active).Select(CharacterDiedInIssueMapperExtensions.MapToModelLite).ToList();
            model.CharacterIssues = entity.CharacterIssues?.Where(i => i.Active).Select(CharacterIssueMapperExtensions.MapToModelLite).ToList();
            model.CharacterMovies = entity.CharacterMovies?.Where(i => i.Active).Select(CharacterMovieMapperExtensions.MapToModelLite).ToList();
            model.CharacterPowers = entity.CharacterPowers?.Where(i => i.Active).Select(CharacterPowerMapperExtensions.MapToModelLite).ToList();
            model.CharacterStoryArcs = entity.CharacterStoryArcs?.Where(i => i.Active).Select(CharacterStoryArcMapperExtensions.MapToModelLite).ToList();
            model.CharacterTeams = entity.CharacterTeams?.Where(i => i.Active).Select(CharacterTeamMapperExtensions.MapToModelLite).ToList();
            model.CharacterVolumes = entity.CharacterVolumes?.Where(i => i.Active).Select(CharacterVolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public ICharacterModel MapToModelLite(ICharacter entity)
        {
            var model = NameableEntityMapper.MapToModelLite<ICharacter, CharacterModel>(entity);
            // Character Properties
            model.RealName = entity.RealName;
            model.DateOfBirth = entity.DateOfBirth;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.GenderId = entity.GenderId;
            model.OriginId = entity.OriginId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public ICharacterModel MapToModelListing(ICharacter entity)
        {
            var model = NameableEntityMapper.MapToModelListing<ICharacter, CharacterModel>(entity);
            // Character Properties
            model.RealName = entity.RealName;
            model.DateOfBirth = entity.DateOfBirth;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.GenderId = entity.GenderId;
            model.OriginId = entity.OriginId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public ICharacterSearchModel MapToSearchModel(ICharacterModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<ICharacterModel, CharacterSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            searchModel.FirstIssueAppearanceCustomKey = model.FirstIssueAppearance?.CustomKey;
            searchModel.FirstIssueAppearanceName = model.FirstIssueAppearance?.Name;
            searchModel.FirstIssueAppearanceDescription = model.FirstIssueAppearance?.Description;
            searchModel.GenderId = model.GenderId;
            searchModel.GenderCustomKey = model.Gender?.CustomKey;
            searchModel.GenderName = model.Gender?.Name;
            searchModel.GenderDescription = model.Gender?.Description;
            searchModel.OriginId = model.OriginId;
            searchModel.OriginCustomKey = model.Origin?.CustomKey;
            searchModel.OriginName = model.Origin?.Name;
            searchModel.OriginDescription = model.Origin?.Description;
            searchModel.PublisherId = model.PublisherId;
            searchModel.PublisherCustomKey = model.Publisher?.CustomKey;
            searchModel.PublisherName = model.Publisher?.Name;
            searchModel.PublisherDescription = model.Publisher?.Description;
            searchModel.RealName = model.RealName;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ICharacterModel model, ICharacter entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Character Properties
                && model.RealName == entity.RealName
                && model.DateOfBirth == entity.DateOfBirth
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.FirstIssueAppearanceId == entity.FirstIssueAppearanceId
                && model.GenderId == entity.GenderId
                && model.OriginId == entity.OriginId
                && model.PublisherId == entity.PublisherId
                ;
        }
    }
}
