// <auto-generated>
// <copyright file="Issues.IIssueWriterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the IssueWriter model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Issues
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class IssueWriterMapperExtensions
    {
        public static readonly IssueWriterMapper Mapper = new IssueWriterMapper();

        public static IIssueWriter MapToEntity(this IIssueWriterModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IIssueWriterModel model, ref IIssueWriter entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IIssueWriterModel MapToModel(this IIssueWriter entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IIssueWriterModel MapToModelLite(this IIssueWriter entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IIssueWriterModel MapToModelListing(this IIssueWriter entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IIssueWriterSearchModel MapToSearchModel(this IIssueWriterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IIssueWriterModel model, IIssueWriter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class IssueWriterMapper : IIssueWriterMapper
    {
        public IIssueWriter MapToEntity(IIssueWriterModel model)
        {
            var entity = EntityMapper.MapToEntity<IssueWriter, IIssueWriterModel>(model);
            // IssueWriter Properties
            // <None>
            // Related Objects
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            entity.WriterId = model.WriterId;
            entity.Writer = (Person)model.Writer?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IIssueWriterModel model, ref IIssueWriter entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // IssueWriter Properties
            // <None>
            // Related Objects
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            entity.WriterId = model.WriterId;
            entity.Writer = (Person)model.Writer?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IIssueWriterModel MapToModel(IIssueWriter entity)
        {
            var model = EntityMapper.MapToModel<IIssueWriter, IssueWriterModel>(entity);
            // IssueWriter Properties
            // <None>
            // Related Objects
            model.IssueId = entity.IssueId;
            model.Issue = entity.Issue?.MapToModel();
            model.WriterId = entity.WriterId;
            model.Writer = entity.Writer?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IIssueWriterModel MapToModelLite(IIssueWriter entity)
        {
            var model = EntityMapper.MapToModelLite<IIssueWriter, IssueWriterModel>(entity);
            // IssueWriter Properties
            // <None>
            // Related Objects
            model.IssueId = entity.IssueId;
            model.WriterId = entity.WriterId;
            // Return Entity
            return model;
        }

        public IIssueWriterModel MapToModelListing(IIssueWriter entity)
        {
            var model = EntityMapper.MapToModelListing<IIssueWriter, IssueWriterModel>(entity);
            // IssueWriter Properties
            // <None>
            // Related Objects
            model.IssueId = entity.IssueId;
            model.WriterId = entity.WriterId;
            // Return Entity
            return model;
        }

        public IIssueWriterSearchModel MapToSearchModel(IIssueWriterModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IIssueWriterModel, IssueWriterSearchModel>(model);
            // Search Properties
            searchModel.IssueId = model.IssueId;
            searchModel.IssueCustomKey = model.Issue?.CustomKey;
            searchModel.IssueName = model.Issue?.Name;
            searchModel.IssueDescription = model.Issue?.Description;
            searchModel.WriterId = model.WriterId;
            searchModel.WriterCustomKey = model.Writer?.CustomKey;
            searchModel.WriterName = model.Writer?.Name;
            searchModel.WriterDescription = model.Writer?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IIssueWriterModel model, IIssueWriter entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // IssueWriter Properties
                // <None>
                // Related Objects
                && model.IssueId == entity.IssueId
                && model.WriterId == entity.WriterId
                ;
        }
    }
}
