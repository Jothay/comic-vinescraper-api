// <auto-generated>
// <copyright file="Characters.ICharacterAppearedInIssueModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between CharacterAppearedInIssue and CharacterAppearedInIssueModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Characters
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class CharacterAppearedInIssueMapperExtensions
    {
        public static ICharacterAppearedInIssueMapper Mapper = new CharacterAppearedInIssueMapper();

        public static void OverrideMapper(ICharacterAppearedInIssueMapper mapper) { Mapper = mapper; }

        public static ICharacterAppearedInIssue MapToEntity(this ICharacterAppearedInIssueModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this ICharacterAppearedInIssueModel model, ref ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static ICharacterAppearedInIssueModel MapToModel(this ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static ICharacterAppearedInIssueModel MapToModelLite(this ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static ICharacterAppearedInIssueModel MapToModelListing(this ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static ICharacterAppearedInIssueSearchModel MapToSearchModel(this ICharacterAppearedInIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ICharacterAppearedInIssueModel model, ICharacterAppearedInIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class CharacterAppearedInIssueMapper : ICharacterAppearedInIssueMapper
    {
        public virtual ICharacterAppearedInIssue MapToEntity(ICharacterAppearedInIssueModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<CharacterAppearedInIssue, ICharacterAppearedInIssueModel>(model);
            // CharacterAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(ICharacterAppearedInIssueModel model, ref ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // CharacterAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual ICharacterAppearedInIssueModel MapToModel(ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<ICharacterAppearedInIssue, CharacterAppearedInIssueModel>(entity);
            // CharacterAppearedInIssue Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            model.AppearedInIssueId = entity.AppearedInIssueId;
            model.AppearedInIssue = entity.AppearedInIssue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual ICharacterAppearedInIssueModel MapToModelLite(ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<ICharacterAppearedInIssue, CharacterAppearedInIssueModel>(entity);
            // CharacterAppearedInIssue Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual ICharacterAppearedInIssueModel MapToModelListing(ICharacterAppearedInIssue entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<ICharacterAppearedInIssue, CharacterAppearedInIssueModel>(entity);
            // CharacterAppearedInIssue Properties
            // <None>
            // Related Objects
            model.CharacterId = entity.CharacterId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public virtual ICharacterAppearedInIssueSearchModel MapToSearchModel(ICharacterAppearedInIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ICharacterAppearedInIssueModel, CharacterAppearedInIssueSearchModel>(model);
            // Search Properties
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterApiDetailUrl = model.Character?.ApiDetailUrl;
            searchModel.CharacterSiteDetailUrl = model.Character?.SiteDetailUrl;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterShortDescription = model.Character?.ShortDescription;
            searchModel.CharacterDescription = model.Character?.Description;
            searchModel.AppearedInIssueId = model.AppearedInIssueId;
            searchModel.AppearedInIssueCustomKey = model.AppearedInIssue?.CustomKey;
            searchModel.AppearedInIssueApiDetailUrl = model.AppearedInIssue?.ApiDetailUrl;
            searchModel.AppearedInIssueSiteDetailUrl = model.AppearedInIssue?.SiteDetailUrl;
            searchModel.AppearedInIssueName = model.AppearedInIssue?.Name;
            searchModel.AppearedInIssueShortDescription = model.AppearedInIssue?.ShortDescription;
            searchModel.AppearedInIssueDescription = model.AppearedInIssue?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(ICharacterAppearedInIssueModel model, ICharacterAppearedInIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // CharacterAppearedInIssue Properties
                // <None>
                // Related Objects
                && model.CharacterId == entity.CharacterId
                && model.AppearedInIssueId == entity.AppearedInIssueId
                ;
        }
    }
}
