// <auto-generated>
// <copyright file="dbo.IPersonModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Person model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class PersonMapperExtensions
    {
        public static readonly PersonMapper Mapper = new PersonMapper();

        public static IPerson MapToEntity(this IPersonModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IPersonModel model, ref IPerson entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IPersonModel MapToModel(this IPerson entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IPersonModel MapToModelLite(this IPerson entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IPersonModel MapToModelListing(this IPerson entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IPersonSearchModel MapToSearchModel(this IPersonModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IPersonModel model, IPerson entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class PersonMapper : IPersonMapper
    {
        public IPerson MapToEntity(IPersonModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Person, IPersonModel>(model);
            // Person Properties
            entity.Hometown = model.Hometown;
            entity.Country = model.Country;
            entity.Email = model.Email;
            entity.Website = model.Website;
            entity.BirthDate = model.BirthDate;
            entity.DeathDate = model.DeathDate;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender.MapToEntity();
            // Associated Objects
            entity.CharactersCreated = model.CharactersCreated?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.IssueAppearances = model.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.IssueCredits = model.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.PersonAliases = model.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToEntity).Cast<PersonAlias>().ToList();
            entity.StoryArcCredits = model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.VolumeCredits = model.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(IPersonModel model, ref IPerson entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Person Properties
            entity.Hometown = model.Hometown;
            entity.Country = model.Country;
            entity.Email = model.Email;
            entity.Website = model.Website;
            entity.BirthDate = model.BirthDate;
            entity.DeathDate = model.DeathDate;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender.MapToEntity();
            // Associated Objects
            entity.CharactersCreated = (ICollection<ICharacter>)model.CharactersCreated?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.IssueAppearances = (ICollection<IIssue>)model.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>();
            entity.IssueCredits = (ICollection<IIssue>)model.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>();
            entity.PersonAliases = (ICollection<IPersonAlias>)model.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToEntity).Cast<PersonAlias>();
            entity.StoryArcCredits = (ICollection<IStoryArc>)model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>();
            entity.VolumeCredits = (ICollection<IVolume>)model.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>();
        }

        public IPersonModel MapToModel(IPerson entity)
        {
            var model = NameableEntityMapper.MapToModel<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile.MapToModel();
            model.GenderId = entity.GenderId;
            model.Gender = entity.Gender.MapToModel();
            // Associated Objects
            model.CharactersCreated = entity.CharactersCreated?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.IssueAppearances = entity.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModel).ToList();
            model.IssueCredits = entity.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModel).ToList();
            model.PersonAliases = entity.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToModel).ToList();
            model.StoryArcCredits = entity.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModel).ToList();
            model.VolumeCredits = entity.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToModel).ToList();
            // Return Entity
            return model;
        }

        public IPersonModel MapToModelLite(IPerson entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.GenderId = entity.GenderId;
            // Return Entity
            return model;
        }

        public IPersonModel MapToModelListing(IPerson entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.GenderId = entity.GenderId;
            // Return Entity
            return model;
        }

        public IPersonSearchModel MapToSearchModel(IPersonModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IPersonModel, PersonSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile.Description;
            searchModel.GenderId = model.GenderId;
            searchModel.GenderCustomKey = model.Gender.CustomKey;
            searchModel.GenderName = model.Gender.Name;
            searchModel.GenderDescription = model.Gender.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IPersonModel model, IPerson entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Person Properties
                && model.Hometown == entity.Hometown
                && model.Country == entity.Country
                && model.Email == entity.Email
                && model.Website == entity.Website
                && model.BirthDate == entity.BirthDate
                && model.DeathDate == entity.DeathDate
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.GenderId == entity.GenderId
                ;
        }
    }
}
