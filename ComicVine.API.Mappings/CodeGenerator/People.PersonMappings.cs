// <auto-generated>
// <copyright file="People.IPersonModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between Person and PersonModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.People
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class PersonMapperExtensions
    {
        public static IPersonMapper Mapper = new PersonMapper();

        public static void OverrideMapper(IPersonMapper mapper) { Mapper = mapper; }

        public static IPerson MapToEntity(this IPersonModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IPersonModel model, ref IPerson entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IPersonModel MapToModel(this IPerson entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IPersonModel MapToModelLite(this IPerson entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IPersonModel MapToModelListing(this IPerson entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IPersonSearchModel MapToSearchModel(this IPersonModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IPersonModel model, IPerson entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class PersonMapper : IPersonMapper
    {
        public virtual IPerson MapToEntity(IPersonModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Person, IPersonModel>(model);
            // Person Properties
            entity.Hometown = model.Hometown;
            entity.Country = model.Country;
            entity.Email = model.Email;
            entity.Website = model.Website;
            entity.BirthDate = model.BirthDate;
            entity.DeathDate = model.DeathDate;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender?.MapToEntity();
            // Associated Objects
            entity.CharactersCreated = model.CharactersCreated?.Where(i => i.Active).Select(CreatorCharacterMapperExtensions.MapToEntity).Cast<CreatorCharacter>().ToList();
            entity.PersonAliases = model.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToEntity).Cast<PersonAlias>().ToList();
            entity.IssuesWritten = model.IssuesWritten?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToEntity).Cast<IssueWriter>().ToList();
            entity.MoviesProduced = model.MoviesProduced?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToEntity).Cast<MovieProducer>().ToList();
            entity.MoviesWritten = model.MoviesWritten?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToEntity).Cast<MovieWriter>().ToList();
            entity.PromosWritten = model.PromosWritten?.Where(i => i.Active).Select(PromoMapperExtensions.MapToEntity).Cast<Promo>().ToList();
            entity.StoryArcsWritten = model.StoryArcsWritten?.Where(i => i.Active).Select(StoryArcWriterMapperExtensions.MapToEntity).Cast<StoryArcWriter>().ToList();
            entity.VolumesWritten = model.VolumesWritten?.Where(i => i.Active).Select(VolumeWriterMapperExtensions.MapToEntity).Cast<VolumeWriter>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IPersonModel model, ref IPerson entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Person Properties
            entity.Hometown = model.Hometown;
            entity.Country = model.Country;
            entity.Email = model.Email;
            entity.Website = model.Website;
            entity.BirthDate = model.BirthDate;
            entity.DeathDate = model.DeathDate;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.GenderId = model.GenderId;
            entity.Gender = (Gender)model.Gender?.MapToEntity();
            // Associated Objects
            entity.CharactersCreated = model.CharactersCreated?.Where(i => i.Active).Select(CreatorCharacterMapperExtensions.MapToEntity).ToList();
            entity.PersonAliases = model.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToEntity).ToList();
            entity.IssuesWritten = model.IssuesWritten?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToEntity).ToList();
            entity.MoviesProduced = model.MoviesProduced?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToEntity).ToList();
            entity.MoviesWritten = model.MoviesWritten?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToEntity).ToList();
            entity.PromosWritten = model.PromosWritten?.Where(i => i.Active).Select(PromoMapperExtensions.MapToEntity).ToList();
            entity.StoryArcsWritten = model.StoryArcsWritten?.Where(i => i.Active).Select(StoryArcWriterMapperExtensions.MapToEntity).ToList();
            entity.VolumesWritten = model.VolumesWritten?.Where(i => i.Active).Select(VolumeWriterMapperExtensions.MapToEntity).ToList();
        }

        public virtual IPersonModel MapToModel(IPerson entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            model.GenderId = entity.GenderId;
            model.Gender = entity.Gender?.MapToModel();
            // Associated Objects
            model.CharactersCreated = entity.CharactersCreated?.Where(i => i.Active).Select(CreatorCharacterMapperExtensions.MapToModelLite).ToList();
            model.PersonAliases = entity.PersonAliases?.Where(i => i.Active).Select(PersonAliasMapperExtensions.MapToModelLite).ToList();
            model.IssuesWritten = entity.IssuesWritten?.Where(i => i.Active).Select(IssueWriterMapperExtensions.MapToModelLite).ToList();
            model.MoviesProduced = entity.MoviesProduced?.Where(i => i.Active).Select(MovieProducerMapperExtensions.MapToModelLite).ToList();
            model.MoviesWritten = entity.MoviesWritten?.Where(i => i.Active).Select(MovieWriterMapperExtensions.MapToModelLite).ToList();
            model.PromosWritten = entity.PromosWritten?.Where(i => i.Active).Select(PromoMapperExtensions.MapToModelLite).ToList();
            model.StoryArcsWritten = entity.StoryArcsWritten?.Where(i => i.Active).Select(StoryArcWriterMapperExtensions.MapToModelLite).ToList();
            model.VolumesWritten = entity.VolumesWritten?.Where(i => i.Active).Select(VolumeWriterMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IPersonModel MapToModelLite(IPerson entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.GenderId = entity.GenderId;
            // Return Entity
            return model;
        }

        public virtual IPersonModel MapToModelListing(IPerson entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IPerson, PersonModel>(entity);
            // Person Properties
            model.Hometown = entity.Hometown;
            model.Country = entity.Country;
            model.Email = entity.Email;
            model.Website = entity.Website;
            model.BirthDate = entity.BirthDate;
            model.DeathDate = entity.DeathDate;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.GenderId = entity.GenderId;
            // Return Entity
            return model;
        }

        public virtual IPersonSearchModel MapToSearchModel(IPersonModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IPersonModel, PersonSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileApiDetailUrl = model.PrimaryImageFile?.ApiDetailUrl;
            searchModel.PrimaryImageFileSiteDetailUrl = model.PrimaryImageFile?.SiteDetailUrl;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileShortDescription = model.PrimaryImageFile?.ShortDescription;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.GenderId = model.GenderId;
            searchModel.GenderCustomKey = model.Gender?.CustomKey;
            searchModel.GenderApiDetailUrl = model.Gender?.ApiDetailUrl;
            searchModel.GenderSiteDetailUrl = model.Gender?.SiteDetailUrl;
            searchModel.GenderName = model.Gender?.Name;
            searchModel.GenderShortDescription = model.Gender?.ShortDescription;
            searchModel.GenderDescription = model.Gender?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IPersonModel model, IPerson entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Person Properties
                && model.Hometown == entity.Hometown
                && model.Country == entity.Country
                && model.Email == entity.Email
                && model.Website == entity.Website
                && model.BirthDate == entity.BirthDate
                && model.DeathDate == entity.DeathDate
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.GenderId == entity.GenderId
                ;
        }
    }
}
