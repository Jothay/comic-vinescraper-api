// <auto-generated>
// <copyright file="Objects.IObjectAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ObjectAppearedInIssueMapperExtensions
    {
        public static readonly ObjectAppearedInIssueMapper Mapper = new ObjectAppearedInIssueMapper();

        public static IObjectAppearedInIssue MapToEntity(this IObjectAppearedInIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IObjectAppearedInIssueModel model, ref IObjectAppearedInIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IObjectAppearedInIssueModel MapToModel(this IObjectAppearedInIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IObjectAppearedInIssueModel MapToModelLite(this IObjectAppearedInIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IObjectAppearedInIssueModel MapToModelListing(this IObjectAppearedInIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IObjectAppearedInIssueSearchModel MapToSearchModel(this IObjectAppearedInIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IObjectAppearedInIssueModel model, IObjectAppearedInIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ObjectAppearedInIssueMapper : IObjectAppearedInIssueMapper
    {
        public IObjectAppearedInIssue MapToEntity(IObjectAppearedInIssueModel model)
        {
            var entity = EntityMapper.MapToEntity<ObjectAppearedInIssue, IObjectAppearedInIssueModel>(model);
            // ObjectAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IObjectAppearedInIssueModel model, ref IObjectAppearedInIssue entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ObjectAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            entity.AppearedInIssueId = model.AppearedInIssueId;
            entity.AppearedInIssue = (Issue)model.AppearedInIssue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IObjectAppearedInIssueModel MapToModel(IObjectAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModel<IObjectAppearedInIssue, ObjectAppearedInIssueModel>(entity);
            // ObjectAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.Object = entity.Object?.MapToModel();
            model.AppearedInIssueId = entity.AppearedInIssueId;
            model.AppearedInIssue = entity.AppearedInIssue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IObjectAppearedInIssueModel MapToModelLite(IObjectAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelLite<IObjectAppearedInIssue, ObjectAppearedInIssueModel>(entity);
            // ObjectAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public IObjectAppearedInIssueModel MapToModelListing(IObjectAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelListing<IObjectAppearedInIssue, ObjectAppearedInIssueModel>(entity);
            // ObjectAppearedInIssue Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.AppearedInIssueId = entity.AppearedInIssueId;
            // Return Entity
            return model;
        }

        public IObjectAppearedInIssueSearchModel MapToSearchModel(IObjectAppearedInIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IObjectAppearedInIssueModel, ObjectAppearedInIssueSearchModel>(model);
            // Search Properties
            searchModel.ObjectId = model.ObjectId;
            searchModel.ObjectCustomKey = model.Object?.CustomKey;
            searchModel.ObjectName = model.Object?.Name;
            searchModel.ObjectDescription = model.Object?.Description;
            searchModel.AppearedInIssueId = model.AppearedInIssueId;
            searchModel.AppearedInIssueCustomKey = model.AppearedInIssue?.CustomKey;
            searchModel.AppearedInIssueName = model.AppearedInIssue?.Name;
            searchModel.AppearedInIssueDescription = model.AppearedInIssue?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IObjectAppearedInIssueModel model, IObjectAppearedInIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ObjectAppearedInIssue Properties
                // <None>
                // Related Objects
                && model.ObjectId == entity.ObjectId
                && model.AppearedInIssueId == entity.AppearedInIssueId
                ;
        }
    }
}
