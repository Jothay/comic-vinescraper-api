// <auto-generated>
// <copyright file="Volumes.IVolumeAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Volumes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class VolumeAliasMapperExtensions
    {
        public static readonly VolumeAliasMapper Mapper = new VolumeAliasMapper();

        public static IVolumeAlias MapToEntity(this IVolumeAliasModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IVolumeAliasModel model, ref IVolumeAlias entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IVolumeAliasModel MapToModel(this IVolumeAlias entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IVolumeAliasModel MapToModelLite(this IVolumeAlias entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IVolumeAliasModel MapToModelListing(this IVolumeAlias entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IVolumeAliasSearchModel MapToSearchModel(this IVolumeAliasModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IVolumeAliasModel model, IVolumeAlias entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class VolumeAliasMapper : IVolumeAliasMapper
    {
        public IVolumeAlias MapToEntity(IVolumeAliasModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<VolumeAlias, IVolumeAliasModel>(model);
            // VolumeAlias Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IVolumeAliasModel model, ref IVolumeAlias entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // VolumeAlias Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IVolumeAliasModel MapToModel(IVolumeAlias entity)
        {
            var model = NameableEntityMapper.MapToModel<IVolumeAlias, VolumeAliasModel>(entity);
            // VolumeAlias Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IVolumeAliasModel MapToModelLite(IVolumeAlias entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IVolumeAlias, VolumeAliasModel>(entity);
            // VolumeAlias Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public IVolumeAliasModel MapToModelListing(IVolumeAlias entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IVolumeAlias, VolumeAliasModel>(entity);
            // VolumeAlias Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            // Return Entity
            return model;
        }

        public IVolumeAliasSearchModel MapToSearchModel(IVolumeAliasModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IVolumeAliasModel, VolumeAliasSearchModel>(model);
            // Search Properties
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeDescription = model.Volume?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IVolumeAliasModel model, IVolumeAlias entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // VolumeAlias Properties
                // <None>
                // Related Objects
                && model.VolumeId == entity.VolumeId
                ;
        }
    }
}
