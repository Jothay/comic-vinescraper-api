<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)ComicVine.API.DataModel\bin\Debug\ComicVine.API.DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ComicVine.API.CodeGenerator" #>
<#@ import namespace="ComicVine.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateMappingFile(string nameSpace, classInfo entityClass)
{
	var hasProperties = false;
	var hasRelatedProperties = false;
	var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.I<#= thisClassName #>Model.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the <#= thisClassName #> model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.<#= nameSpace #>
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class <#= thisClassName #>MapperExtensions
    {
        public static readonly <#= thisClassName #>Mapper Mapper = new <#= thisClassName #>Mapper();

        public static I<#= thisClassName #> MapToEntity(this I<#= thisClassName #>Model model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this I<#= thisClassName #>Model model, ref I<#= thisClassName #> entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static I<#= thisClassName #>Model MapToModel(this I<#= thisClassName #> entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static I<#= thisClassName #>Model MapToModelLite(this I<#= thisClassName #> entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static I<#= thisClassName #>Model MapToModelListing(this I<#= thisClassName #> entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static I<#= thisClassName #>SearchModel MapToSearchModel(this I<#= thisClassName #>Model model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this I<#= thisClassName #>Model model, I<#= thisClassName #> entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class <#= thisClassName #>Mapper : I<#= thisClassName #>Mapper
    {
        public I<#= thisClassName #> MapToEntity(I<#= thisClassName #>Model model)
        {
            var entity = <#= baseClassNameNoShared #>EntityMapper.MapToEntity<<#= thisClassName #>, I<#= thisClassName #>Model>(model);
            // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
            entity.<#= property.name #> = model.<#= property.name #>;
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
            // <None>
<#+	} // End If (!hasProperties) #>
            // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
            entity.<#= property.name #> = model.<#= property.name #>;
<#+		} else {#>
            entity.<#= property.name #> = (<#= property.type.Replace("DataModel.", "") #>)model.<#= property.name #>?.MapToEntity();
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
            // <None>
<#+	} // End If (!hasRelatedProperties) #>
            // Associated Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsAssociatedObjectProperty(property, out propertyType)) { continue; }
		var type = propertyType.Replace("List<", "").Replace(">", "").Replace("DataModel.", "").Replace("Model", "");
		hasAssociatedProperties = true; #>
            entity.<#= property.name #> = model.<#= property.name #>?.Where(i => i.Active).Select(<#= type #>MapperExtensions.MapToEntity).Cast<<#= type #>>().ToList();
<#+	} // End Foreach loop (var property in entityClass.properties) // Associated #>
<#+	if (!hasAssociatedProperties) { #>
            // <None>
<#+	} // End If (!hasAssociatedProperties) #>
            // Return Entity
            return entity;
        }

        public void MapToEntity(I<#= thisClassName #>Model model, ref I<#= thisClassName #> entity)
        {
            // Assign Base properties
            <#= baseClassNameNoShared #>EntityMapper.MapToEntity(model, ref entity);
            // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
            entity.<#= property.name #> = model.<#= property.name #>;
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
            // <None>
<#+	} // End If (!hasProperties) #>
            // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
            entity.<#= property.name #> = model.<#= property.name #>;
<#+		} else {#>
            entity.<#= property.name #> = (<#= property.type.Replace("DataModel.", "") #>)model.<#= property.name #>?.MapToEntity();
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
            // <None>
<#+	} // End If (!hasRelatedProperties) #>
            // Associated Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsAssociatedObjectProperty(property, out propertyType)) { continue; }
		var type = propertyType.Replace("List<", "").Replace(">", "").Replace("DataModel.", "").Replace("Model", "");
		hasAssociatedProperties = true; #>
            entity.<#= property.name #> = (ICollection<I<#= type #>>)model.<#= property.name #>?.Where(i => i.Active).Select(<#= type #>MapperExtensions.MapToEntity).Cast<<#= type #>>();
<#+	} // End Foreach loop (var property in entityClass.properties) // Associated #>
<#+	if (!hasAssociatedProperties) { #>
            // <None>
<#+	} // End If (!hasAssociatedProperties) #>
        }

        public I<#= thisClassName #>Model MapToModel(I<#= thisClassName #> entity)
        {
            var model = <#= baseClassNameNoShared #>EntityMapper.MapToModel<I<#= thisClassName #>, <#= thisClassName #>Model>(entity);
            // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
            // <None>
<#+	} // End If (!hasProperties) #>
            // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+		} else {#>
            model.<#= property.name #> = entity.<#= property.name #>?.MapToModel();
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
            // <None>
<#+	} // End If (!hasRelatedProperties) #>
            // Associated Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsAssociatedObjectProperty(property, out propertyType)) { continue; }
		var type = propertyType.Replace("List<", "").Replace(">", "").Replace("DataModel.", "").Replace("Model", "");
		hasAssociatedProperties = true; #>
            model.<#= property.name #> = entity.<#= property.name #>?.Where(i => i.Active).Select(<#= type #>MapperExtensions.MapToModelLite).ToList();
<#+	} // End Foreach loop (var property in entityClass.properties) // Associated #>
<#+	if (!hasAssociatedProperties) { #>
            // <None>
<#+	} // End If (!hasAssociatedProperties) #>
            // Return Entity
            return model;
        }

        public I<#= thisClassName #>Model MapToModelLite(I<#= thisClassName #> entity)
        {
            var model = <#= baseClassNameNoShared #>EntityMapper.MapToModelLite<I<#= thisClassName #>, <#= thisClassName #>Model>(entity);
            // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
            // <None>
<#+	} // End If (!hasProperties) #>
            // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
            // <None>
<#+	} // End If (!hasRelatedProperties) #>
            // Return Entity
            return model;
        }

        public I<#= thisClassName #>Model MapToModelListing(I<#= thisClassName #> entity)
        {
            var model = <#= baseClassNameNoShared #>EntityMapper.MapToModelListing<I<#= thisClassName #>, <#= thisClassName #>Model>(entity);
            // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
            // <None>
<#+	} // End If (!hasProperties) #>
            // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
            model.<#= property.name #> = entity.<#= property.name #>;
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
            // <None>
<#+	} // End If (!hasRelatedProperties) #>
            // Return Entity
            return model;
        }

        public I<#= thisClassName #>SearchModel MapToSearchModel(I<#= thisClassName #>Model model)
        {
            var searchModel = <#= baseClassNameNoShared #>EntityMapper.MapToSearchModel<I<#= thisClassName #>Model, <#= thisClassName #>SearchModel>(model);
            // Search Properties
<#+	if (hasRelatedProperties) { #>
<#+		foreach (var property in entityClass.properties) {
			if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
			if (IsIdentifierProperty(property)) { #>
            searchModel.<#= property.name #> = model.<#= property.name #>;
<#+				if (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) { #>
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>CustomKey = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.CustomKey;
<#+				} // End If (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) #>
<#+				if (property.name == "RequiredLevelId") {#>
            searchmodel.LevelMin = model.Level;
            searchmodel.LevelMax = model.Level;
<#+				} // End If (property.name == "RequiredLevelId") #>
<#+			} // End If (IsIdentifierProperty(property)) #>
<#+			if (property.isNameable) { #>
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>Name = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.Name;
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>Description = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.Description;
<#+			} // End If (property.isNameable) #>
<#+			if (property.isContactable) { #>
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>Phone = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.Phone;
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>Fax = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.Fax;
            searchModel.<#= property.name.Replace("Id", "").Replace("ID", "") #>Email = model.<#= property.name.Replace("Id", "").Replace("ID", "") #>?.Email;
<#+			} // End If (property.isContactable) #>
<#+		} // End Foreach Loop (var property in entityClass.properties) // Related #>
<#+	} // End If (hasRelatedProperties) #>
<#+	foreach (var property in entityClass.properties) {
		if (!property.isFilterable) { continue; }
		var filterNameTitle = string.IsNullOrWhiteSpace(property.filterName) ? property.name : property.filterName;
		var filterName = string.IsNullOrWhiteSpace(property.filterName) ? property.name.ToLower() : property.filterName.ToLower();
		var filterDescription = string.IsNullOrWhiteSpace(property.filterDescription) ? string.Format("The {0} to search by.", property.name) : property.filterDescription; #>
<#+		if (property.type == "string") { #>
            searchModel.<#= filterNameTitle #> = model.<#= filterNameTitle #>;
<#+		} #>
<#+		if (property.type == "int" || property.type == "int?" || property.type == "bool" || property.type == "bool?" || property.type == "decimal" || property.type == "decimal?") { #>
            searchModel.<#= filterNameTitle #> = model.<#= filterNameTitle #>;
<#+		} #>
<#+	} // End ForEach Loop (var property in entityClass.properties) // Searchable #>
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(I<#= thisClassName #>Model model, I<#= thisClassName #> entity)
        {
            return <#= baseClassNameNoShared #>EntityMapper.AreEqual(model, entity)
                // <#= thisClassName #> Properties
<#+			if (!hasProperties) { #>
                // <None>
<#+			} else { #>
<#+				foreach (var property in entityClass.properties) {
					if (!IsClassProperty(property, out propertyType)) { continue; } #>
                && model.<#= property.name #> == entity.<#= property.name #>
<#+				} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+			} // End If (!hasProperties) #>
                // Related Objects
<#+			if (!hasRelatedProperties) { #>
                // <None>
<#+			} else { #>
<#+				foreach (var property in entityClass.properties) {
					if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
					if (property.name.StartsWith("RelatedObject")) { continue; } // This is pointed at another property
					if (IsIdentifierProperty(property)) { #>
                && model.<#= property.name #> == entity.<#= property.name #>
<#+					} // End If (IsIdentifierProperty(property)) #>
<#+				} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+			} // End If (!hasRelatedProperties) #>
                ;
        }
    }
}
<#+
} // End Function GenerateInterfaceFile
#>