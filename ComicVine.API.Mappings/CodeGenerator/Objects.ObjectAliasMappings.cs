// <auto-generated>
// <copyright file="Objects.IObjectAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ObjectAliasMapperExtensions
    {
        public static IObjectAliasMapper Mapper = new ObjectAliasMapper();

        public static void OverrideMapper(IObjectAliasMapper mapper) { Mapper = mapper; }

        public static IObjectAlias MapToEntity(this IObjectAliasModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IObjectAliasModel model, ref IObjectAlias entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IObjectAliasModel MapToModel(this IObjectAlias entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IObjectAliasModel MapToModelLite(this IObjectAlias entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IObjectAliasModel MapToModelListing(this IObjectAlias entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IObjectAliasSearchModel MapToSearchModel(this IObjectAliasModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IObjectAliasModel model, IObjectAlias entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ObjectAliasMapper : IObjectAliasMapper
    {
        public virtual IObjectAlias MapToEntity(IObjectAliasModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<ObjectAlias, IObjectAliasModel>(model);
            // ObjectAlias Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IObjectAliasModel model, ref IObjectAlias entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // ObjectAlias Properties
            // <None>
            // Related Objects
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IObjectAliasModel MapToModel(IObjectAlias entity)
        {
            var model = NameableEntityMapper.MapToModel<IObjectAlias, ObjectAliasModel>(entity);
            // ObjectAlias Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            model.Object = entity.Object?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IObjectAliasModel MapToModelLite(IObjectAlias entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IObjectAlias, ObjectAliasModel>(entity);
            // ObjectAlias Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            // Return Entity
            return model;
        }

        public virtual IObjectAliasModel MapToModelListing(IObjectAlias entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IObjectAlias, ObjectAliasModel>(entity);
            // ObjectAlias Properties
            // <None>
            // Related Objects
            model.ObjectId = entity.ObjectId;
            // Return Entity
            return model;
        }

        public virtual IObjectAliasSearchModel MapToSearchModel(IObjectAliasModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IObjectAliasModel, ObjectAliasSearchModel>(model);
            // Search Properties
            searchModel.ObjectId = model.ObjectId;
            searchModel.ObjectCustomKey = model.Object?.CustomKey;
            searchModel.ObjectApiDetailUrl = model.Object?.ApiDetailUrl;
            searchModel.ObjectSiteDetailUrl = model.Object?.SiteDetailUrl;
            searchModel.ObjectName = model.Object?.Name;
            searchModel.ObjectShortDescription = model.Object?.ShortDescription;
            searchModel.ObjectDescription = model.Object?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IObjectAliasModel model, IObjectAlias entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // ObjectAlias Properties
                // <None>
                // Related Objects
                && model.ObjectId == entity.ObjectId
                ;
        }
    }
}
