// <auto-generated>
// <copyright file="Locations.ILocationStoryArcModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationStoryArc model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Locations
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class LocationStoryArcMapperExtensions
    {
        public static readonly LocationStoryArcMapper Mapper = new LocationStoryArcMapper();

        public static ILocationStoryArc MapToEntity(this ILocationStoryArcModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ILocationStoryArcModel model, ref ILocationStoryArc entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ILocationStoryArcModel MapToModel(this ILocationStoryArc entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ILocationStoryArcModel MapToModelLite(this ILocationStoryArc entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ILocationStoryArcModel MapToModelListing(this ILocationStoryArc entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ILocationStoryArcSearchModel MapToSearchModel(this ILocationStoryArcModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ILocationStoryArcModel model, ILocationStoryArc entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class LocationStoryArcMapper : ILocationStoryArcMapper
    {
        public ILocationStoryArc MapToEntity(ILocationStoryArcModel model)
        {
            var entity = EntityMapper.MapToEntity<LocationStoryArc, ILocationStoryArcModel>(model);
            // LocationStoryArc Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.StoryArcId = model.StoryArcId;
            entity.StoryArc = (StoryArc)model.StoryArc?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ILocationStoryArcModel model, ref ILocationStoryArc entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // LocationStoryArc Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location?.MapToEntity();
            entity.StoryArcId = model.StoryArcId;
            entity.StoryArc = (StoryArc)model.StoryArc?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ILocationStoryArcModel MapToModel(ILocationStoryArc entity)
        {
            var model = EntityMapper.MapToModel<ILocationStoryArc, LocationStoryArcModel>(entity);
            // LocationStoryArc Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.Location = entity.Location?.MapToModel();
            model.StoryArcId = entity.StoryArcId;
            model.StoryArc = entity.StoryArc?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ILocationStoryArcModel MapToModelLite(ILocationStoryArc entity)
        {
            var model = EntityMapper.MapToModelLite<ILocationStoryArc, LocationStoryArcModel>(entity);
            // LocationStoryArc Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.StoryArcId = entity.StoryArcId;
            // Return Entity
            return model;
        }

        public ILocationStoryArcModel MapToModelListing(ILocationStoryArc entity)
        {
            var model = EntityMapper.MapToModelListing<ILocationStoryArc, LocationStoryArcModel>(entity);
            // LocationStoryArc Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.StoryArcId = entity.StoryArcId;
            // Return Entity
            return model;
        }

        public ILocationStoryArcSearchModel MapToSearchModel(ILocationStoryArcModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ILocationStoryArcModel, LocationStoryArcSearchModel>(model);
            // Search Properties
            searchModel.LocationId = model.LocationId;
            searchModel.LocationCustomKey = model.Location?.CustomKey;
            searchModel.LocationName = model.Location?.Name;
            searchModel.LocationDescription = model.Location?.Description;
            searchModel.StoryArcId = model.StoryArcId;
            searchModel.StoryArcCustomKey = model.StoryArc?.CustomKey;
            searchModel.StoryArcName = model.StoryArc?.Name;
            searchModel.StoryArcDescription = model.StoryArc?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ILocationStoryArcModel model, ILocationStoryArc entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // LocationStoryArc Properties
                // <None>
                // Related Objects
                && model.LocationId == entity.LocationId
                && model.StoryArcId == entity.StoryArcId
                ;
        }
    }
}
