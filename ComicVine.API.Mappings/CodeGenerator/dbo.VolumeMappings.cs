// <auto-generated>
// <copyright file="dbo.IVolumeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Volume model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class VolumeMapperExtensions
    {
        public static readonly VolumeMapper Mapper = new VolumeMapper();

        public static IVolume MapToEntity(this IVolumeModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IVolumeModel model, ref IVolume entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IVolumeModel MapToModel(this IVolume entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IVolumeModel MapToModelLite(this IVolume entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IVolumeModel MapToModelListing(this IVolume entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IVolumeSearchModel MapToSearchModel(this IVolumeModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IVolumeModel model, IVolume entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class VolumeMapper : IVolumeMapper
    {
        public IVolume MapToEntity(IVolumeModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Volume, IVolumeModel>(model);
            // Volume Properties
            entity.Startyear = model.Startyear;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.FirstIssueId = model.FirstIssueId;
            entity.FirstIssue = (Issue)model.FirstIssue.MapToEntity();
            entity.LastIssueId = model.LastIssueId;
            entity.LastIssue = (Issue)model.LastIssue.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher.MapToEntity();
            // Associated Objects
            entity.CharacterCredits = model.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.ConceptCredits = model.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>().ToList();
            entity.Issues = model.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.LocationCredits = model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>().ToList();
            entity.ObjectCredits = model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>().ToList();
            entity.PersonCredits = model.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>().ToList();
            entity.TeamCredits = model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            entity.VolumeAliases = model.VolumeAliases?.Where(i => i.Active).Select(VolumeAliasMapperExtensions.MapToEntity).Cast<VolumeAlias>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(IVolumeModel model, ref IVolume entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Volume Properties
            entity.Startyear = model.Startyear;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.FirstIssueId = model.FirstIssueId;
            entity.FirstIssue = (Issue)model.FirstIssue.MapToEntity();
            entity.LastIssueId = model.LastIssueId;
            entity.LastIssue = (Issue)model.LastIssue.MapToEntity();
            entity.PublisherId = model.PublisherId;
            entity.Publisher = (Publisher)model.Publisher.MapToEntity();
            // Associated Objects
            entity.CharacterCredits = (ICollection<ICharacter>)model.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.ConceptCredits = (ICollection<IConcept>)model.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>();
            entity.Issues = (ICollection<IIssue>)model.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>();
            entity.LocationCredits = (ICollection<ILocation>)model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>();
            entity.ObjectCredits = (ICollection<IObject>)model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>();
            entity.PersonCredits = (ICollection<IPerson>)model.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>();
            entity.TeamCredits = (ICollection<ITeam>)model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>();
            entity.VolumeAliases = (ICollection<IVolumeAlias>)model.VolumeAliases?.Where(i => i.Active).Select(VolumeAliasMapperExtensions.MapToEntity).Cast<VolumeAlias>();
        }

        public IVolumeModel MapToModel(IVolume entity)
        {
            var model = NameableEntityMapper.MapToModel<IVolume, VolumeModel>(entity);
            // Volume Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile.MapToModel();
            model.FirstIssueId = entity.FirstIssueId;
            model.FirstIssue = entity.FirstIssue.MapToModel();
            model.LastIssueId = entity.LastIssueId;
            model.LastIssue = entity.LastIssue.MapToModel();
            model.PublisherId = entity.PublisherId;
            model.Publisher = entity.Publisher.MapToModel();
            // Associated Objects
            model.CharacterCredits = entity.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.ConceptCredits = entity.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToModel).ToList();
            model.Issues = entity.Issues?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModel).ToList();
            model.LocationCredits = entity.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToModel).ToList();
            model.ObjectCredits = entity.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToModel).ToList();
            model.PersonCredits = entity.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToModel).ToList();
            model.TeamCredits = entity.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModel).ToList();
            model.VolumeAliases = entity.VolumeAliases?.Where(i => i.Active).Select(VolumeAliasMapperExtensions.MapToModel).ToList();
            // Return Entity
            return model;
        }

        public IVolumeModel MapToModelLite(IVolume entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IVolume, VolumeModel>(entity);
            // Volume Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueId = entity.FirstIssueId;
            model.LastIssueId = entity.LastIssueId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public IVolumeModel MapToModelListing(IVolume entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IVolume, VolumeModel>(entity);
            // Volume Properties
            model.Startyear = entity.Startyear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueId = entity.FirstIssueId;
            model.LastIssueId = entity.LastIssueId;
            model.PublisherId = entity.PublisherId;
            // Return Entity
            return model;
        }

        public IVolumeSearchModel MapToSearchModel(IVolumeModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IVolumeModel, VolumeSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile.Description;
            searchModel.FirstIssueId = model.FirstIssueId;
            searchModel.FirstIssueCustomKey = model.FirstIssue.CustomKey;
            searchModel.FirstIssueName = model.FirstIssue.Name;
            searchModel.FirstIssueDescription = model.FirstIssue.Description;
            searchModel.LastIssueId = model.LastIssueId;
            searchModel.LastIssueCustomKey = model.LastIssue.CustomKey;
            searchModel.LastIssueName = model.LastIssue.Name;
            searchModel.LastIssueDescription = model.LastIssue.Description;
            searchModel.PublisherId = model.PublisherId;
            searchModel.PublisherCustomKey = model.Publisher.CustomKey;
            searchModel.PublisherName = model.Publisher.Name;
            searchModel.PublisherDescription = model.Publisher.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IVolumeModel model, IVolume entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Volume Properties
                && model.Startyear == entity.Startyear
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.FirstIssueId == entity.FirstIssueId
                && model.LastIssueId == entity.LastIssueId
                && model.PublisherId == entity.PublisherId
                ;
        }
    }
}
