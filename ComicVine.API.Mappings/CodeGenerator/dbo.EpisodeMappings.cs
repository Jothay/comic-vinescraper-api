// <auto-generated>
// <copyright file="dbo.IEpisodeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Episode model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class EpisodeMapperExtensions
    {
        public static readonly EpisodeMapper Mapper = new EpisodeMapper();

        public static IEpisode MapToEntity(this IEpisodeModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IEpisodeModel model, ref IEpisode entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IEpisodeModel MapToModel(this IEpisode entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IEpisodeModel MapToModelLite(this IEpisode entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IEpisodeModel MapToModelListing(this IEpisode entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IEpisodeSearchModel MapToSearchModel(this IEpisodeModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IEpisodeModel model, IEpisode entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class EpisodeMapper : IEpisodeMapper
    {
        public IEpisode MapToEntity(IEpisodeModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Episode, IEpisodeModel>(model);
            // Episode Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.AirDate = model.AirDate;
            entity.EpisodeCode = model.EpisodeCode;
            entity.SeasonNumber = model.SeasonNumber;
            entity.EpisodeNumber = model.EpisodeNumber;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.SeriesId = model.SeriesId;
            entity.Series = (Series)model.Series.MapToEntity();
            // Associated Objects
            entity.EpisodeAliases = model.EpisodeAliases?.Where(i => i.Active).Select(EpisodeAliasMapperExtensions.MapToEntity).Cast<EpisodeAlias>().ToList();
            entity.CharacterCredits = model.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.CharactersDied = model.CharactersDied?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.ConceptCredits = model.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>().ToList();
            entity.LocationCredits = model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>().ToList();
            entity.ObjectCredits = model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>().ToList();
            entity.StoryArcCredits = model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.TeamCredits = model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            entity.PersonCredits = model.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>().ToList();
            entity.CharacterFirstAppearances = model.CharacterFirstAppearances?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>().ToList();
            entity.ConceptFirstAppearances = model.ConceptFirstAppearances?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>().ToList();
            entity.LocationFirstAppearances = model.LocationFirstAppearances?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>().ToList();
            entity.ObjectFirstAppearances = model.ObjectFirstAppearances?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>().ToList();
            entity.StoryArcFirstAppearances = model.StoryArcFirstAppearances?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.TeamFirstAppearances = model.TeamFirstAppearances?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(IEpisodeModel model, ref IEpisode entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Episode Properties
            entity.HasStaffReview = model.HasStaffReview;
            entity.AirDate = model.AirDate;
            entity.EpisodeCode = model.EpisodeCode;
            entity.SeasonNumber = model.SeasonNumber;
            entity.EpisodeNumber = model.EpisodeNumber;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            entity.SeriesId = model.SeriesId;
            entity.Series = (Series)model.Series.MapToEntity();
            // Associated Objects
            entity.EpisodeAliases = (ICollection<IEpisodeAlias>)model.EpisodeAliases?.Where(i => i.Active).Select(EpisodeAliasMapperExtensions.MapToEntity).Cast<EpisodeAlias>();
            entity.CharacterCredits = (ICollection<ICharacter>)model.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.CharactersDied = (ICollection<ICharacter>)model.CharactersDied?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.ConceptCredits = (ICollection<IConcept>)model.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>();
            entity.LocationCredits = (ICollection<ILocation>)model.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>();
            entity.ObjectCredits = (ICollection<IObject>)model.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>();
            entity.StoryArcCredits = (ICollection<IStoryArc>)model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>();
            entity.TeamCredits = (ICollection<ITeam>)model.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>();
            entity.PersonCredits = (ICollection<IPerson>)model.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToEntity).Cast<Person>();
            entity.CharacterFirstAppearances = (ICollection<ICharacter>)model.CharacterFirstAppearances?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToEntity).Cast<Character>();
            entity.ConceptFirstAppearances = (ICollection<IConcept>)model.ConceptFirstAppearances?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToEntity).Cast<Concept>();
            entity.LocationFirstAppearances = (ICollection<ILocation>)model.LocationFirstAppearances?.Where(i => i.Active).Select(LocationMapperExtensions.MapToEntity).Cast<Location>();
            entity.ObjectFirstAppearances = (ICollection<IObject>)model.ObjectFirstAppearances?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToEntity).Cast<Object>();
            entity.StoryArcFirstAppearances = (ICollection<IStoryArc>)model.StoryArcFirstAppearances?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>();
            entity.TeamFirstAppearances = (ICollection<ITeam>)model.TeamFirstAppearances?.Where(i => i.Active).Select(TeamMapperExtensions.MapToEntity).Cast<Team>();
        }

        public IEpisodeModel MapToModel(IEpisode entity)
        {
            var model = NameableEntityMapper.MapToModel<IEpisode, EpisodeModel>(entity);
            // Episode Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.AirDate = entity.AirDate;
            model.EpisodeCode = entity.EpisodeCode;
            model.SeasonNumber = entity.SeasonNumber;
            model.EpisodeNumber = entity.EpisodeNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile.MapToModel();
            model.SeriesId = entity.SeriesId;
            model.Series = entity.Series.MapToModel();
            // Associated Objects
            model.EpisodeAliases = entity.EpisodeAliases?.Where(i => i.Active).Select(EpisodeAliasMapperExtensions.MapToModel).ToList();
            model.CharacterCredits = entity.CharacterCredits?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.CharactersDied = entity.CharactersDied?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.ConceptCredits = entity.ConceptCredits?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToModel).ToList();
            model.LocationCredits = entity.LocationCredits?.Where(i => i.Active).Select(LocationMapperExtensions.MapToModel).ToList();
            model.ObjectCredits = entity.ObjectCredits?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToModel).ToList();
            model.StoryArcCredits = entity.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModel).ToList();
            model.TeamCredits = entity.TeamCredits?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModel).ToList();
            model.PersonCredits = entity.PersonCredits?.Where(i => i.Active).Select(PersonMapperExtensions.MapToModel).ToList();
            model.CharacterFirstAppearances = entity.CharacterFirstAppearances?.Where(i => i.Active).Select(CharacterMapperExtensions.MapToModel).ToList();
            model.ConceptFirstAppearances = entity.ConceptFirstAppearances?.Where(i => i.Active).Select(ConceptMapperExtensions.MapToModel).ToList();
            model.LocationFirstAppearances = entity.LocationFirstAppearances?.Where(i => i.Active).Select(LocationMapperExtensions.MapToModel).ToList();
            model.ObjectFirstAppearances = entity.ObjectFirstAppearances?.Where(i => i.Active).Select(ObjectMapperExtensions.MapToModel).ToList();
            model.StoryArcFirstAppearances = entity.StoryArcFirstAppearances?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModel).ToList();
            model.TeamFirstAppearances = entity.TeamFirstAppearances?.Where(i => i.Active).Select(TeamMapperExtensions.MapToModel).ToList();
            // Return Entity
            return model;
        }

        public IEpisodeModel MapToModelLite(IEpisode entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IEpisode, EpisodeModel>(entity);
            // Episode Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.AirDate = entity.AirDate;
            model.EpisodeCode = entity.EpisodeCode;
            model.SeasonNumber = entity.SeasonNumber;
            model.EpisodeNumber = entity.EpisodeNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.SeriesId = entity.SeriesId;
            // Return Entity
            return model;
        }

        public IEpisodeModel MapToModelListing(IEpisode entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IEpisode, EpisodeModel>(entity);
            // Episode Properties
            model.HasStaffReview = entity.HasStaffReview;
            model.AirDate = entity.AirDate;
            model.EpisodeCode = entity.EpisodeCode;
            model.SeasonNumber = entity.SeasonNumber;
            model.EpisodeNumber = entity.EpisodeNumber;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.SeriesId = entity.SeriesId;
            // Return Entity
            return model;
        }

        public IEpisodeSearchModel MapToSearchModel(IEpisodeModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IEpisodeModel, EpisodeSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile.Description;
            searchModel.SeriesId = model.SeriesId;
            searchModel.SeriesCustomKey = model.Series.CustomKey;
            searchModel.SeriesName = model.Series.Name;
            searchModel.SeriesDescription = model.Series.Description;
            searchModel.HasStaffReview = model.HasStaffReview;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IEpisodeModel model, IEpisode entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Episode Properties
                && model.HasStaffReview == entity.HasStaffReview
                && model.AirDate == entity.AirDate
                && model.EpisodeCode == entity.EpisodeCode
                && model.SeasonNumber == entity.SeasonNumber
                && model.EpisodeNumber == entity.EpisodeNumber
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.SeriesId == entity.SeriesId
                ;
        }
    }
}
