// <auto-generated>
// <copyright file="Teams.ITeamStoryArcModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamStoryArc model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamStoryArcMapperExtensions
    {
        public static readonly TeamStoryArcMapper Mapper = new TeamStoryArcMapper();

        public static ITeamStoryArc MapToEntity(this ITeamStoryArcModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamStoryArcModel model, ref ITeamStoryArc entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamStoryArcModel MapToModel(this ITeamStoryArc entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamStoryArcModel MapToModelLite(this ITeamStoryArc entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamStoryArcModel MapToModelListing(this ITeamStoryArc entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamStoryArcSearchModel MapToSearchModel(this ITeamStoryArcModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamStoryArcModel model, ITeamStoryArc entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamStoryArcMapper : ITeamStoryArcMapper
    {
        public ITeamStoryArc MapToEntity(ITeamStoryArcModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamStoryArc, ITeamStoryArcModel>(model);
            // TeamStoryArc Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.StoryArcId = model.StoryArcId;
            entity.StoryArc = (StoryArc)model.StoryArc?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ITeamStoryArcModel model, ref ITeamStoryArc entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamStoryArc Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.StoryArcId = model.StoryArcId;
            entity.StoryArc = (StoryArc)model.StoryArc?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ITeamStoryArcModel MapToModel(ITeamStoryArc entity)
        {
            var model = EntityMapper.MapToModel<ITeamStoryArc, TeamStoryArcModel>(entity);
            // TeamStoryArc Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.StoryArcId = entity.StoryArcId;
            model.StoryArc = entity.StoryArc?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ITeamStoryArcModel MapToModelLite(ITeamStoryArc entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamStoryArc, TeamStoryArcModel>(entity);
            // TeamStoryArc Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.StoryArcId = entity.StoryArcId;
            // Return Entity
            return model;
        }

        public ITeamStoryArcModel MapToModelListing(ITeamStoryArc entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamStoryArc, TeamStoryArcModel>(entity);
            // TeamStoryArc Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.StoryArcId = entity.StoryArcId;
            // Return Entity
            return model;
        }

        public ITeamStoryArcSearchModel MapToSearchModel(ITeamStoryArcModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamStoryArcModel, TeamStoryArcSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.StoryArcId = model.StoryArcId;
            searchModel.StoryArcCustomKey = model.StoryArc?.CustomKey;
            searchModel.StoryArcName = model.StoryArc?.Name;
            searchModel.StoryArcDescription = model.StoryArc?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ITeamStoryArcModel model, ITeamStoryArc entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamStoryArc Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.StoryArcId == entity.StoryArcId
                ;
        }
    }
}
