// <auto-generated>
// <copyright file="Concepts.IConceptModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Concept model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptMapperExtensions
    {
        public static IConceptMapper Mapper = new ConceptMapper();

        public static void OverrideMapper(IConceptMapper mapper) { Mapper = mapper; }

        public static IConcept MapToEntity(this IConceptModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IConceptModel model, ref IConcept entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IConceptModel MapToModel(this IConcept entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IConceptModel MapToModelLite(this IConcept entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IConceptModel MapToModelListing(this IConcept entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IConceptSearchModel MapToSearchModel(this IConceptModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptModel model, IConcept entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptMapper : IConceptMapper
    {
        public virtual IConcept MapToEntity(IConceptModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Concept, IConceptModel>(model);
            // Concept Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            // Associated Objects
            entity.ConceptAliases = model.ConceptAliases?.Where(i => i.Active).Select(ConceptAliasMapperExtensions.MapToEntity).Cast<ConceptAlias>().ToList();
            entity.ConceptIssuesAppearedIn = model.ConceptIssuesAppearedIn?.Where(i => i.Active).Select(ConceptAppearedInIssueMapperExtensions.MapToEntity).Cast<ConceptAppearedInIssue>().ToList();
            entity.ConceptIssues = model.ConceptIssues?.Where(i => i.Active).Select(ConceptIssueMapperExtensions.MapToEntity).Cast<ConceptIssue>().ToList();
            entity.ConceptMovies = model.ConceptMovies?.Where(i => i.Active).Select(ConceptMovieMapperExtensions.MapToEntity).Cast<ConceptMovie>().ToList();
            entity.ConceptVolumes = model.ConceptVolumes?.Where(i => i.Active).Select(ConceptVolumeMapperExtensions.MapToEntity).Cast<ConceptVolume>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IConceptModel model, ref IConcept entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Concept Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            // Associated Objects
            entity.ConceptAliases = model.ConceptAliases?.Where(i => i.Active).Select(ConceptAliasMapperExtensions.MapToEntity).ToList();
            entity.ConceptIssuesAppearedIn = model.ConceptIssuesAppearedIn?.Where(i => i.Active).Select(ConceptAppearedInIssueMapperExtensions.MapToEntity).ToList();
            entity.ConceptIssues = model.ConceptIssues?.Where(i => i.Active).Select(ConceptIssueMapperExtensions.MapToEntity).ToList();
            entity.ConceptMovies = model.ConceptMovies?.Where(i => i.Active).Select(ConceptMovieMapperExtensions.MapToEntity).ToList();
            entity.ConceptVolumes = model.ConceptVolumes?.Where(i => i.Active).Select(ConceptVolumeMapperExtensions.MapToEntity).ToList();
        }

        public virtual IConceptModel MapToModel(IConcept entity)
        {
            var model = NameableEntityMapper.MapToModel<IConcept, ConceptModel>(entity);
            // Concept Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.FirstIssueAppearance = entity.FirstIssueAppearance?.MapToModel();
            // Associated Objects
            model.ConceptAliases = entity.ConceptAliases?.Where(i => i.Active).Select(ConceptAliasMapperExtensions.MapToModelLite).ToList();
            model.ConceptIssuesAppearedIn = entity.ConceptIssuesAppearedIn?.Where(i => i.Active).Select(ConceptAppearedInIssueMapperExtensions.MapToModelLite).ToList();
            model.ConceptIssues = entity.ConceptIssues?.Where(i => i.Active).Select(ConceptIssueMapperExtensions.MapToModelLite).ToList();
            model.ConceptMovies = entity.ConceptMovies?.Where(i => i.Active).Select(ConceptMovieMapperExtensions.MapToModelLite).ToList();
            model.ConceptVolumes = entity.ConceptVolumes?.Where(i => i.Active).Select(ConceptVolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IConceptModel MapToModelLite(IConcept entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IConcept, ConceptModel>(entity);
            // Concept Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            // Return Entity
            return model;
        }

        public virtual IConceptModel MapToModelListing(IConcept entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IConcept, ConceptModel>(entity);
            // Concept Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            // Return Entity
            return model;
        }

        public virtual IConceptSearchModel MapToSearchModel(IConceptModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IConceptModel, ConceptSearchModel>(model);
            // Search Properties
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileApiDetailUrl = model.PrimaryImageFile?.ApiDetailUrl;
            searchModel.PrimaryImageFileSiteDetailUrl = model.PrimaryImageFile?.SiteDetailUrl;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileShortDescription = model.PrimaryImageFile?.ShortDescription;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            searchModel.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            searchModel.FirstIssueAppearanceCustomKey = model.FirstIssueAppearance?.CustomKey;
            searchModel.FirstIssueAppearanceApiDetailUrl = model.FirstIssueAppearance?.ApiDetailUrl;
            searchModel.FirstIssueAppearanceSiteDetailUrl = model.FirstIssueAppearance?.SiteDetailUrl;
            searchModel.FirstIssueAppearanceName = model.FirstIssueAppearance?.Name;
            searchModel.FirstIssueAppearanceShortDescription = model.FirstIssueAppearance?.ShortDescription;
            searchModel.FirstIssueAppearanceDescription = model.FirstIssueAppearance?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IConceptModel model, IConcept entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Concept Properties
                && model.StartYear == entity.StartYear
                // Related Objects
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                && model.FirstIssueAppearanceId == entity.FirstIssueAppearanceId
                ;
        }
    }
}
