// <auto-generated>
// <copyright file="Objects.IObjectModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between Object and ObjectModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ObjectMapperExtensions
    {
        public static IObjectMapper Mapper = new ObjectMapper();

        public static void OverrideMapper(IObjectMapper mapper) { Mapper = mapper; }

        public static IObject MapToEntity(this IObjectModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IObjectModel model, ref IObject entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IObjectModel MapToModel(this IObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IObjectModel MapToModelLite(this IObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IObjectModel MapToModelListing(this IObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IObjectSearchModel MapToSearchModel(this IObjectModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IObjectModel model, IObject entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ObjectMapper : IObjectMapper
    {
        public virtual IObject MapToEntity(IObjectModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = NameableEntityMapper.MapToEntity<Object, IObjectModel>(model);
            // Object Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.ObjectAliases = model.ObjectAliases?.Where(i => i.Active).Select(ObjectAliasMapperExtensions.MapToEntity).Cast<ObjectAlias>().ToList();
            entity.ObjectIssuesAppearedIn = model.ObjectIssuesAppearedIn?.Where(i => i.Active).Select(ObjectAppearedInIssueMapperExtensions.MapToEntity).Cast<ObjectAppearedInIssue>().ToList();
            entity.ObjectIssues = model.ObjectIssues?.Where(i => i.Active).Select(ObjectIssueMapperExtensions.MapToEntity).Cast<ObjectIssue>().ToList();
            entity.ObjectMovies = model.ObjectMovies?.Where(i => i.Active).Select(ObjectMovieMapperExtensions.MapToEntity).Cast<ObjectMovie>().ToList();
            entity.ObjectStoryArcs = model.ObjectStoryArcs?.Where(i => i.Active).Select(ObjectStoryArcMapperExtensions.MapToEntity).Cast<ObjectStoryArc>().ToList();
            entity.ObjectVolumes = model.ObjectVolumes?.Where(i => i.Active).Select(ObjectVolumeMapperExtensions.MapToEntity).Cast<ObjectVolume>().ToList();
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IObjectModel model, ref IObject entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Object Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance?.MapToEntity();
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile?.MapToEntity();
            // Associated Objects
            entity.ObjectAliases = model.ObjectAliases?.Where(i => i.Active).Select(ObjectAliasMapperExtensions.MapToEntity).ToList();
            entity.ObjectIssuesAppearedIn = model.ObjectIssuesAppearedIn?.Where(i => i.Active).Select(ObjectAppearedInIssueMapperExtensions.MapToEntity).ToList();
            entity.ObjectIssues = model.ObjectIssues?.Where(i => i.Active).Select(ObjectIssueMapperExtensions.MapToEntity).ToList();
            entity.ObjectMovies = model.ObjectMovies?.Where(i => i.Active).Select(ObjectMovieMapperExtensions.MapToEntity).ToList();
            entity.ObjectStoryArcs = model.ObjectStoryArcs?.Where(i => i.Active).Select(ObjectStoryArcMapperExtensions.MapToEntity).ToList();
            entity.ObjectVolumes = model.ObjectVolumes?.Where(i => i.Active).Select(ObjectVolumeMapperExtensions.MapToEntity).ToList();
        }

        public virtual IObjectModel MapToModel(IObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModel<IObject, ObjectModel>(entity);
            // Object Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.FirstIssueAppearance = entity.FirstIssueAppearance?.MapToModel();
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile?.MapToModel();
            // Associated Objects
            model.ObjectAliases = entity.ObjectAliases?.Where(i => i.Active).Select(ObjectAliasMapperExtensions.MapToModelLite).ToList();
            model.ObjectIssuesAppearedIn = entity.ObjectIssuesAppearedIn?.Where(i => i.Active).Select(ObjectAppearedInIssueMapperExtensions.MapToModelLite).ToList();
            model.ObjectIssues = entity.ObjectIssues?.Where(i => i.Active).Select(ObjectIssueMapperExtensions.MapToModelLite).ToList();
            model.ObjectMovies = entity.ObjectMovies?.Where(i => i.Active).Select(ObjectMovieMapperExtensions.MapToModelLite).ToList();
            model.ObjectStoryArcs = entity.ObjectStoryArcs?.Where(i => i.Active).Select(ObjectStoryArcMapperExtensions.MapToModelLite).ToList();
            model.ObjectVolumes = entity.ObjectVolumes?.Where(i => i.Active).Select(ObjectVolumeMapperExtensions.MapToModelLite).ToList();
            // Return Entity
            return model;
        }

        public virtual IObjectModel MapToModelLite(IObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelLite<IObject, ObjectModel>(entity);
            // Object Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public virtual IObjectModel MapToModelListing(IObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = NameableEntityMapper.MapToModelListing<IObject, ObjectModel>(entity);
            // Object Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public virtual IObjectSearchModel MapToSearchModel(IObjectModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IObjectModel, ObjectSearchModel>(model);
            // Search Properties
            searchModel.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            searchModel.FirstIssueAppearanceCustomKey = model.FirstIssueAppearance?.CustomKey;
            searchModel.FirstIssueAppearanceApiDetailUrl = model.FirstIssueAppearance?.ApiDetailUrl;
            searchModel.FirstIssueAppearanceSiteDetailUrl = model.FirstIssueAppearance?.SiteDetailUrl;
            searchModel.FirstIssueAppearanceName = model.FirstIssueAppearance?.Name;
            searchModel.FirstIssueAppearanceShortDescription = model.FirstIssueAppearance?.ShortDescription;
            searchModel.FirstIssueAppearanceDescription = model.FirstIssueAppearance?.Description;
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile?.CustomKey;
            searchModel.PrimaryImageFileApiDetailUrl = model.PrimaryImageFile?.ApiDetailUrl;
            searchModel.PrimaryImageFileSiteDetailUrl = model.PrimaryImageFile?.SiteDetailUrl;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile?.Name;
            searchModel.PrimaryImageFileShortDescription = model.PrimaryImageFile?.ShortDescription;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IObjectModel model, IObject entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Object Properties
                && model.StartYear == entity.StartYear
                // Related Objects
                && model.FirstIssueAppearanceId == entity.FirstIssueAppearanceId
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                ;
        }
    }
}
