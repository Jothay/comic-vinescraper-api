// <auto-generated>
// <copyright file="dbo.ILocationModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Location model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class LocationMapperExtensions
    {
        public static readonly LocationMapper Mapper = new LocationMapper();

        public static ILocation MapToEntity(this ILocationModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ILocationModel model, ref ILocation entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ILocationModel MapToModel(this ILocation entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ILocationModel MapToModelLite(this ILocation entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ILocationModel MapToModelListing(this ILocation entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ILocationSearchModel MapToSearchModel(this ILocationModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ILocationModel model, ILocation entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class LocationMapper : ILocationMapper
    {
        public ILocation MapToEntity(ILocationModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Location, ILocationModel>(model);
            // Location Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance.MapToEntity();
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            // Associated Objects
            entity.LocationAliases = model.LocationAliases?.Where(i => i.Active).Select(LocationAliasMapperExtensions.MapToEntity).Cast<LocationAlias>().ToList();
            entity.IssueAppearances = model.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.IssueCredits = model.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>().ToList();
            entity.Movies = model.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToEntity).Cast<Movie>().ToList();
            entity.StoryArcCredits = model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>().ToList();
            entity.VolumeCredits = model.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>().ToList();
            // Return Entity
            return entity;
        }

        public void MapToEntity(ILocationModel model, ref ILocation entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Location Properties
            entity.StartYear = model.StartYear;
            // Related Objects
            entity.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            entity.FirstIssueAppearance = (Issue)model.FirstIssueAppearance.MapToEntity();
            entity.PrimaryImageFileId = model.PrimaryImageFileId;
            entity.PrimaryImageFile = (ImageFile)model.PrimaryImageFile.MapToEntity();
            // Associated Objects
            entity.LocationAliases = (ICollection<ILocationAlias>)model.LocationAliases?.Where(i => i.Active).Select(LocationAliasMapperExtensions.MapToEntity).Cast<LocationAlias>();
            entity.IssueAppearances = (ICollection<IIssue>)model.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>();
            entity.IssueCredits = (ICollection<IIssue>)model.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToEntity).Cast<Issue>();
            entity.Movies = (ICollection<IMovie>)model.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToEntity).Cast<Movie>();
            entity.StoryArcCredits = (ICollection<IStoryArc>)model.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToEntity).Cast<StoryArc>();
            entity.VolumeCredits = (ICollection<IVolume>)model.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToEntity).Cast<Volume>();
        }

        public ILocationModel MapToModel(ILocation entity)
        {
            var model = NameableEntityMapper.MapToModel<ILocation, LocationModel>(entity);
            // Location Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.FirstIssueAppearance = entity.FirstIssueAppearance.MapToModel();
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            model.PrimaryImageFile = entity.PrimaryImageFile.MapToModel();
            // Associated Objects
            model.LocationAliases = entity.LocationAliases?.Where(i => i.Active).Select(LocationAliasMapperExtensions.MapToModel).ToList();
            model.IssueAppearances = entity.IssueAppearances?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModel).ToList();
            model.IssueCredits = entity.IssueCredits?.Where(i => i.Active).Select(IssueMapperExtensions.MapToModel).ToList();
            model.Movies = entity.Movies?.Where(i => i.Active).Select(MovieMapperExtensions.MapToModel).ToList();
            model.StoryArcCredits = entity.StoryArcCredits?.Where(i => i.Active).Select(StoryArcMapperExtensions.MapToModel).ToList();
            model.VolumeCredits = entity.VolumeCredits?.Where(i => i.Active).Select(VolumeMapperExtensions.MapToModel).ToList();
            // Return Entity
            return model;
        }

        public ILocationModel MapToModelLite(ILocation entity)
        {
            var model = NameableEntityMapper.MapToModelLite<ILocation, LocationModel>(entity);
            // Location Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public ILocationModel MapToModelListing(ILocation entity)
        {
            var model = NameableEntityMapper.MapToModelListing<ILocation, LocationModel>(entity);
            // Location Properties
            model.StartYear = entity.StartYear;
            // Related Objects
            model.FirstIssueAppearanceId = entity.FirstIssueAppearanceId;
            model.PrimaryImageFileId = entity.PrimaryImageFileId;
            // Return Entity
            return model;
        }

        public ILocationSearchModel MapToSearchModel(ILocationModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<ILocationModel, LocationSearchModel>(model);
            // Search Properties
            searchModel.FirstIssueAppearanceId = model.FirstIssueAppearanceId;
            searchModel.FirstIssueAppearanceCustomKey = model.FirstIssueAppearance.CustomKey;
            searchModel.FirstIssueAppearanceName = model.FirstIssueAppearance.Name;
            searchModel.FirstIssueAppearanceDescription = model.FirstIssueAppearance.Description;
            searchModel.PrimaryImageFileId = model.PrimaryImageFileId;
            searchModel.PrimaryImageFileCustomKey = model.PrimaryImageFile.CustomKey;
            searchModel.PrimaryImageFileName = model.PrimaryImageFile.Name;
            searchModel.PrimaryImageFileDescription = model.PrimaryImageFile.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ILocationModel model, ILocation entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Location Properties
                && model.StartYear == entity.StartYear
                // Related Objects
                && model.FirstIssueAppearanceId == entity.FirstIssueAppearanceId
                && model.PrimaryImageFileId == entity.PrimaryImageFileId
                ;
        }
    }
}
