// <auto-generated>
// <copyright file="Volumes.IVolumeCharacterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeCharacter model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Volumes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class VolumeCharacterMapperExtensions
    {
        public static readonly VolumeCharacterMapper Mapper = new VolumeCharacterMapper();

        public static IVolumeCharacter MapToEntity(this IVolumeCharacterModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IVolumeCharacterModel model, ref IVolumeCharacter entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IVolumeCharacterModel MapToModel(this IVolumeCharacter entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IVolumeCharacterModel MapToModelLite(this IVolumeCharacter entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IVolumeCharacterModel MapToModelListing(this IVolumeCharacter entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IVolumeCharacterSearchModel MapToSearchModel(this IVolumeCharacterModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IVolumeCharacterModel model, IVolumeCharacter entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class VolumeCharacterMapper : IVolumeCharacterMapper
    {
        public IVolumeCharacter MapToEntity(IVolumeCharacterModel model)
        {
            var entity = EntityMapper.MapToEntity<VolumeCharacter, IVolumeCharacterModel>(model);
            // VolumeCharacter Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IVolumeCharacterModel model, ref IVolumeCharacter entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // VolumeCharacter Properties
            // <None>
            // Related Objects
            entity.VolumeId = model.VolumeId;
            entity.Volume = (Volume)model.Volume?.MapToEntity();
            entity.CharacterId = model.CharacterId;
            entity.Character = (Character)model.Character?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IVolumeCharacterModel MapToModel(IVolumeCharacter entity)
        {
            var model = EntityMapper.MapToModel<IVolumeCharacter, VolumeCharacterModel>(entity);
            // VolumeCharacter Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.Volume = entity.Volume?.MapToModel();
            model.CharacterId = entity.CharacterId;
            model.Character = entity.Character?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IVolumeCharacterModel MapToModelLite(IVolumeCharacter entity)
        {
            var model = EntityMapper.MapToModelLite<IVolumeCharacter, VolumeCharacterModel>(entity);
            // VolumeCharacter Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public IVolumeCharacterModel MapToModelListing(IVolumeCharacter entity)
        {
            var model = EntityMapper.MapToModelListing<IVolumeCharacter, VolumeCharacterModel>(entity);
            // VolumeCharacter Properties
            // <None>
            // Related Objects
            model.VolumeId = entity.VolumeId;
            model.CharacterId = entity.CharacterId;
            // Return Entity
            return model;
        }

        public IVolumeCharacterSearchModel MapToSearchModel(IVolumeCharacterModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IVolumeCharacterModel, VolumeCharacterSearchModel>(model);
            // Search Properties
            searchModel.VolumeId = model.VolumeId;
            searchModel.VolumeCustomKey = model.Volume?.CustomKey;
            searchModel.VolumeName = model.Volume?.Name;
            searchModel.VolumeDescription = model.Volume?.Description;
            searchModel.CharacterId = model.CharacterId;
            searchModel.CharacterCustomKey = model.Character?.CustomKey;
            searchModel.CharacterName = model.Character?.Name;
            searchModel.CharacterDescription = model.Character?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IVolumeCharacterModel model, IVolumeCharacter entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // VolumeCharacter Properties
                // <None>
                // Related Objects
                && model.VolumeId == entity.VolumeId
                && model.CharacterId == entity.CharacterId
                ;
        }
    }
}
