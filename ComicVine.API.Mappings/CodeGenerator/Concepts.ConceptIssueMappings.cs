// <auto-generated>
// <copyright file="Concepts.IConceptIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Concepts
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ConceptIssueMapperExtensions
    {
        public static readonly ConceptIssueMapper Mapper = new ConceptIssueMapper();

        public static IConceptIssue MapToEntity(this IConceptIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IConceptIssueModel model, ref IConceptIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IConceptIssueModel MapToModel(this IConceptIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IConceptIssueModel MapToModelLite(this IConceptIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IConceptIssueModel MapToModelListing(this IConceptIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IConceptIssueSearchModel MapToSearchModel(this IConceptIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IConceptIssueModel model, IConceptIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ConceptIssueMapper : IConceptIssueMapper
    {
        public IConceptIssue MapToEntity(IConceptIssueModel model)
        {
            var entity = EntityMapper.MapToEntity<ConceptIssue, IConceptIssueModel>(model);
            // ConceptIssue Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IConceptIssueModel model, ref IConceptIssue entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // ConceptIssue Properties
            // <None>
            // Related Objects
            entity.ConceptId = model.ConceptId;
            entity.Concept = (Concept)model.Concept?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public IConceptIssueModel MapToModel(IConceptIssue entity)
        {
            var model = EntityMapper.MapToModel<IConceptIssue, ConceptIssueModel>(entity);
            // ConceptIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.Concept = entity.Concept?.MapToModel();
            model.IssueId = entity.IssueId;
            model.Issue = entity.Issue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IConceptIssueModel MapToModelLite(IConceptIssue entity)
        {
            var model = EntityMapper.MapToModelLite<IConceptIssue, ConceptIssueModel>(entity);
            // ConceptIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public IConceptIssueModel MapToModelListing(IConceptIssue entity)
        {
            var model = EntityMapper.MapToModelListing<IConceptIssue, ConceptIssueModel>(entity);
            // ConceptIssue Properties
            // <None>
            // Related Objects
            model.ConceptId = entity.ConceptId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public IConceptIssueSearchModel MapToSearchModel(IConceptIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IConceptIssueModel, ConceptIssueSearchModel>(model);
            // Search Properties
            searchModel.ConceptId = model.ConceptId;
            searchModel.ConceptCustomKey = model.Concept?.CustomKey;
            searchModel.ConceptName = model.Concept?.Name;
            searchModel.ConceptDescription = model.Concept?.Description;
            searchModel.IssueId = model.IssueId;
            searchModel.IssueCustomKey = model.Issue?.CustomKey;
            searchModel.IssueName = model.Issue?.Name;
            searchModel.IssueDescription = model.Issue?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IConceptIssueModel model, IConceptIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // ConceptIssue Properties
                // <None>
                // Related Objects
                && model.ConceptId == entity.ConceptId
                && model.IssueId == entity.IssueId
                ;
        }
    }
}
