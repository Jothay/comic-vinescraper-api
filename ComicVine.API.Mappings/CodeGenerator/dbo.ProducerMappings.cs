// <auto-generated>
// <copyright file="dbo.IProducerModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Producer model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class ProducerMapperExtensions
    {
        public static readonly ProducerMapper Mapper = new ProducerMapper();

        public static IProducer MapToEntity(this IProducerModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this IProducerModel model, ref IProducer entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static IProducerModel MapToModel(this IProducer entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static IProducerModel MapToModelLite(this IProducer entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static IProducerModel MapToModelListing(this IProducer entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static IProducerSearchModel MapToSearchModel(this IProducerModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IProducerModel model, IProducer entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class ProducerMapper : IProducerMapper
    {
        public IProducer MapToEntity(IProducerModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<Producer, IProducerModel>(model);
            // Producer Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(IProducerModel model, ref IProducer entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // Producer Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            // <None>
        }

        public IProducerModel MapToModel(IProducer entity)
        {
            var model = NameableEntityMapper.MapToModel<IProducer, ProducerModel>(entity);
            // Producer Properties
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public IProducerModel MapToModelLite(IProducer entity)
        {
            var model = NameableEntityMapper.MapToModelLite<IProducer, ProducerModel>(entity);
            // Producer Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public IProducerModel MapToModelListing(IProducer entity)
        {
            var model = NameableEntityMapper.MapToModelListing<IProducer, ProducerModel>(entity);
            // Producer Properties
            // <None>
            // Related Objects
            // <None>
            // Return Entity
            return model;
        }

        public IProducerSearchModel MapToSearchModel(IProducerModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<IProducerModel, ProducerSearchModel>(model);
            // Search Properties
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(IProducerModel model, IProducer entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // Producer Properties
                // <None>
                // Related Objects
                // <None>
                ;
        }
    }
}
