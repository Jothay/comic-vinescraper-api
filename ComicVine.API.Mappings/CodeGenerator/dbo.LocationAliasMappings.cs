// <auto-generated>
// <copyright file="dbo.ILocationAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.dbo
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class LocationAliasMapperExtensions
    {
        public static readonly LocationAliasMapper Mapper = new LocationAliasMapper();

        public static ILocationAlias MapToEntity(this ILocationAliasModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ILocationAliasModel model, ref ILocationAlias entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ILocationAliasModel MapToModel(this ILocationAlias entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ILocationAliasModel MapToModelLite(this ILocationAlias entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ILocationAliasModel MapToModelListing(this ILocationAlias entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ILocationAliasSearchModel MapToSearchModel(this ILocationAliasModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ILocationAliasModel model, ILocationAlias entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class LocationAliasMapper : ILocationAliasMapper
    {
        public ILocationAlias MapToEntity(ILocationAliasModel model)
        {
            var entity = NameableEntityMapper.MapToEntity<LocationAlias, ILocationAliasModel>(model);
            // LocationAlias Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ILocationAliasModel model, ref ILocationAlias entity)
        {
            // Assign Base properties
            NameableEntityMapper.MapToEntity(model, ref entity);
            // LocationAlias Properties
            // <None>
            // Related Objects
            entity.LocationId = model.LocationId;
            entity.Location = (Location)model.Location.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ILocationAliasModel MapToModel(ILocationAlias entity)
        {
            var model = NameableEntityMapper.MapToModel<ILocationAlias, LocationAliasModel>(entity);
            // LocationAlias Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            model.Location = entity.Location.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ILocationAliasModel MapToModelLite(ILocationAlias entity)
        {
            var model = NameableEntityMapper.MapToModelLite<ILocationAlias, LocationAliasModel>(entity);
            // LocationAlias Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            // Return Entity
            return model;
        }

        public ILocationAliasModel MapToModelListing(ILocationAlias entity)
        {
            var model = NameableEntityMapper.MapToModelListing<ILocationAlias, LocationAliasModel>(entity);
            // LocationAlias Properties
            // <None>
            // Related Objects
            model.LocationId = entity.LocationId;
            // Return Entity
            return model;
        }

        public ILocationAliasSearchModel MapToSearchModel(ILocationAliasModel model)
        {
            var searchModel = NameableEntityMapper.MapToSearchModel<ILocationAliasModel, LocationAliasSearchModel>(model);
            // Search Properties
            searchModel.LocationId = model.LocationId;
            searchModel.LocationCustomKey = model.Location.CustomKey;
            searchModel.LocationName = model.Location.Name;
            searchModel.LocationDescription = model.Location.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ILocationAliasModel model, ILocationAlias entity)
        {
            return NameableEntityMapper.AreEqual(model, entity)
                // LocationAlias Properties
                // <None>
                // Related Objects
                && model.LocationId == entity.LocationId
                ;
        }
    }
}
