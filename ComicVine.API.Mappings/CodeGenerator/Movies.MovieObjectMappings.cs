// <auto-generated>
// <copyright file="Movies.IMovieObjectModel.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved. ComicVine Original Api Copyright (c) ComicVine a subsidiary of CBS.
// </copyright>
// <summary>Implements the Mapping Layer functions between MovieObject and MovieObjectModel.</summary>
// <remarks>This file was auto-generated using MappingFileMaster.tt in ComicVine.API.Mappings\Mappings\CodeGenerator</remarks>
// </auto-generated>
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global, RedundantUsingDirective, UnusedMember.Global, UnusedMethodReturnValue.Global
namespace ComicVine.API.Mappings//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class MovieObjectMapperExtensions
    {
        public static IMovieObjectMapper Mapper = new MovieObjectMapper();

        public static void OverrideMapper(IMovieObjectMapper mapper) { Mapper = mapper; }

        public static IMovieObject MapToEntity(this IMovieObjectModel model, int currentDepth = 1)
        {
            return Mapper.MapToEntity(model, currentDepth);
        }
        public static void MapToEntity(this IMovieObjectModel model, ref IMovieObject entity, int currentDepth = 1)
        {
            Mapper.MapToEntity(model, ref entity, currentDepth);
        }
        public static IMovieObjectModel MapToModel(this IMovieObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModel(entity, currentDepth);
        }
        public static IMovieObjectModel MapToModelLite(this IMovieObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModelLite(entity, currentDepth);
        }
        public static IMovieObjectModel MapToModelListing(this IMovieObject entity, int currentDepth = 1)
        {
            return Mapper.MapToModelListing(entity, currentDepth);
        }
        public static IMovieObjectSearchModel MapToSearchModel(this IMovieObjectModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this IMovieObjectModel model, IMovieObject entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class MovieObjectMapper : IMovieObjectMapper
    {
        public virtual IMovieObject MapToEntity(IMovieObjectModel model, int currentDepth = 1)
        {
            currentDepth++;
            var entity = EntityMapper.MapToEntity<MovieObject, IMovieObjectModel>(model);
            // MovieObject Properties
            // <None>
            // Related Objects
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public virtual void MapToEntity(IMovieObjectModel model, ref IMovieObject entity, int currentDepth = 1)
        {
            currentDepth++;
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // MovieObject Properties
            // <None>
            // Related Objects
            entity.MovieId = model.MovieId;
            entity.Movie = (Movie)model.Movie?.MapToEntity();
            entity.ObjectId = model.ObjectId;
            entity.Object = (Object)model.Object?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public virtual IMovieObjectModel MapToModel(IMovieObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModel<IMovieObject, MovieObjectModel>(entity);
            // MovieObject Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.Movie = entity.Movie?.MapToModel();
            model.ObjectId = entity.ObjectId;
            model.Object = entity.Object?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public virtual IMovieObjectModel MapToModelLite(IMovieObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelLite<IMovieObject, MovieObjectModel>(entity);
            // MovieObject Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.ObjectId = entity.ObjectId;
            // Return Entity
            return model;
        }

        public virtual IMovieObjectModel MapToModelListing(IMovieObject entity, int currentDepth = 1)
        {
            currentDepth++;
            var model = EntityMapper.MapToModelListing<IMovieObject, MovieObjectModel>(entity);
            // MovieObject Properties
            // <None>
            // Related Objects
            model.MovieId = entity.MovieId;
            model.ObjectId = entity.ObjectId;
            // Return Entity
            return model;
        }

        public virtual IMovieObjectSearchModel MapToSearchModel(IMovieObjectModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<IMovieObjectModel, MovieObjectSearchModel>(model);
            // Search Properties
            searchModel.MovieId = model.MovieId;
            searchModel.MovieCustomKey = model.Movie?.CustomKey;
            searchModel.MovieApiDetailUrl = model.Movie?.ApiDetailUrl;
            searchModel.MovieSiteDetailUrl = model.Movie?.SiteDetailUrl;
            searchModel.MovieName = model.Movie?.Name;
            searchModel.MovieShortDescription = model.Movie?.ShortDescription;
            searchModel.MovieDescription = model.Movie?.Description;
            searchModel.ObjectId = model.ObjectId;
            searchModel.ObjectCustomKey = model.Object?.CustomKey;
            searchModel.ObjectApiDetailUrl = model.Object?.ApiDetailUrl;
            searchModel.ObjectSiteDetailUrl = model.Object?.SiteDetailUrl;
            searchModel.ObjectName = model.Object?.Name;
            searchModel.ObjectShortDescription = model.Object?.ShortDescription;
            searchModel.ObjectDescription = model.Object?.Description;
            // Return Search Model
            return searchModel;
        }

        public virtual bool AreEqual(IMovieObjectModel model, IMovieObject entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // MovieObject Properties
                // <None>
                // Related Objects
                && model.MovieId == entity.MovieId
                && model.ObjectId == entity.ObjectId
                ;
        }
    }
}
