// <auto-generated>
// <copyright file="Teams.ITeamCharacterEnemyModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamCharacterEnemy model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamCharacterEnemyMapperExtensions
    {
        public static readonly TeamCharacterEnemyMapper Mapper = new TeamCharacterEnemyMapper();

        public static ITeamCharacterEnemy MapToEntity(this ITeamCharacterEnemyModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamCharacterEnemyModel model, ref ITeamCharacterEnemy entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamCharacterEnemyModel MapToModel(this ITeamCharacterEnemy entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamCharacterEnemyModel MapToModelLite(this ITeamCharacterEnemy entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamCharacterEnemyModel MapToModelListing(this ITeamCharacterEnemy entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamCharacterEnemySearchModel MapToSearchModel(this ITeamCharacterEnemyModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamCharacterEnemyModel model, ITeamCharacterEnemy entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamCharacterEnemyMapper : ITeamCharacterEnemyMapper
    {
        public ITeamCharacterEnemy MapToEntity(ITeamCharacterEnemyModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamCharacterEnemy, ITeamCharacterEnemyModel>(model);
            // TeamCharacterEnemy Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.EnemyId = model.EnemyId;
            entity.Enemy = (Character)model.Enemy?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ITeamCharacterEnemyModel model, ref ITeamCharacterEnemy entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamCharacterEnemy Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.EnemyId = model.EnemyId;
            entity.Enemy = (Character)model.Enemy?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ITeamCharacterEnemyModel MapToModel(ITeamCharacterEnemy entity)
        {
            var model = EntityMapper.MapToModel<ITeamCharacterEnemy, TeamCharacterEnemyModel>(entity);
            // TeamCharacterEnemy Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.EnemyId = entity.EnemyId;
            model.Enemy = entity.Enemy?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ITeamCharacterEnemyModel MapToModelLite(ITeamCharacterEnemy entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamCharacterEnemy, TeamCharacterEnemyModel>(entity);
            // TeamCharacterEnemy Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.EnemyId = entity.EnemyId;
            // Return Entity
            return model;
        }

        public ITeamCharacterEnemyModel MapToModelListing(ITeamCharacterEnemy entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamCharacterEnemy, TeamCharacterEnemyModel>(entity);
            // TeamCharacterEnemy Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.EnemyId = entity.EnemyId;
            // Return Entity
            return model;
        }

        public ITeamCharacterEnemySearchModel MapToSearchModel(ITeamCharacterEnemyModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamCharacterEnemyModel, TeamCharacterEnemySearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.EnemyId = model.EnemyId;
            searchModel.EnemyCustomKey = model.Enemy?.CustomKey;
            searchModel.EnemyName = model.Enemy?.Name;
            searchModel.EnemyDescription = model.Enemy?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ITeamCharacterEnemyModel model, ITeamCharacterEnemy entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamCharacterEnemy Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.EnemyId == entity.EnemyId
                ;
        }
    }
}
