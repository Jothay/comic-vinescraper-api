// <auto-generated>
// <copyright file="Teams.ITeamAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Mappings//.Teams
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using Models;
    using SearchModels;

    public static class TeamAppearedInIssueMapperExtensions
    {
        public static readonly TeamAppearedInIssueMapper Mapper = new TeamAppearedInIssueMapper();

        public static ITeamAppearedInIssue MapToEntity(this ITeamAppearedInIssueModel model)
        {
            return Mapper.MapToEntity(model);
        }
        public static void MapToEntity(this ITeamAppearedInIssueModel model, ref ITeamAppearedInIssue entity)
        {
            Mapper.MapToEntity(model, ref entity);
        }
        public static ITeamAppearedInIssueModel MapToModel(this ITeamAppearedInIssue entity)
        {
            return Mapper.MapToModel(entity);
        }
        public static ITeamAppearedInIssueModel MapToModelLite(this ITeamAppearedInIssue entity)
        {
            return Mapper.MapToModelLite(entity);
        }
        public static ITeamAppearedInIssueModel MapToModelListing(this ITeamAppearedInIssue entity)
        {
            return Mapper.MapToModelListing(entity);
        }
        public static ITeamAppearedInIssueSearchModel MapToSearchModel(this ITeamAppearedInIssueModel model)
        {
            return Mapper.MapToSearchModel(model);
        }
        public static bool AreEqual(this ITeamAppearedInIssueModel model, ITeamAppearedInIssue entity)
        {
            return Mapper.AreEqual(model, entity);
        }
    }

    public class TeamAppearedInIssueMapper : ITeamAppearedInIssueMapper
    {
        public ITeamAppearedInIssue MapToEntity(ITeamAppearedInIssueModel model)
        {
            var entity = EntityMapper.MapToEntity<TeamAppearedInIssue, ITeamAppearedInIssueModel>(model);
            // TeamAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
            // Return Entity
            return entity;
        }

        public void MapToEntity(ITeamAppearedInIssueModel model, ref ITeamAppearedInIssue entity)
        {
            // Assign Base properties
            EntityMapper.MapToEntity(model, ref entity);
            // TeamAppearedInIssue Properties
            // <None>
            // Related Objects
            entity.TeamId = model.TeamId;
            entity.Team = (Team)model.Team?.MapToEntity();
            entity.IssueId = model.IssueId;
            entity.Issue = (Issue)model.Issue?.MapToEntity();
            // Associated Objects
            // <None>
        }

        public ITeamAppearedInIssueModel MapToModel(ITeamAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModel<ITeamAppearedInIssue, TeamAppearedInIssueModel>(entity);
            // TeamAppearedInIssue Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.Team = entity.Team?.MapToModel();
            model.IssueId = entity.IssueId;
            model.Issue = entity.Issue?.MapToModel();
            // Associated Objects
            // <None>
            // Return Entity
            return model;
        }

        public ITeamAppearedInIssueModel MapToModelLite(ITeamAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelLite<ITeamAppearedInIssue, TeamAppearedInIssueModel>(entity);
            // TeamAppearedInIssue Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public ITeamAppearedInIssueModel MapToModelListing(ITeamAppearedInIssue entity)
        {
            var model = EntityMapper.MapToModelListing<ITeamAppearedInIssue, TeamAppearedInIssueModel>(entity);
            // TeamAppearedInIssue Properties
            // <None>
            // Related Objects
            model.TeamId = entity.TeamId;
            model.IssueId = entity.IssueId;
            // Return Entity
            return model;
        }

        public ITeamAppearedInIssueSearchModel MapToSearchModel(ITeamAppearedInIssueModel model)
        {
            var searchModel = EntityMapper.MapToSearchModel<ITeamAppearedInIssueModel, TeamAppearedInIssueSearchModel>(model);
            // Search Properties
            searchModel.TeamId = model.TeamId;
            searchModel.TeamCustomKey = model.Team?.CustomKey;
            searchModel.TeamName = model.Team?.Name;
            searchModel.TeamDescription = model.Team?.Description;
            searchModel.IssueId = model.IssueId;
            searchModel.IssueCustomKey = model.Issue?.CustomKey;
            searchModel.IssueName = model.Issue?.Name;
            searchModel.IssueDescription = model.Issue?.Description;
            // Return Search Model
            return searchModel;
        }

        public bool AreEqual(ITeamAppearedInIssueModel model, ITeamAppearedInIssue entity)
        {
            return EntityMapper.AreEqual(model, entity)
                // TeamAppearedInIssue Properties
                // <None>
                // Related Objects
                && model.TeamId == entity.TeamId
                && model.IssueId == entity.IssueId
                ;
        }
    }
}
