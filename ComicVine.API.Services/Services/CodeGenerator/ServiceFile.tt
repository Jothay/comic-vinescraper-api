<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)ComicVine.API.DataModel\bin\Debug\ComicVine.API.DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ComicVine.API.CodeGenerator" #>
<#@ import namespace="ComicVine.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateServiceFile(string nameSpace, classInfo entityClass)
{
	var hasProperties = false;
	var hasRelatedProperties = false;
	var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNameLowerFirst = Char.ToLowerInvariant(thisClassName[0]) + thisClassName.Substring(1);
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var thisClassNamePluralizedAny = thisClassNamePluralized;
	var thisClassNamePluralizedLowerFirst = Char.ToLowerInvariant(thisClassNamePluralized[0]) + thisClassNamePluralized.Substring(1);
	if (thisClassName == thisClassNamePluralized)
	{
		// We need a different plural name so the same class doesn't get gen'd twice
		thisClassNamePluralizedAny = "Any" + thisClassNamePluralized;
	}
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.I<#= thisClassName #>Model.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the <#= thisClassName #> model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.<#= nameSpace #>
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class <#= thisClassName #>ModelBase : NameableEntityModelBase, I<#= thisClassName #>Model
    {
        // <#= thisClassName #> Properties
<#+	foreach (var property in entityClass.properties) {
		if (!IsClassProperty(property, out propertyType)) { continue; }
		hasProperties = true; #>
        public <#= propertyType #> <#= property.name #> { get; set; }
<#+	} // End Foreach loop (var property in entityClass.properties) // Properties #>
<#+	if (!hasProperties) { #>
        // <None>
<#+	} // End If (!hasProperties) #>
        // Related Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
		hasRelatedProperties = true; #>
<#+		if (IsIdentifierProperty(property)) {#>
        public <#= propertyType #> <#= property.name #> { get; set; }
<#+		} else {#>
        public I<#= propertyType.Replace("Common.", "") #> <#= property.name #> { get; set; }
<#+		} #>
<#+	} // End Foreach loop (var property in entityClass.properties) // Related #>
<#+	if (!hasRelatedProperties) { #>
        // <None>
<#+	} // End If (!hasRelatedProperties) #>
        // Associated Objects
<#+	foreach (var property in entityClass.properties) {
		if (!IsAssociatedObjectProperty(property, out propertyType)) { continue; }
		var type = propertyType.Replace("List<", "List<I").Replace("ICommon.", "");
		hasAssociatedProperties = true; #>
        public <#= type #> <#= property.name #> { get; set; }
<#+	} // End Foreach loop (var property in entityClass.properties) // Associated #>
<#+	if (!hasAssociatedProperties) { #>
        // <None>
<#+	} // End If (!hasAssociatedProperties) #>
    }
    public class <#= thisClassName #>SearchModelBase : NameableEntitySearchModelBase, I<#= thisClassName #>SearchModel
    {
<#+	if (!hasRelatedProperties) { #>
        // No <#= thisClassName #> Search Properties
<#+	} else { #>
<#+		foreach (var property in entityClass.properties) {
			if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
			if (IsIdentifierProperty(property)) { #>
        [ApiMember(Name = "<#= property.name #>", IsRequired = false, Description = "Filter by the Related <#= property.name.Replace("ID", " ID") #>")]
        public int? <#= property.name #> { get; set; }

<#+				if (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) { #>
        [ApiMember(Name = "<#= property.name.Replace("Id", "").Replace("ID", "") #>CustomKey", IsRequired = false, Description = "Filter by the Related <#= property.name.Replace("Id", "").Replace("ID", "") #> CustomKey (Equals, Case-Insensitive)")]
        public string <#= property.name.Replace("Id", "").Replace("ID", "") #>CustomKey { get; set; }

<#+				} // End If (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) #>
<#+				if (property.name == "RequiredLevelId") {#>
        [ApiMember(Name = "LevelMin", IsRequired = false, Description = "Filter by the Level (as a Min)")]
        public int? LevelMin { get; set; }

        [ApiMember(Name = "LevelMax", IsRequired = false, Description = "Filter by the Level (as a Max)")]
        public int? LevelMax { get; set; }

<#+				} // End If (property.name == "RequiredLevelId") #>
<#+			} // End If (IsIdentifierProperty(property)) #>
<#+			if (property.isNameable) { #>
        [ApiMember(Name = "<#= property.name #>ApiDetailUrl", IsRequired = false, Description = "Filter by the Related <#= property.name #> Api Detail Url (Contains, Case-Insensitive)")]
        public string <#= property.name #>ApiDetailUrl { get; set; }

        [ApiMember(Name = "<#= property.name #>SiteDetailUrl", IsRequired = false, Description = "Filter by the Related <#= property.name #> Site Detail Url (Contains, Case-Insensitive)")]
        public string <#= property.name #>SiteDetailUrl { get; set; }

        [ApiMember(Name = "<#= property.name #>Name", IsRequired = false, Description = "Filter by the Related <#= property.name #> Name (Contains, Case-Insensitive)")]
        public string <#= property.name #>Name { get; set; }

        [ApiMember(Name = "<#= property.name #>ShortDescription", IsRequired = false, Description = "Filter by the Related <#= property.name #> Short Description (Contains, Case-Insensitive)")]
        public string <#= property.name #>ShortDescription { get; set; }

        [ApiMember(Name = "<#= property.name #>Description", IsRequired = false, Description = "Filter by the Related <#= property.name #> Description (Contains, Case-Insensitive)")]
        public string <#= property.name #>Description { get; set; }

<#+			} // End If (property.isNameable) #>
<#+			if (property.isContactable) { #>
        [ApiMember(Name = "<#= property.name #>Phone", IsRequired = false, Description = "Filter by the Related <#= property.name #> Phone (Contains, Case-Insensitive, Punctuation Ignored)")]
        public string <#= property.name #>Phone { get; set; }

        [ApiMember(Name = "<#= property.name #>Fax", IsRequired = false, Description = "Filter by the Related <#= property.name #> Fax (Contains, Case-Insensitive, Punctuation Ignored)")]
        public string <#= property.name #>Fax { get; set; }

        [ApiMember(Name = "<#= property.name #>Email", IsRequired = false, Description = "Filter by the Related <#= property.name #> Email (Equals, Case-Insensitive)")]
        public string <#= property.name #>Email { get; set; }

<#+			} // End If (property.isContactable) #>
<#+		} // End Foreach Loop (var property in entityClass.properties) // Related #>
<#+	} // End If (!hasRelatedProperties) #>
<#+	foreach (var property in entityClass.properties) {
		if (!property.isFilterable) { continue; }
		var filterNameTitle = string.IsNullOrWhiteSpace(property.filterName) ? property.name : property.filterName;
		var filterName = string.IsNullOrWhiteSpace(property.filterName) ? property.name.ToLower() : property.filterName.ToLower();
		var filterDescription = string.IsNullOrWhiteSpace(property.filterDescription) ? string.Format("The {0} to search by.", property.name) : property.filterDescription; #>
<#+		if (property.type == "string") { #>
        [ApiMember(Name = "<#= filterNameTitle #>", IsRequired = false, Description = "<#= filterDescription #> (Contains, Case-Insensitive)")]
        public string <#= filterNameTitle #> { get; set; }

<#+		} #>
<#+		if (property.type == "int" || property.type == "int?" || property.type == "bool" || property.type == "bool?" || property.type == "decimal" || property.type == "decimal?") { #>
        [ApiMember(Name = "<#= filterNameTitle #>", IsRequired = false, Description = "<#= filterDescription #>")]
        public <#= property.type.Replace("?", "")#>? <#= filterNameTitle #> { get; set; }

<#+		} #>
<#+	} // End ForEach Loop (var property in entityClass.properties) // Searchable #>
    }

    [Route("/<#= thisClassNamePluralized #>/", "GET", Summary = "Gets All Active <#= thisClassNamePluralized #>")]
    public class Get<#= thisClassNamePluralizedAny #> : <#= thisClassName #>SearchModelBase, IReturn<List<I<#= thisClassName #>Model>> { }

    [Route("/<#= thisClassNamePluralized #>/Listing", "GET", Summary = "Gets All Active <#= thisClassNamePluralized #> with the mininum header information")]
    public class Get<#= thisClassNamePluralizedAny #>AsListing : <#= thisClassName #>SearchModelBase, IReturn<List<I<#= thisClassName #>Model>> { }

    [Route("/<#= thisClassNamePluralized #>/{ID}", "GET", Summary = "Gets <#= thisClassName #> by Identifier")]
    public class Get<#= thisClassName #> : ImplementsID, IReturn<I<#= thisClassName #>Model> { }

    [Route("/<#= thisClassNamePluralized #>/{CustomKey}/ByKey", "GET", Summary = "Gets <#= thisClassName #> by Key")]
    public class Get<#= thisClassName #>ByKey : ImplementsKey, IReturn<I<#= thisClassName #>Model> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/Create", "POST", Summary = "Creates an <#= thisClassName #> with these contents")]
    public class Create<#= thisClassName #> : <#= thisClassName #>ModelBase, IReturn<I<#= thisClassName #>Model> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/Update", "POST", Summary = "Updates an <#= thisClassName #> with new contents")]
    public class Update<#= thisClassName #> : <#= thisClassName #>ModelBase, IReturn<I<#= thisClassName #>Model> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/{ID}/Deactivate", "POST", Summary = "Deactivates an <#= thisClassName #> by Identifier")]
    public class Deactivate<#= thisClassName #> : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an <#= thisClassName #> by Key")]
    public class Deactivate<#= thisClassName #>ByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/{ID}/Remove", "POST", Summary = "Removes an <#= thisClassName #> by Identifier")]
    public class Remove<#= thisClassName #> : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/<#= thisClassNamePluralized #>/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an <#= thisClassName #> by Key")]
    public class Remove<#= thisClassName #>ByKey : ImplementsKey, IReturn<bool> { }

    public interface I<#= thisClassNamePluralized #>Services
    {
        List<I<#= thisClassName #>Model> Any(Get<#= thisClassNamePluralizedAny #> request);
        List<I<#= thisClassName #>Model> Any(Get<#= thisClassNamePluralizedAny #>AsListing request);
        I<#= thisClassName #>Model Any(Get<#= thisClassName #> request);
        I<#= thisClassName #>Model Any(Get<#= thisClassName #>ByKey request);
        I<#= thisClassName #>Model Any(Create<#= thisClassName #> request);
        I<#= thisClassName #>Model Any(Update<#= thisClassName #> request);
        bool Any(Deactivate<#= thisClassName #> request);
        bool Any(Deactivate<#= thisClassName #>ByKey request);
        bool Any(Remove<#= thisClassName #> request);
        bool Any(Remove<#= thisClassName #>ByKey request);
    }

    public class <#= thisClassNamePluralized #>Services : /*ServicesBase,*/ I<#= thisClassNamePluralized #>Services
    {
        private readonly I<#= thisClassNamePluralized #>BusinessWorkflow workflow;

        public <#= thisClassNamePluralized #>Services(I<#= thisClassNamePluralized #>BusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<I<#= thisClassName #>Model> Any(Get<#= thisClassNamePluralizedAny #> request) { return workflow.Search(request); }
        public List<I<#= thisClassName #>Model> Any(Get<#= thisClassNamePluralizedAny #>AsListing request) { return workflow.Search(request, true); }
        public I<#= thisClassName #>Model Any(Get<#= thisClassName #> request) { return workflow.Get(request.ID); }
        public I<#= thisClassName #>Model Any(Get<#= thisClassName #>ByKey request) { return workflow.Get(request.CustomKey); }
        public I<#= thisClassName #>Model Any(Create<#= thisClassName #> request) { return workflow.Create(request); }
        public I<#= thisClassName #>Model Any(Update<#= thisClassName #> request) { return workflow.Update(request); }
        public bool Any(Deactivate<#= thisClassName #> request) { return workflow.Deactivate(request.ID); }
        public bool Any(Deactivate<#= thisClassName #>ByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(Remove<#= thisClassName #> request) { return workflow.Remove(request.ID); }
        public bool Any(Remove<#= thisClassName #>ByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
<#+
} // End Function GenerateInterfaceFile
#>