// <auto-generated>
// <copyright file="Movies.IMovieLocationModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieLocation model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class MovieLocationModelBase : NameableEntityModelBase, IMovieLocationModel
    {
        // MovieLocation Properties
        // <None>
        // Related Objects
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        // Associated Objects
        // <None>
    }
    public class MovieLocationSearchModelBase : NameableEntitySearchModelBase, IMovieLocationSearchModel
    {
        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

    }

    [Route("/MovieLocations/", "GET", Summary = "Gets All Active MovieLocations")]
    public class GetMovieLocations : MovieLocationSearchModelBase, IReturn<List<IMovieLocationModel>> { }

    [Route("/MovieLocations/Listing", "GET", Summary = "Gets All Active MovieLocations with the mininum header information")]
    public class GetMovieLocationsAsListing : MovieLocationSearchModelBase, IReturn<List<IMovieLocationModel>> { }

    [Route("/MovieLocations/{ID}", "GET", Summary = "Gets MovieLocation by Identifier")]
    public class GetMovieLocation : ImplementsID, IReturn<IMovieLocationModel> { }

    [Route("/MovieLocations/{CustomKey}/ByKey", "GET", Summary = "Gets MovieLocation by Key")]
    public class GetMovieLocationByKey : ImplementsKey, IReturn<IMovieLocationModel> { }

    //[Authenticate]
    [Route("/MovieLocations/Create", "POST", Summary = "Creates an MovieLocation with these contents")]
    public class CreateMovieLocation : MovieLocationModelBase, IReturn<IMovieLocationModel> { }

    //[Authenticate]
    [Route("/MovieLocations/Update", "POST", Summary = "Updates an MovieLocation with new contents")]
    public class UpdateMovieLocation : MovieLocationModelBase, IReturn<IMovieLocationModel> { }

    //[Authenticate]
    [Route("/MovieLocations/{ID}/Deactivate", "POST", Summary = "Deactivates an MovieLocation by Identifier")]
    public class DeactivateMovieLocation : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieLocations/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an MovieLocation by Key")]
    public class DeactivateMovieLocationByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieLocations/{ID}/Remove", "POST", Summary = "Removes an MovieLocation by Identifier")]
    public class RemoveMovieLocation : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieLocations/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an MovieLocation by Key")]
    public class RemoveMovieLocationByKey : ImplementsKey, IReturn<bool> { }

    public interface IMovieLocationsServices
    {
        List<IMovieLocationModel> Any(GetMovieLocations request);
        List<IMovieLocationModel> Any(GetMovieLocationsAsListing request);
        IMovieLocationModel Any(GetMovieLocation request);
        IMovieLocationModel Any(GetMovieLocationByKey request);
        IMovieLocationModel Any(CreateMovieLocation request);
        IMovieLocationModel Any(UpdateMovieLocation request);
        bool Any(DeactivateMovieLocation request);
        bool Any(DeactivateMovieLocationByKey request);
        bool Any(RemoveMovieLocation request);
        bool Any(RemoveMovieLocationByKey request);
    }

    public class MovieLocationsServices : /*ServicesBase,*/ IMovieLocationsServices
    {
        private readonly IMovieLocationsBusinessWorkflow workflow;

        public MovieLocationsServices(IMovieLocationsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IMovieLocationModel> Any(GetMovieLocations request) { return workflow.Search(request); }
        public List<IMovieLocationModel> Any(GetMovieLocationsAsListing request) { return workflow.Search(request, true); }
        public IMovieLocationModel Any(GetMovieLocation request) { return workflow.Get(request.ID); }
        public IMovieLocationModel Any(GetMovieLocationByKey request) { return workflow.Get(request.CustomKey); }
        public IMovieLocationModel Any(CreateMovieLocation request) { return workflow.Create(request); }
        public IMovieLocationModel Any(UpdateMovieLocation request) { return workflow.Update(request); }
        public bool Any(DeactivateMovieLocation request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateMovieLocationByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveMovieLocation request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveMovieLocationByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
