// <auto-generated>
// <copyright file="Characters.ICharacterAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class CharacterAppearedInIssueModelBase : NameableEntityModelBase, ICharacterAppearedInIssueModel
    {
        // CharacterAppearedInIssue Properties
        // <None>
        // Related Objects
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        public int AppearedInIssueId { get; set; }
        public IIssueModel AppearedInIssue { get; set; }
        // Associated Objects
        // <None>
    }
    public class CharacterAppearedInIssueSearchModelBase : NameableEntitySearchModelBase, ICharacterAppearedInIssueSearchModel
    {
        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueId", IsRequired = false, Description = "Filter by the Related AppearedInIssueId")]
        public int? AppearedInIssueId { get; set; }

        [ApiMember(Name = "AppearedInIssueCustomKey", IsRequired = false, Description = "Filter by the Related AppearedInIssue CustomKey (Equals, Case-Insensitive)")]
        public string AppearedInIssueCustomKey { get; set; }

        [ApiMember(Name = "AppearedInIssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Api Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueApiDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Site Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueName", IsRequired = false, Description = "Filter by the Related AppearedInIssue Name (Contains, Case-Insensitive)")]
        public string AppearedInIssueName { get; set; }

        [ApiMember(Name = "AppearedInIssueShortDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Short Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueShortDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueDescription { get; set; }

    }

    [Route("/CharacterAppearedInIssues/", "GET", Summary = "Gets All Active CharacterAppearedInIssues")]
    public class GetCharacterAppearedInIssues : CharacterAppearedInIssueSearchModelBase, IReturn<List<ICharacterAppearedInIssueModel>> { }

    [Route("/CharacterAppearedInIssues/Listing", "GET", Summary = "Gets All Active CharacterAppearedInIssues with the mininum header information")]
    public class GetCharacterAppearedInIssuesAsListing : CharacterAppearedInIssueSearchModelBase, IReturn<List<ICharacterAppearedInIssueModel>> { }

    [Route("/CharacterAppearedInIssues/{ID}", "GET", Summary = "Gets CharacterAppearedInIssue by Identifier")]
    public class GetCharacterAppearedInIssue : ImplementsID, IReturn<ICharacterAppearedInIssueModel> { }

    [Route("/CharacterAppearedInIssues/{CustomKey}/ByKey", "GET", Summary = "Gets CharacterAppearedInIssue by Key")]
    public class GetCharacterAppearedInIssueByKey : ImplementsKey, IReturn<ICharacterAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/Create", "POST", Summary = "Creates an CharacterAppearedInIssue with these contents")]
    public class CreateCharacterAppearedInIssue : CharacterAppearedInIssueModelBase, IReturn<ICharacterAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/Update", "POST", Summary = "Updates an CharacterAppearedInIssue with new contents")]
    public class UpdateCharacterAppearedInIssue : CharacterAppearedInIssueModelBase, IReturn<ICharacterAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an CharacterAppearedInIssue by Identifier")]
    public class DeactivateCharacterAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an CharacterAppearedInIssue by Key")]
    public class DeactivateCharacterAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/{ID}/Remove", "POST", Summary = "Removes an CharacterAppearedInIssue by Identifier")]
    public class RemoveCharacterAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterAppearedInIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an CharacterAppearedInIssue by Key")]
    public class RemoveCharacterAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface ICharacterAppearedInIssuesServices
    {
        List<ICharacterAppearedInIssueModel> Any(GetCharacterAppearedInIssues request);
        List<ICharacterAppearedInIssueModel> Any(GetCharacterAppearedInIssuesAsListing request);
        ICharacterAppearedInIssueModel Any(GetCharacterAppearedInIssue request);
        ICharacterAppearedInIssueModel Any(GetCharacterAppearedInIssueByKey request);
        ICharacterAppearedInIssueModel Any(CreateCharacterAppearedInIssue request);
        ICharacterAppearedInIssueModel Any(UpdateCharacterAppearedInIssue request);
        bool Any(DeactivateCharacterAppearedInIssue request);
        bool Any(DeactivateCharacterAppearedInIssueByKey request);
        bool Any(RemoveCharacterAppearedInIssue request);
        bool Any(RemoveCharacterAppearedInIssueByKey request);
    }

    public class CharacterAppearedInIssuesServices : Service, ICharacterAppearedInIssuesServices
    {
        private readonly ICharacterAppearedInIssuesBusinessWorkflow workflow;

        public CharacterAppearedInIssuesServices(ICharacterAppearedInIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ICharacterAppearedInIssueModel> Any(GetCharacterAppearedInIssues request) { return workflow.Search(request); }
        public List<ICharacterAppearedInIssueModel> Any(GetCharacterAppearedInIssuesAsListing request) { return workflow.Search(request, true); }
        public ICharacterAppearedInIssueModel Any(GetCharacterAppearedInIssue request) { return workflow.Get(request.ID); }
        public ICharacterAppearedInIssueModel Any(GetCharacterAppearedInIssueByKey request) { return workflow.Get(request.CustomKey); }
        public ICharacterAppearedInIssueModel Any(CreateCharacterAppearedInIssue request) { return workflow.Create(request); }
        public ICharacterAppearedInIssueModel Any(UpdateCharacterAppearedInIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateCharacterAppearedInIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateCharacterAppearedInIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveCharacterAppearedInIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveCharacterAppearedInIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
