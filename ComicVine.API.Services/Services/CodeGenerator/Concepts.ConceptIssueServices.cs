// <auto-generated>
// <copyright file="Concepts.IConceptIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class ConceptIssueModelBase : NameableEntityModelBase, IConceptIssueModel
    {
        // ConceptIssue Properties
        // <None>
        // Related Objects
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        public int IssueId { get; set; }
        public IIssueModel Issue { get; set; }
        // Associated Objects
        // <None>
    }
    public class ConceptIssueSearchModelBase : NameableEntitySearchModelBase, IConceptIssueSearchModel
    {
        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

        [ApiMember(Name = "IssueId", IsRequired = false, Description = "Filter by the Related IssueId")]
        public int? IssueId { get; set; }

        [ApiMember(Name = "IssueCustomKey", IsRequired = false, Description = "Filter by the Related Issue CustomKey (Equals, Case-Insensitive)")]
        public string IssueCustomKey { get; set; }

        [ApiMember(Name = "IssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Api Detail Url (Contains, Case-Insensitive)")]
        public string IssueApiDetailUrl { get; set; }

        [ApiMember(Name = "IssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Site Detail Url (Contains, Case-Insensitive)")]
        public string IssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "IssueName", IsRequired = false, Description = "Filter by the Related Issue Name (Contains, Case-Insensitive)")]
        public string IssueName { get; set; }

        [ApiMember(Name = "IssueShortDescription", IsRequired = false, Description = "Filter by the Related Issue Short Description (Contains, Case-Insensitive)")]
        public string IssueShortDescription { get; set; }

        [ApiMember(Name = "IssueDescription", IsRequired = false, Description = "Filter by the Related Issue Description (Contains, Case-Insensitive)")]
        public string IssueDescription { get; set; }

    }

    [Route("/ConceptIssues/", "GET", Summary = "Gets All Active ConceptIssues")]
    public class GetConceptIssues : ConceptIssueSearchModelBase, IReturn<List<IConceptIssueModel>> { }

    [Route("/ConceptIssues/Listing", "GET", Summary = "Gets All Active ConceptIssues with the mininum header information")]
    public class GetConceptIssuesAsListing : ConceptIssueSearchModelBase, IReturn<List<IConceptIssueModel>> { }

    [Route("/ConceptIssues/{ID}", "GET", Summary = "Gets ConceptIssue by Identifier")]
    public class GetConceptIssue : ImplementsID, IReturn<IConceptIssueModel> { }

    [Route("/ConceptIssues/{CustomKey}/ByKey", "GET", Summary = "Gets ConceptIssue by Key")]
    public class GetConceptIssueByKey : ImplementsKey, IReturn<IConceptIssueModel> { }

    //[Authenticate]
    [Route("/ConceptIssues/Create", "POST", Summary = "Creates an ConceptIssue with these contents")]
    public class CreateConceptIssue : ConceptIssueModelBase, IReturn<IConceptIssueModel> { }

    //[Authenticate]
    [Route("/ConceptIssues/Update", "POST", Summary = "Updates an ConceptIssue with new contents")]
    public class UpdateConceptIssue : ConceptIssueModelBase, IReturn<IConceptIssueModel> { }

    //[Authenticate]
    [Route("/ConceptIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an ConceptIssue by Identifier")]
    public class DeactivateConceptIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ConceptIssue by Key")]
    public class DeactivateConceptIssueByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptIssues/{ID}/Remove", "POST", Summary = "Removes an ConceptIssue by Identifier")]
    public class RemoveConceptIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ConceptIssue by Key")]
    public class RemoveConceptIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface IConceptIssuesServices
    {
        List<IConceptIssueModel> Any(GetConceptIssues request);
        List<IConceptIssueModel> Any(GetConceptIssuesAsListing request);
        IConceptIssueModel Any(GetConceptIssue request);
        IConceptIssueModel Any(GetConceptIssueByKey request);
        IConceptIssueModel Any(CreateConceptIssue request);
        IConceptIssueModel Any(UpdateConceptIssue request);
        bool Any(DeactivateConceptIssue request);
        bool Any(DeactivateConceptIssueByKey request);
        bool Any(RemoveConceptIssue request);
        bool Any(RemoveConceptIssueByKey request);
    }

    public class ConceptIssuesServices : Service, IConceptIssuesServices
    {
        private readonly IConceptIssuesBusinessWorkflow workflow;

        public ConceptIssuesServices(IConceptIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IConceptIssueModel> Any(GetConceptIssues request) { return workflow.Search(request); }
        public List<IConceptIssueModel> Any(GetConceptIssuesAsListing request) { return workflow.Search(request, true); }
        public IConceptIssueModel Any(GetConceptIssue request) { return workflow.Get(request.ID); }
        public IConceptIssueModel Any(GetConceptIssueByKey request) { return workflow.Get(request.CustomKey); }
        public IConceptIssueModel Any(CreateConceptIssue request) { return workflow.Create(request); }
        public IConceptIssueModel Any(UpdateConceptIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateConceptIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateConceptIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveConceptIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveConceptIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
