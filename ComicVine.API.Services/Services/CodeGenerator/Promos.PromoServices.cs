// <auto-generated>
// <copyright file="Promos.IPromoModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Promo model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Promos
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class PromoModelBase : NameableEntityModelBase, IPromoModel
    {
        // Promo Properties
        public string Link { get; set; }
        // Related Objects
        public int PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        public int AuthorId { get; set; }
        public IPersonModel Author { get; set; }
        public int? ResourceTypeId { get; set; }
        public IResourceTypeModel ResourceType { get; set; }
        // Associated Objects
        // <None>
    }
    public class PromoSearchModelBase : NameableEntitySearchModelBase, IPromoSearchModel
    {
        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

        [ApiMember(Name = "AuthorId", IsRequired = false, Description = "Filter by the Related AuthorId")]
        public int? AuthorId { get; set; }

        [ApiMember(Name = "AuthorCustomKey", IsRequired = false, Description = "Filter by the Related Author CustomKey (Equals, Case-Insensitive)")]
        public string AuthorCustomKey { get; set; }

        [ApiMember(Name = "AuthorApiDetailUrl", IsRequired = false, Description = "Filter by the Related Author Api Detail Url (Contains, Case-Insensitive)")]
        public string AuthorApiDetailUrl { get; set; }

        [ApiMember(Name = "AuthorSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Author Site Detail Url (Contains, Case-Insensitive)")]
        public string AuthorSiteDetailUrl { get; set; }

        [ApiMember(Name = "AuthorName", IsRequired = false, Description = "Filter by the Related Author Name (Contains, Case-Insensitive)")]
        public string AuthorName { get; set; }

        [ApiMember(Name = "AuthorShortDescription", IsRequired = false, Description = "Filter by the Related Author Short Description (Contains, Case-Insensitive)")]
        public string AuthorShortDescription { get; set; }

        [ApiMember(Name = "AuthorDescription", IsRequired = false, Description = "Filter by the Related Author Description (Contains, Case-Insensitive)")]
        public string AuthorDescription { get; set; }

        [ApiMember(Name = "ResourceTypeId", IsRequired = false, Description = "Filter by the Related ResourceTypeId")]
        public int? ResourceTypeId { get; set; }

        [ApiMember(Name = "ResourceTypeCustomKey", IsRequired = false, Description = "Filter by the Related ResourceType CustomKey (Equals, Case-Insensitive)")]
        public string ResourceTypeCustomKey { get; set; }

        [ApiMember(Name = "ResourceTypeApiDetailUrl", IsRequired = false, Description = "Filter by the Related ResourceType Api Detail Url (Contains, Case-Insensitive)")]
        public string ResourceTypeApiDetailUrl { get; set; }

        [ApiMember(Name = "ResourceTypeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related ResourceType Site Detail Url (Contains, Case-Insensitive)")]
        public string ResourceTypeSiteDetailUrl { get; set; }

        [ApiMember(Name = "ResourceTypeName", IsRequired = false, Description = "Filter by the Related ResourceType Name (Contains, Case-Insensitive)")]
        public string ResourceTypeName { get; set; }

        [ApiMember(Name = "ResourceTypeShortDescription", IsRequired = false, Description = "Filter by the Related ResourceType Short Description (Contains, Case-Insensitive)")]
        public string ResourceTypeShortDescription { get; set; }

        [ApiMember(Name = "ResourceTypeDescription", IsRequired = false, Description = "Filter by the Related ResourceType Description (Contains, Case-Insensitive)")]
        public string ResourceTypeDescription { get; set; }

    }

    [Route("/Promos/", "GET", Summary = "Gets All Active Promos")]
    public class GetPromos : PromoSearchModelBase, IReturn<List<IPromoModel>> { }

    [Route("/Promos/Listing", "GET", Summary = "Gets All Active Promos with the mininum header information")]
    public class GetPromosAsListing : PromoSearchModelBase, IReturn<List<IPromoModel>> { }

    [Route("/Promos/{ID}", "GET", Summary = "Gets Promo by Identifier")]
    public class GetPromo : ImplementsID, IReturn<IPromoModel> { }

    [Route("/Promos/{CustomKey}/ByKey", "GET", Summary = "Gets Promo by Key")]
    public class GetPromoByKey : ImplementsKey, IReturn<IPromoModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/Create", "POST", Summary = "Creates an Promo with these contents")]
    public class CreatePromo : PromoModelBase, IReturn<IPromoModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/Update", "POST", Summary = "Updates an Promo with new contents")]
    public class UpdatePromo : PromoModelBase, IReturn<IPromoModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/{ID}/Deactivate", "POST", Summary = "Deactivates an Promo by Identifier")]
    public class DeactivatePromo : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Promo by Key")]
    public class DeactivatePromoByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/{ID}/Remove", "POST", Summary = "Removes an Promo by Identifier")]
    public class RemovePromo : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Promos/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Promo by Key")]
    public class RemovePromoByKey : ImplementsKey, IReturn<bool> { }

    public interface IPromosServices
    {
        List<IPromoModel> Any(GetPromos request);
        List<IPromoModel> Any(GetPromosAsListing request);
        IPromoModel Any(GetPromo request);
        IPromoModel Any(GetPromoByKey request);
        IPromoModel Any(CreatePromo request);
        IPromoModel Any(UpdatePromo request);
        bool Any(DeactivatePromo request);
        bool Any(DeactivatePromoByKey request);
        bool Any(RemovePromo request);
        bool Any(RemovePromoByKey request);
    }

    public class PromosServices : Service, IPromosServices
    {
        private readonly IPromosBusinessWorkflow workflow;

        public PromosServices(IPromosBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IPromoModel> Any(GetPromos request) { return workflow.Search(request); }
        public List<IPromoModel> Any(GetPromosAsListing request) { return workflow.Search(request, true); }
        public IPromoModel Any(GetPromo request) { return workflow.Get(request.ID); }
        public IPromoModel Any(GetPromoByKey request) { return workflow.Get(request.CustomKey); }
        public IPromoModel Any(CreatePromo request) { return workflow.Create(request); }
        public IPromoModel Any(UpdatePromo request) { return workflow.Update(request); }
        public bool Any(DeactivatePromo request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivatePromoByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemovePromo request) { return workflow.Remove(request.ID); }
        public bool Any(RemovePromoByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
