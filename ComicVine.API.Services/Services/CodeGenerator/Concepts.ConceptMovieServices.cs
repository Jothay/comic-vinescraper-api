// <auto-generated>
// <copyright file="Concepts.IConceptMovieModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptMovie model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class ConceptMovieModelBase : NameableEntityModelBase, IConceptMovieModel
    {
        // ConceptMovie Properties
        // <None>
        // Related Objects
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        // Associated Objects
        // <None>
    }
    public class ConceptMovieSearchModelBase : NameableEntitySearchModelBase, IConceptMovieSearchModel
    {
        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

    }

    [Route("/ConceptMovies/", "GET", Summary = "Gets All Active ConceptMovies")]
    public class GetConceptMovies : ConceptMovieSearchModelBase, IReturn<List<IConceptMovieModel>> { }

    [Route("/ConceptMovies/Listing", "GET", Summary = "Gets All Active ConceptMovies with the mininum header information")]
    public class GetConceptMoviesAsListing : ConceptMovieSearchModelBase, IReturn<List<IConceptMovieModel>> { }

    [Route("/ConceptMovies/{ID}", "GET", Summary = "Gets ConceptMovie by Identifier")]
    public class GetConceptMovie : ImplementsID, IReturn<IConceptMovieModel> { }

    [Route("/ConceptMovies/{CustomKey}/ByKey", "GET", Summary = "Gets ConceptMovie by Key")]
    public class GetConceptMovieByKey : ImplementsKey, IReturn<IConceptMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/Create", "POST", Summary = "Creates an ConceptMovie with these contents")]
    public class CreateConceptMovie : ConceptMovieModelBase, IReturn<IConceptMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/Update", "POST", Summary = "Updates an ConceptMovie with new contents")]
    public class UpdateConceptMovie : ConceptMovieModelBase, IReturn<IConceptMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/{ID}/Deactivate", "POST", Summary = "Deactivates an ConceptMovie by Identifier")]
    public class DeactivateConceptMovie : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ConceptMovie by Key")]
    public class DeactivateConceptMovieByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/{ID}/Remove", "POST", Summary = "Removes an ConceptMovie by Identifier")]
    public class RemoveConceptMovie : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ConceptMovies/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ConceptMovie by Key")]
    public class RemoveConceptMovieByKey : ImplementsKey, IReturn<bool> { }

    public interface IConceptMoviesServices
    {
        List<IConceptMovieModel> Any(GetConceptMovies request);
        List<IConceptMovieModel> Any(GetConceptMoviesAsListing request);
        IConceptMovieModel Any(GetConceptMovie request);
        IConceptMovieModel Any(GetConceptMovieByKey request);
        IConceptMovieModel Any(CreateConceptMovie request);
        IConceptMovieModel Any(UpdateConceptMovie request);
        bool Any(DeactivateConceptMovie request);
        bool Any(DeactivateConceptMovieByKey request);
        bool Any(RemoveConceptMovie request);
        bool Any(RemoveConceptMovieByKey request);
    }

    public class ConceptMoviesServices : Service, IConceptMoviesServices
    {
        private readonly IConceptMoviesBusinessWorkflow workflow;

        public ConceptMoviesServices(IConceptMoviesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IConceptMovieModel> Any(GetConceptMovies request) { return workflow.Search(request); }
        public List<IConceptMovieModel> Any(GetConceptMoviesAsListing request) { return workflow.Search(request, true); }
        public IConceptMovieModel Any(GetConceptMovie request) { return workflow.Get(request.ID); }
        public IConceptMovieModel Any(GetConceptMovieByKey request) { return workflow.Get(request.CustomKey); }
        public IConceptMovieModel Any(CreateConceptMovie request) { return workflow.Create(request); }
        public IConceptMovieModel Any(UpdateConceptMovie request) { return workflow.Update(request); }
        public bool Any(DeactivateConceptMovie request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateConceptMovieByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveConceptMovie request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveConceptMovieByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
