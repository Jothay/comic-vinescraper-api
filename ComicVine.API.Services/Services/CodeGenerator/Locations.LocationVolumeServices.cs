// <auto-generated>
// <copyright file="Locations.ILocationVolumeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationVolume model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class LocationVolumeModelBase : NameableEntityModelBase, ILocationVolumeModel
    {
        // LocationVolume Properties
        // <None>
        // Related Objects
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        public int VolumeId { get; set; }
        public IVolumeModel Volume { get; set; }
        // Associated Objects
        // <None>
    }
    public class LocationVolumeSearchModelBase : NameableEntitySearchModelBase, ILocationVolumeSearchModel
    {
        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

        [ApiMember(Name = "VolumeId", IsRequired = false, Description = "Filter by the Related VolumeId")]
        public int? VolumeId { get; set; }

        [ApiMember(Name = "VolumeCustomKey", IsRequired = false, Description = "Filter by the Related Volume CustomKey (Equals, Case-Insensitive)")]
        public string VolumeCustomKey { get; set; }

        [ApiMember(Name = "VolumeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Api Detail Url (Contains, Case-Insensitive)")]
        public string VolumeApiDetailUrl { get; set; }

        [ApiMember(Name = "VolumeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Site Detail Url (Contains, Case-Insensitive)")]
        public string VolumeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VolumeName", IsRequired = false, Description = "Filter by the Related Volume Name (Contains, Case-Insensitive)")]
        public string VolumeName { get; set; }

        [ApiMember(Name = "VolumeShortDescription", IsRequired = false, Description = "Filter by the Related Volume Short Description (Contains, Case-Insensitive)")]
        public string VolumeShortDescription { get; set; }

        [ApiMember(Name = "VolumeDescription", IsRequired = false, Description = "Filter by the Related Volume Description (Contains, Case-Insensitive)")]
        public string VolumeDescription { get; set; }

    }

    [Route("/LocationVolumes/", "GET", Summary = "Gets All Active LocationVolumes")]
    public class GetLocationVolumes : LocationVolumeSearchModelBase, IReturn<List<ILocationVolumeModel>> { }

    [Route("/LocationVolumes/Listing", "GET", Summary = "Gets All Active LocationVolumes with the mininum header information")]
    public class GetLocationVolumesAsListing : LocationVolumeSearchModelBase, IReturn<List<ILocationVolumeModel>> { }

    [Route("/LocationVolumes/{ID}", "GET", Summary = "Gets LocationVolume by Identifier")]
    public class GetLocationVolume : ImplementsID, IReturn<ILocationVolumeModel> { }

    [Route("/LocationVolumes/{CustomKey}/ByKey", "GET", Summary = "Gets LocationVolume by Key")]
    public class GetLocationVolumeByKey : ImplementsKey, IReturn<ILocationVolumeModel> { }

    //[Authenticate]
    [Route("/LocationVolumes/Create", "POST", Summary = "Creates an LocationVolume with these contents")]
    public class CreateLocationVolume : LocationVolumeModelBase, IReturn<ILocationVolumeModel> { }

    //[Authenticate]
    [Route("/LocationVolumes/Update", "POST", Summary = "Updates an LocationVolume with new contents")]
    public class UpdateLocationVolume : LocationVolumeModelBase, IReturn<ILocationVolumeModel> { }

    //[Authenticate]
    [Route("/LocationVolumes/{ID}/Deactivate", "POST", Summary = "Deactivates an LocationVolume by Identifier")]
    public class DeactivateLocationVolume : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/LocationVolumes/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an LocationVolume by Key")]
    public class DeactivateLocationVolumeByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/LocationVolumes/{ID}/Remove", "POST", Summary = "Removes an LocationVolume by Identifier")]
    public class RemoveLocationVolume : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/LocationVolumes/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an LocationVolume by Key")]
    public class RemoveLocationVolumeByKey : ImplementsKey, IReturn<bool> { }

    public interface ILocationVolumesServices
    {
        List<ILocationVolumeModel> Any(GetLocationVolumes request);
        List<ILocationVolumeModel> Any(GetLocationVolumesAsListing request);
        ILocationVolumeModel Any(GetLocationVolume request);
        ILocationVolumeModel Any(GetLocationVolumeByKey request);
        ILocationVolumeModel Any(CreateLocationVolume request);
        ILocationVolumeModel Any(UpdateLocationVolume request);
        bool Any(DeactivateLocationVolume request);
        bool Any(DeactivateLocationVolumeByKey request);
        bool Any(RemoveLocationVolume request);
        bool Any(RemoveLocationVolumeByKey request);
    }

    public class LocationVolumesServices : Service, ILocationVolumesServices
    {
        private readonly ILocationVolumesBusinessWorkflow workflow;

        public LocationVolumesServices(ILocationVolumesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ILocationVolumeModel> Any(GetLocationVolumes request) { return workflow.Search(request); }
        public List<ILocationVolumeModel> Any(GetLocationVolumesAsListing request) { return workflow.Search(request, true); }
        public ILocationVolumeModel Any(GetLocationVolume request) { return workflow.Get(request.ID); }
        public ILocationVolumeModel Any(GetLocationVolumeByKey request) { return workflow.Get(request.CustomKey); }
        public ILocationVolumeModel Any(CreateLocationVolume request) { return workflow.Create(request); }
        public ILocationVolumeModel Any(UpdateLocationVolume request) { return workflow.Update(request); }
        public bool Any(DeactivateLocationVolume request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateLocationVolumeByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveLocationVolume request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveLocationVolumeByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
