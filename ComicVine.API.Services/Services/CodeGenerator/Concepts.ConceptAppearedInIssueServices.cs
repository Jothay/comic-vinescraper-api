// <auto-generated>
// <copyright file="Concepts.IConceptAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class ConceptAppearedInIssueModelBase : NameableEntityModelBase, IConceptAppearedInIssueModel
    {
        // ConceptAppearedInIssue Properties
        // <None>
        // Related Objects
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        public int AppearedInIssueId { get; set; }
        public IIssueModel AppearedInIssue { get; set; }
        // Associated Objects
        // <None>
    }
    public class ConceptAppearedInIssueSearchModelBase : NameableEntitySearchModelBase, IConceptAppearedInIssueSearchModel
    {
        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueId", IsRequired = false, Description = "Filter by the Related AppearedInIssueId")]
        public int? AppearedInIssueId { get; set; }

        [ApiMember(Name = "AppearedInIssueCustomKey", IsRequired = false, Description = "Filter by the Related AppearedInIssue CustomKey (Equals, Case-Insensitive)")]
        public string AppearedInIssueCustomKey { get; set; }

        [ApiMember(Name = "AppearedInIssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Api Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueApiDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Site Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueName", IsRequired = false, Description = "Filter by the Related AppearedInIssue Name (Contains, Case-Insensitive)")]
        public string AppearedInIssueName { get; set; }

        [ApiMember(Name = "AppearedInIssueShortDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Short Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueShortDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueDescription { get; set; }

    }

    [Route("/ConceptAppearedInIssues/", "GET", Summary = "Gets All Active ConceptAppearedInIssues")]
    public class GetConceptAppearedInIssues : ConceptAppearedInIssueSearchModelBase, IReturn<List<IConceptAppearedInIssueModel>> { }

    [Route("/ConceptAppearedInIssues/Listing", "GET", Summary = "Gets All Active ConceptAppearedInIssues with the mininum header information")]
    public class GetConceptAppearedInIssuesAsListing : ConceptAppearedInIssueSearchModelBase, IReturn<List<IConceptAppearedInIssueModel>> { }

    [Route("/ConceptAppearedInIssues/{ID}", "GET", Summary = "Gets ConceptAppearedInIssue by Identifier")]
    public class GetConceptAppearedInIssue : ImplementsID, IReturn<IConceptAppearedInIssueModel> { }

    [Route("/ConceptAppearedInIssues/{CustomKey}/ByKey", "GET", Summary = "Gets ConceptAppearedInIssue by Key")]
    public class GetConceptAppearedInIssueByKey : ImplementsKey, IReturn<IConceptAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/Create", "POST", Summary = "Creates an ConceptAppearedInIssue with these contents")]
    public class CreateConceptAppearedInIssue : ConceptAppearedInIssueModelBase, IReturn<IConceptAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/Update", "POST", Summary = "Updates an ConceptAppearedInIssue with new contents")]
    public class UpdateConceptAppearedInIssue : ConceptAppearedInIssueModelBase, IReturn<IConceptAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an ConceptAppearedInIssue by Identifier")]
    public class DeactivateConceptAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ConceptAppearedInIssue by Key")]
    public class DeactivateConceptAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/{ID}/Remove", "POST", Summary = "Removes an ConceptAppearedInIssue by Identifier")]
    public class RemoveConceptAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAppearedInIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ConceptAppearedInIssue by Key")]
    public class RemoveConceptAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface IConceptAppearedInIssuesServices
    {
        List<IConceptAppearedInIssueModel> Any(GetConceptAppearedInIssues request);
        List<IConceptAppearedInIssueModel> Any(GetConceptAppearedInIssuesAsListing request);
        IConceptAppearedInIssueModel Any(GetConceptAppearedInIssue request);
        IConceptAppearedInIssueModel Any(GetConceptAppearedInIssueByKey request);
        IConceptAppearedInIssueModel Any(CreateConceptAppearedInIssue request);
        IConceptAppearedInIssueModel Any(UpdateConceptAppearedInIssue request);
        bool Any(DeactivateConceptAppearedInIssue request);
        bool Any(DeactivateConceptAppearedInIssueByKey request);
        bool Any(RemoveConceptAppearedInIssue request);
        bool Any(RemoveConceptAppearedInIssueByKey request);
    }

    public class ConceptAppearedInIssuesServices : /*ServicesBase,*/ IConceptAppearedInIssuesServices
    {
        private readonly IConceptAppearedInIssuesBusinessWorkflow workflow;

        public ConceptAppearedInIssuesServices(IConceptAppearedInIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IConceptAppearedInIssueModel> Any(GetConceptAppearedInIssues request) { return workflow.Search(request); }
        public List<IConceptAppearedInIssueModel> Any(GetConceptAppearedInIssuesAsListing request) { return workflow.Search(request, true); }
        public IConceptAppearedInIssueModel Any(GetConceptAppearedInIssue request) { return workflow.Get(request.ID); }
        public IConceptAppearedInIssueModel Any(GetConceptAppearedInIssueByKey request) { return workflow.Get(request.CustomKey); }
        public IConceptAppearedInIssueModel Any(CreateConceptAppearedInIssue request) { return workflow.Create(request); }
        public IConceptAppearedInIssueModel Any(UpdateConceptAppearedInIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateConceptAppearedInIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateConceptAppearedInIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveConceptAppearedInIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveConceptAppearedInIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
