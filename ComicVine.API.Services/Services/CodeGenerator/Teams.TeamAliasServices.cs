// <auto-generated>
// <copyright file="Teams.ITeamAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class TeamAliasModelBase : NameableEntityModelBase, ITeamAliasModel
    {
        // TeamAlias Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamAliasSearchModelBase : NameableEntitySearchModelBase, ITeamAliasSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

    }

    [Route("/TeamAliases/", "GET", Summary = "Gets All Active TeamAliases")]
    public class GetTeamAliases : TeamAliasSearchModelBase, IReturn<List<ITeamAliasModel>> { }

    [Route("/TeamAliases/Listing", "GET", Summary = "Gets All Active TeamAliases with the mininum header information")]
    public class GetTeamAliasesAsListing : TeamAliasSearchModelBase, IReturn<List<ITeamAliasModel>> { }

    [Route("/TeamAliases/{ID}", "GET", Summary = "Gets TeamAlias by Identifier")]
    public class GetTeamAlias : ImplementsID, IReturn<ITeamAliasModel> { }

    [Route("/TeamAliases/{CustomKey}/ByKey", "GET", Summary = "Gets TeamAlias by Key")]
    public class GetTeamAliasByKey : ImplementsKey, IReturn<ITeamAliasModel> { }

    //[Authenticate]
    [Route("/TeamAliases/Create", "POST", Summary = "Creates an TeamAlias with these contents")]
    public class CreateTeamAlias : TeamAliasModelBase, IReturn<ITeamAliasModel> { }

    //[Authenticate]
    [Route("/TeamAliases/Update", "POST", Summary = "Updates an TeamAlias with new contents")]
    public class UpdateTeamAlias : TeamAliasModelBase, IReturn<ITeamAliasModel> { }

    //[Authenticate]
    [Route("/TeamAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamAlias by Identifier")]
    public class DeactivateTeamAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamAlias by Key")]
    public class DeactivateTeamAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAliases/{ID}/Remove", "POST", Summary = "Removes an TeamAlias by Identifier")]
    public class RemoveTeamAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamAlias by Key")]
    public class RemoveTeamAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamAliasesServices
    {
        List<ITeamAliasModel> Any(GetTeamAliases request);
        List<ITeamAliasModel> Any(GetTeamAliasesAsListing request);
        ITeamAliasModel Any(GetTeamAlias request);
        ITeamAliasModel Any(GetTeamAliasByKey request);
        ITeamAliasModel Any(CreateTeamAlias request);
        ITeamAliasModel Any(UpdateTeamAlias request);
        bool Any(DeactivateTeamAlias request);
        bool Any(DeactivateTeamAliasByKey request);
        bool Any(RemoveTeamAlias request);
        bool Any(RemoveTeamAliasByKey request);
    }

    public class TeamAliasesServices : /*ServicesBase,*/ ITeamAliasesServices
    {
        private readonly ITeamAliasesBusinessWorkflow workflow;

        public TeamAliasesServices(ITeamAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamAliasModel> Any(GetTeamAliases request) { return workflow.Search(request); }
        public List<ITeamAliasModel> Any(GetTeamAliasesAsListing request) { return workflow.Search(request, true); }
        public ITeamAliasModel Any(GetTeamAlias request) { return workflow.Get(request.ID); }
        public ITeamAliasModel Any(GetTeamAliasByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamAliasModel Any(CreateTeamAlias request) { return workflow.Create(request); }
        public ITeamAliasModel Any(UpdateTeamAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
