// <auto-generated>
// <copyright file="Volumes.IVolumeCharacterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeCharacter model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class VolumeCharacterModelBase : NameableEntityModelBase, IVolumeCharacterModel
    {
        // VolumeCharacter Properties
        // <None>
        // Related Objects
        public int VolumeId { get; set; }
        public IVolumeModel Volume { get; set; }
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        // Associated Objects
        // <None>
    }
    public class VolumeCharacterSearchModelBase : NameableEntitySearchModelBase, IVolumeCharacterSearchModel
    {
        [ApiMember(Name = "VolumeId", IsRequired = false, Description = "Filter by the Related VolumeId")]
        public int? VolumeId { get; set; }

        [ApiMember(Name = "VolumeCustomKey", IsRequired = false, Description = "Filter by the Related Volume CustomKey (Equals, Case-Insensitive)")]
        public string VolumeCustomKey { get; set; }

        [ApiMember(Name = "VolumeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Api Detail Url (Contains, Case-Insensitive)")]
        public string VolumeApiDetailUrl { get; set; }

        [ApiMember(Name = "VolumeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Site Detail Url (Contains, Case-Insensitive)")]
        public string VolumeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VolumeName", IsRequired = false, Description = "Filter by the Related Volume Name (Contains, Case-Insensitive)")]
        public string VolumeName { get; set; }

        [ApiMember(Name = "VolumeShortDescription", IsRequired = false, Description = "Filter by the Related Volume Short Description (Contains, Case-Insensitive)")]
        public string VolumeShortDescription { get; set; }

        [ApiMember(Name = "VolumeDescription", IsRequired = false, Description = "Filter by the Related Volume Description (Contains, Case-Insensitive)")]
        public string VolumeDescription { get; set; }

        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

    }

    [Route("/VolumeCharacters/", "GET", Summary = "Gets All Active VolumeCharacters")]
    public class GetVolumeCharacters : VolumeCharacterSearchModelBase, IReturn<List<IVolumeCharacterModel>> { }

    [Route("/VolumeCharacters/Listing", "GET", Summary = "Gets All Active VolumeCharacters with the mininum header information")]
    public class GetVolumeCharactersAsListing : VolumeCharacterSearchModelBase, IReturn<List<IVolumeCharacterModel>> { }

    [Route("/VolumeCharacters/{ID}", "GET", Summary = "Gets VolumeCharacter by Identifier")]
    public class GetVolumeCharacter : ImplementsID, IReturn<IVolumeCharacterModel> { }

    [Route("/VolumeCharacters/{CustomKey}/ByKey", "GET", Summary = "Gets VolumeCharacter by Key")]
    public class GetVolumeCharacterByKey : ImplementsKey, IReturn<IVolumeCharacterModel> { }

    //[Authenticate]
    [Route("/VolumeCharacters/Create", "POST", Summary = "Creates an VolumeCharacter with these contents")]
    public class CreateVolumeCharacter : VolumeCharacterModelBase, IReturn<IVolumeCharacterModel> { }

    //[Authenticate]
    [Route("/VolumeCharacters/Update", "POST", Summary = "Updates an VolumeCharacter with new contents")]
    public class UpdateVolumeCharacter : VolumeCharacterModelBase, IReturn<IVolumeCharacterModel> { }

    //[Authenticate]
    [Route("/VolumeCharacters/{ID}/Deactivate", "POST", Summary = "Deactivates an VolumeCharacter by Identifier")]
    public class DeactivateVolumeCharacter : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeCharacters/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an VolumeCharacter by Key")]
    public class DeactivateVolumeCharacterByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeCharacters/{ID}/Remove", "POST", Summary = "Removes an VolumeCharacter by Identifier")]
    public class RemoveVolumeCharacter : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeCharacters/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an VolumeCharacter by Key")]
    public class RemoveVolumeCharacterByKey : ImplementsKey, IReturn<bool> { }

    public interface IVolumeCharactersServices
    {
        List<IVolumeCharacterModel> Any(GetVolumeCharacters request);
        List<IVolumeCharacterModel> Any(GetVolumeCharactersAsListing request);
        IVolumeCharacterModel Any(GetVolumeCharacter request);
        IVolumeCharacterModel Any(GetVolumeCharacterByKey request);
        IVolumeCharacterModel Any(CreateVolumeCharacter request);
        IVolumeCharacterModel Any(UpdateVolumeCharacter request);
        bool Any(DeactivateVolumeCharacter request);
        bool Any(DeactivateVolumeCharacterByKey request);
        bool Any(RemoveVolumeCharacter request);
        bool Any(RemoveVolumeCharacterByKey request);
    }

    public class VolumeCharactersServices : /*ServicesBase,*/ IVolumeCharactersServices
    {
        private readonly IVolumeCharactersBusinessWorkflow workflow;

        public VolumeCharactersServices(IVolumeCharactersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IVolumeCharacterModel> Any(GetVolumeCharacters request) { return workflow.Search(request); }
        public List<IVolumeCharacterModel> Any(GetVolumeCharactersAsListing request) { return workflow.Search(request, true); }
        public IVolumeCharacterModel Any(GetVolumeCharacter request) { return workflow.Get(request.ID); }
        public IVolumeCharacterModel Any(GetVolumeCharacterByKey request) { return workflow.Get(request.CustomKey); }
        public IVolumeCharacterModel Any(CreateVolumeCharacter request) { return workflow.Create(request); }
        public IVolumeCharacterModel Any(UpdateVolumeCharacter request) { return workflow.Update(request); }
        public bool Any(DeactivateVolumeCharacter request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateVolumeCharacterByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveVolumeCharacter request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveVolumeCharacterByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
