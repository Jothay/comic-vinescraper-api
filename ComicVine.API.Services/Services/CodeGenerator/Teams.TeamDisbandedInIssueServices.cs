// <auto-generated>
// <copyright file="Teams.ITeamDisbandedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamDisbandedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class TeamDisbandedInIssueModelBase : NameableEntityModelBase, ITeamDisbandedInIssueModel
    {
        // TeamDisbandedInIssue Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        public int IssueId { get; set; }
        public IIssueModel Issue { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamDisbandedInIssueSearchModelBase : NameableEntitySearchModelBase, ITeamDisbandedInIssueSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

        [ApiMember(Name = "IssueId", IsRequired = false, Description = "Filter by the Related IssueId")]
        public int? IssueId { get; set; }

        [ApiMember(Name = "IssueCustomKey", IsRequired = false, Description = "Filter by the Related Issue CustomKey (Equals, Case-Insensitive)")]
        public string IssueCustomKey { get; set; }

        [ApiMember(Name = "IssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Api Detail Url (Contains, Case-Insensitive)")]
        public string IssueApiDetailUrl { get; set; }

        [ApiMember(Name = "IssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Site Detail Url (Contains, Case-Insensitive)")]
        public string IssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "IssueName", IsRequired = false, Description = "Filter by the Related Issue Name (Contains, Case-Insensitive)")]
        public string IssueName { get; set; }

        [ApiMember(Name = "IssueShortDescription", IsRequired = false, Description = "Filter by the Related Issue Short Description (Contains, Case-Insensitive)")]
        public string IssueShortDescription { get; set; }

        [ApiMember(Name = "IssueDescription", IsRequired = false, Description = "Filter by the Related Issue Description (Contains, Case-Insensitive)")]
        public string IssueDescription { get; set; }

    }

    [Route("/TeamDisbandedInIssues/", "GET", Summary = "Gets All Active TeamDisbandedInIssues")]
    public class GetTeamDisbandedInIssues : TeamDisbandedInIssueSearchModelBase, IReturn<List<ITeamDisbandedInIssueModel>> { }

    [Route("/TeamDisbandedInIssues/Listing", "GET", Summary = "Gets All Active TeamDisbandedInIssues with the mininum header information")]
    public class GetTeamDisbandedInIssuesAsListing : TeamDisbandedInIssueSearchModelBase, IReturn<List<ITeamDisbandedInIssueModel>> { }

    [Route("/TeamDisbandedInIssues/{ID}", "GET", Summary = "Gets TeamDisbandedInIssue by Identifier")]
    public class GetTeamDisbandedInIssue : ImplementsID, IReturn<ITeamDisbandedInIssueModel> { }

    [Route("/TeamDisbandedInIssues/{CustomKey}/ByKey", "GET", Summary = "Gets TeamDisbandedInIssue by Key")]
    public class GetTeamDisbandedInIssueByKey : ImplementsKey, IReturn<ITeamDisbandedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/Create", "POST", Summary = "Creates an TeamDisbandedInIssue with these contents")]
    public class CreateTeamDisbandedInIssue : TeamDisbandedInIssueModelBase, IReturn<ITeamDisbandedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/Update", "POST", Summary = "Updates an TeamDisbandedInIssue with new contents")]
    public class UpdateTeamDisbandedInIssue : TeamDisbandedInIssueModelBase, IReturn<ITeamDisbandedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamDisbandedInIssue by Identifier")]
    public class DeactivateTeamDisbandedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamDisbandedInIssue by Key")]
    public class DeactivateTeamDisbandedInIssueByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/{ID}/Remove", "POST", Summary = "Removes an TeamDisbandedInIssue by Identifier")]
    public class RemoveTeamDisbandedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamDisbandedInIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamDisbandedInIssue by Key")]
    public class RemoveTeamDisbandedInIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamDisbandedInIssuesServices
    {
        List<ITeamDisbandedInIssueModel> Any(GetTeamDisbandedInIssues request);
        List<ITeamDisbandedInIssueModel> Any(GetTeamDisbandedInIssuesAsListing request);
        ITeamDisbandedInIssueModel Any(GetTeamDisbandedInIssue request);
        ITeamDisbandedInIssueModel Any(GetTeamDisbandedInIssueByKey request);
        ITeamDisbandedInIssueModel Any(CreateTeamDisbandedInIssue request);
        ITeamDisbandedInIssueModel Any(UpdateTeamDisbandedInIssue request);
        bool Any(DeactivateTeamDisbandedInIssue request);
        bool Any(DeactivateTeamDisbandedInIssueByKey request);
        bool Any(RemoveTeamDisbandedInIssue request);
        bool Any(RemoveTeamDisbandedInIssueByKey request);
    }

    public class TeamDisbandedInIssuesServices : /*ServicesBase,*/ ITeamDisbandedInIssuesServices
    {
        private readonly ITeamDisbandedInIssuesBusinessWorkflow workflow;

        public TeamDisbandedInIssuesServices(ITeamDisbandedInIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamDisbandedInIssueModel> Any(GetTeamDisbandedInIssues request) { return workflow.Search(request); }
        public List<ITeamDisbandedInIssueModel> Any(GetTeamDisbandedInIssuesAsListing request) { return workflow.Search(request, true); }
        public ITeamDisbandedInIssueModel Any(GetTeamDisbandedInIssue request) { return workflow.Get(request.ID); }
        public ITeamDisbandedInIssueModel Any(GetTeamDisbandedInIssueByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamDisbandedInIssueModel Any(CreateTeamDisbandedInIssue request) { return workflow.Create(request); }
        public ITeamDisbandedInIssueModel Any(UpdateTeamDisbandedInIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamDisbandedInIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamDisbandedInIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamDisbandedInIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamDisbandedInIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
