// <auto-generated>
// <copyright file="Volumes.IVolumeTeamModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeTeam model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class VolumeTeamModelBase : NameableEntityModelBase, IVolumeTeamModel
    {
        // VolumeTeam Properties
        // <None>
        // Related Objects
        public int VolumeId { get; set; }
        public IVolumeModel Volume { get; set; }
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        // Associated Objects
        // <None>
    }
    public class VolumeTeamSearchModelBase : NameableEntitySearchModelBase, IVolumeTeamSearchModel
    {
        [ApiMember(Name = "VolumeId", IsRequired = false, Description = "Filter by the Related VolumeId")]
        public int? VolumeId { get; set; }

        [ApiMember(Name = "VolumeCustomKey", IsRequired = false, Description = "Filter by the Related Volume CustomKey (Equals, Case-Insensitive)")]
        public string VolumeCustomKey { get; set; }

        [ApiMember(Name = "VolumeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Api Detail Url (Contains, Case-Insensitive)")]
        public string VolumeApiDetailUrl { get; set; }

        [ApiMember(Name = "VolumeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Site Detail Url (Contains, Case-Insensitive)")]
        public string VolumeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VolumeName", IsRequired = false, Description = "Filter by the Related Volume Name (Contains, Case-Insensitive)")]
        public string VolumeName { get; set; }

        [ApiMember(Name = "VolumeShortDescription", IsRequired = false, Description = "Filter by the Related Volume Short Description (Contains, Case-Insensitive)")]
        public string VolumeShortDescription { get; set; }

        [ApiMember(Name = "VolumeDescription", IsRequired = false, Description = "Filter by the Related Volume Description (Contains, Case-Insensitive)")]
        public string VolumeDescription { get; set; }

        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

    }

    [Route("/VolumeTeams/", "GET", Summary = "Gets All Active VolumeTeams")]
    public class GetVolumeTeams : VolumeTeamSearchModelBase, IReturn<List<IVolumeTeamModel>> { }

    [Route("/VolumeTeams/Listing", "GET", Summary = "Gets All Active VolumeTeams with the mininum header information")]
    public class GetVolumeTeamsAsListing : VolumeTeamSearchModelBase, IReturn<List<IVolumeTeamModel>> { }

    [Route("/VolumeTeams/{ID}", "GET", Summary = "Gets VolumeTeam by Identifier")]
    public class GetVolumeTeam : ImplementsID, IReturn<IVolumeTeamModel> { }

    [Route("/VolumeTeams/{CustomKey}/ByKey", "GET", Summary = "Gets VolumeTeam by Key")]
    public class GetVolumeTeamByKey : ImplementsKey, IReturn<IVolumeTeamModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/Create", "POST", Summary = "Creates an VolumeTeam with these contents")]
    public class CreateVolumeTeam : VolumeTeamModelBase, IReturn<IVolumeTeamModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/Update", "POST", Summary = "Updates an VolumeTeam with new contents")]
    public class UpdateVolumeTeam : VolumeTeamModelBase, IReturn<IVolumeTeamModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/{ID}/Deactivate", "POST", Summary = "Deactivates an VolumeTeam by Identifier")]
    public class DeactivateVolumeTeam : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an VolumeTeam by Key")]
    public class DeactivateVolumeTeamByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/{ID}/Remove", "POST", Summary = "Removes an VolumeTeam by Identifier")]
    public class RemoveVolumeTeam : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VolumeTeams/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an VolumeTeam by Key")]
    public class RemoveVolumeTeamByKey : ImplementsKey, IReturn<bool> { }

    public interface IVolumeTeamsServices
    {
        List<IVolumeTeamModel> Any(GetVolumeTeams request);
        List<IVolumeTeamModel> Any(GetVolumeTeamsAsListing request);
        IVolumeTeamModel Any(GetVolumeTeam request);
        IVolumeTeamModel Any(GetVolumeTeamByKey request);
        IVolumeTeamModel Any(CreateVolumeTeam request);
        IVolumeTeamModel Any(UpdateVolumeTeam request);
        bool Any(DeactivateVolumeTeam request);
        bool Any(DeactivateVolumeTeamByKey request);
        bool Any(RemoveVolumeTeam request);
        bool Any(RemoveVolumeTeamByKey request);
    }

    public class VolumeTeamsServices : Service, IVolumeTeamsServices
    {
        private readonly IVolumeTeamsBusinessWorkflow workflow;

        public VolumeTeamsServices(IVolumeTeamsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IVolumeTeamModel> Any(GetVolumeTeams request) { return workflow.Search(request); }
        public List<IVolumeTeamModel> Any(GetVolumeTeamsAsListing request) { return workflow.Search(request, true); }
        public IVolumeTeamModel Any(GetVolumeTeam request) { return workflow.Get(request.ID); }
        public IVolumeTeamModel Any(GetVolumeTeamByKey request) { return workflow.Get(request.CustomKey); }
        public IVolumeTeamModel Any(CreateVolumeTeam request) { return workflow.Create(request); }
        public IVolumeTeamModel Any(UpdateVolumeTeam request) { return workflow.Update(request); }
        public bool Any(DeactivateVolumeTeam request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateVolumeTeamByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveVolumeTeam request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveVolumeTeamByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
