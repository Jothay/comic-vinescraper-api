// <auto-generated>
// <copyright file="Concepts.IConceptAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class ConceptAliasModelBase : NameableEntityModelBase, IConceptAliasModel
    {
        // ConceptAlias Properties
        // <None>
        // Related Objects
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        // Associated Objects
        // <None>
    }
    public class ConceptAliasSearchModelBase : NameableEntitySearchModelBase, IConceptAliasSearchModel
    {
        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

    }

    [Route("/ConceptAliases/", "GET", Summary = "Gets All Active ConceptAliases")]
    public class GetConceptAliases : ConceptAliasSearchModelBase, IReturn<List<IConceptAliasModel>> { }

    [Route("/ConceptAliases/Listing", "GET", Summary = "Gets All Active ConceptAliases with the mininum header information")]
    public class GetConceptAliasesAsListing : ConceptAliasSearchModelBase, IReturn<List<IConceptAliasModel>> { }

    [Route("/ConceptAliases/{ID}", "GET", Summary = "Gets ConceptAlias by Identifier")]
    public class GetConceptAlias : ImplementsID, IReturn<IConceptAliasModel> { }

    [Route("/ConceptAliases/{CustomKey}/ByKey", "GET", Summary = "Gets ConceptAlias by Key")]
    public class GetConceptAliasByKey : ImplementsKey, IReturn<IConceptAliasModel> { }

    //[Authenticate]
    [Route("/ConceptAliases/Create", "POST", Summary = "Creates an ConceptAlias with these contents")]
    public class CreateConceptAlias : ConceptAliasModelBase, IReturn<IConceptAliasModel> { }

    //[Authenticate]
    [Route("/ConceptAliases/Update", "POST", Summary = "Updates an ConceptAlias with new contents")]
    public class UpdateConceptAlias : ConceptAliasModelBase, IReturn<IConceptAliasModel> { }

    //[Authenticate]
    [Route("/ConceptAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an ConceptAlias by Identifier")]
    public class DeactivateConceptAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ConceptAlias by Key")]
    public class DeactivateConceptAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAliases/{ID}/Remove", "POST", Summary = "Removes an ConceptAlias by Identifier")]
    public class RemoveConceptAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ConceptAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ConceptAlias by Key")]
    public class RemoveConceptAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IConceptAliasesServices
    {
        List<IConceptAliasModel> Any(GetConceptAliases request);
        List<IConceptAliasModel> Any(GetConceptAliasesAsListing request);
        IConceptAliasModel Any(GetConceptAlias request);
        IConceptAliasModel Any(GetConceptAliasByKey request);
        IConceptAliasModel Any(CreateConceptAlias request);
        IConceptAliasModel Any(UpdateConceptAlias request);
        bool Any(DeactivateConceptAlias request);
        bool Any(DeactivateConceptAliasByKey request);
        bool Any(RemoveConceptAlias request);
        bool Any(RemoveConceptAliasByKey request);
    }

    public class ConceptAliasesServices : Service, IConceptAliasesServices
    {
        private readonly IConceptAliasesBusinessWorkflow workflow;

        public ConceptAliasesServices(IConceptAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IConceptAliasModel> Any(GetConceptAliases request) { return workflow.Search(request); }
        public List<IConceptAliasModel> Any(GetConceptAliasesAsListing request) { return workflow.Search(request, true); }
        public IConceptAliasModel Any(GetConceptAlias request) { return workflow.Get(request.ID); }
        public IConceptAliasModel Any(GetConceptAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IConceptAliasModel Any(CreateConceptAlias request) { return workflow.Create(request); }
        public IConceptAliasModel Any(UpdateConceptAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateConceptAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateConceptAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveConceptAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveConceptAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
