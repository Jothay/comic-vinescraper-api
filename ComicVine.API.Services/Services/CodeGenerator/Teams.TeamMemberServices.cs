// <auto-generated>
// <copyright file="Teams.ITeamMemberModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMember model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class TeamMemberModelBase : NameableEntityModelBase, ITeamMemberModel
    {
        // TeamMember Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamMemberSearchModelBase : NameableEntitySearchModelBase, ITeamMemberSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

    }

    [Route("/TeamMembers/", "GET", Summary = "Gets All Active TeamMembers")]
    public class GetTeamMembers : TeamMemberSearchModelBase, IReturn<List<ITeamMemberModel>> { }

    [Route("/TeamMembers/Listing", "GET", Summary = "Gets All Active TeamMembers with the mininum header information")]
    public class GetTeamMembersAsListing : TeamMemberSearchModelBase, IReturn<List<ITeamMemberModel>> { }

    [Route("/TeamMembers/{ID}", "GET", Summary = "Gets TeamMember by Identifier")]
    public class GetTeamMember : ImplementsID, IReturn<ITeamMemberModel> { }

    [Route("/TeamMembers/{CustomKey}/ByKey", "GET", Summary = "Gets TeamMember by Key")]
    public class GetTeamMemberByKey : ImplementsKey, IReturn<ITeamMemberModel> { }

    //[Authenticate]
    [Route("/TeamMembers/Create", "POST", Summary = "Creates an TeamMember with these contents")]
    public class CreateTeamMember : TeamMemberModelBase, IReturn<ITeamMemberModel> { }

    //[Authenticate]
    [Route("/TeamMembers/Update", "POST", Summary = "Updates an TeamMember with new contents")]
    public class UpdateTeamMember : TeamMemberModelBase, IReturn<ITeamMemberModel> { }

    //[Authenticate]
    [Route("/TeamMembers/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamMember by Identifier")]
    public class DeactivateTeamMember : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMembers/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamMember by Key")]
    public class DeactivateTeamMemberByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMembers/{ID}/Remove", "POST", Summary = "Removes an TeamMember by Identifier")]
    public class RemoveTeamMember : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMembers/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamMember by Key")]
    public class RemoveTeamMemberByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamMembersServices
    {
        List<ITeamMemberModel> Any(GetTeamMembers request);
        List<ITeamMemberModel> Any(GetTeamMembersAsListing request);
        ITeamMemberModel Any(GetTeamMember request);
        ITeamMemberModel Any(GetTeamMemberByKey request);
        ITeamMemberModel Any(CreateTeamMember request);
        ITeamMemberModel Any(UpdateTeamMember request);
        bool Any(DeactivateTeamMember request);
        bool Any(DeactivateTeamMemberByKey request);
        bool Any(RemoveTeamMember request);
        bool Any(RemoveTeamMemberByKey request);
    }

    public class TeamMembersServices : Service, ITeamMembersServices
    {
        private readonly ITeamMembersBusinessWorkflow workflow;

        public TeamMembersServices(ITeamMembersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamMemberModel> Any(GetTeamMembers request) { return workflow.Search(request); }
        public List<ITeamMemberModel> Any(GetTeamMembersAsListing request) { return workflow.Search(request, true); }
        public ITeamMemberModel Any(GetTeamMember request) { return workflow.Get(request.ID); }
        public ITeamMemberModel Any(GetTeamMemberByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamMemberModel Any(CreateTeamMember request) { return workflow.Create(request); }
        public ITeamMemberModel Any(UpdateTeamMember request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamMember request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamMemberByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamMember request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamMemberByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
