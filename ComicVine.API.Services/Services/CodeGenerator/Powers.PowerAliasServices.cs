// <auto-generated>
// <copyright file="Powers.IPowerAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PowerAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Powers
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class PowerAliasModelBase : NameableEntityModelBase, IPowerAliasModel
    {
        // PowerAlias Properties
        // <None>
        // Related Objects
        public int PowerId { get; set; }
        public IPowerModel Power { get; set; }
        // Associated Objects
        // <None>
    }
    public class PowerAliasSearchModelBase : NameableEntitySearchModelBase, IPowerAliasSearchModel
    {
        [ApiMember(Name = "PowerId", IsRequired = false, Description = "Filter by the Related PowerId")]
        public int? PowerId { get; set; }

        [ApiMember(Name = "PowerCustomKey", IsRequired = false, Description = "Filter by the Related Power CustomKey (Equals, Case-Insensitive)")]
        public string PowerCustomKey { get; set; }

        [ApiMember(Name = "PowerApiDetailUrl", IsRequired = false, Description = "Filter by the Related Power Api Detail Url (Contains, Case-Insensitive)")]
        public string PowerApiDetailUrl { get; set; }

        [ApiMember(Name = "PowerSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Power Site Detail Url (Contains, Case-Insensitive)")]
        public string PowerSiteDetailUrl { get; set; }

        [ApiMember(Name = "PowerName", IsRequired = false, Description = "Filter by the Related Power Name (Contains, Case-Insensitive)")]
        public string PowerName { get; set; }

        [ApiMember(Name = "PowerShortDescription", IsRequired = false, Description = "Filter by the Related Power Short Description (Contains, Case-Insensitive)")]
        public string PowerShortDescription { get; set; }

        [ApiMember(Name = "PowerDescription", IsRequired = false, Description = "Filter by the Related Power Description (Contains, Case-Insensitive)")]
        public string PowerDescription { get; set; }

    }

    [Route("/PowerAliases/", "GET", Summary = "Gets All Active PowerAliases")]
    public class GetPowerAliases : PowerAliasSearchModelBase, IReturn<List<IPowerAliasModel>> { }

    [Route("/PowerAliases/Listing", "GET", Summary = "Gets All Active PowerAliases with the mininum header information")]
    public class GetPowerAliasesAsListing : PowerAliasSearchModelBase, IReturn<List<IPowerAliasModel>> { }

    [Route("/PowerAliases/{ID}", "GET", Summary = "Gets PowerAlias by Identifier")]
    public class GetPowerAlias : ImplementsID, IReturn<IPowerAliasModel> { }

    [Route("/PowerAliases/{CustomKey}/ByKey", "GET", Summary = "Gets PowerAlias by Key")]
    public class GetPowerAliasByKey : ImplementsKey, IReturn<IPowerAliasModel> { }

    //[Authenticate]
    [Route("/PowerAliases/Create", "POST", Summary = "Creates an PowerAlias with these contents")]
    public class CreatePowerAlias : PowerAliasModelBase, IReturn<IPowerAliasModel> { }

    //[Authenticate]
    [Route("/PowerAliases/Update", "POST", Summary = "Updates an PowerAlias with new contents")]
    public class UpdatePowerAlias : PowerAliasModelBase, IReturn<IPowerAliasModel> { }

    //[Authenticate]
    [Route("/PowerAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an PowerAlias by Identifier")]
    public class DeactivatePowerAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/PowerAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an PowerAlias by Key")]
    public class DeactivatePowerAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/PowerAliases/{ID}/Remove", "POST", Summary = "Removes an PowerAlias by Identifier")]
    public class RemovePowerAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/PowerAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an PowerAlias by Key")]
    public class RemovePowerAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IPowerAliasesServices
    {
        List<IPowerAliasModel> Any(GetPowerAliases request);
        List<IPowerAliasModel> Any(GetPowerAliasesAsListing request);
        IPowerAliasModel Any(GetPowerAlias request);
        IPowerAliasModel Any(GetPowerAliasByKey request);
        IPowerAliasModel Any(CreatePowerAlias request);
        IPowerAliasModel Any(UpdatePowerAlias request);
        bool Any(DeactivatePowerAlias request);
        bool Any(DeactivatePowerAliasByKey request);
        bool Any(RemovePowerAlias request);
        bool Any(RemovePowerAliasByKey request);
    }

    public class PowerAliasesServices : Service, IPowerAliasesServices
    {
        private readonly IPowerAliasesBusinessWorkflow workflow;

        public PowerAliasesServices(IPowerAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IPowerAliasModel> Any(GetPowerAliases request) { return workflow.Search(request); }
        public List<IPowerAliasModel> Any(GetPowerAliasesAsListing request) { return workflow.Search(request, true); }
        public IPowerAliasModel Any(GetPowerAlias request) { return workflow.Get(request.ID); }
        public IPowerAliasModel Any(GetPowerAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IPowerAliasModel Any(CreatePowerAlias request) { return workflow.Create(request); }
        public IPowerAliasModel Any(UpdatePowerAlias request) { return workflow.Update(request); }
        public bool Any(DeactivatePowerAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivatePowerAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemovePowerAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemovePowerAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
