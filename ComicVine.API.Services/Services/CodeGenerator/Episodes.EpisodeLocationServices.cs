// <auto-generated>
// <copyright file="Episodes.IEpisodeLocationModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeLocation model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class EpisodeLocationModelBase : NameableEntityModelBase, IEpisodeLocationModel
    {
        // EpisodeLocation Properties
        // <None>
        // Related Objects
        public int EpisodeId { get; set; }
        public IEpisodeModel Episode { get; set; }
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        // Associated Objects
        // <None>
    }
    public class EpisodeLocationSearchModelBase : NameableEntitySearchModelBase, IEpisodeLocationSearchModel
    {
        [ApiMember(Name = "EpisodeId", IsRequired = false, Description = "Filter by the Related EpisodeId")]
        public int? EpisodeId { get; set; }

        [ApiMember(Name = "EpisodeCustomKey", IsRequired = false, Description = "Filter by the Related Episode CustomKey (Equals, Case-Insensitive)")]
        public string EpisodeCustomKey { get; set; }

        [ApiMember(Name = "EpisodeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Api Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeApiDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Site Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeSiteDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeName", IsRequired = false, Description = "Filter by the Related Episode Name (Contains, Case-Insensitive)")]
        public string EpisodeName { get; set; }

        [ApiMember(Name = "EpisodeShortDescription", IsRequired = false, Description = "Filter by the Related Episode Short Description (Contains, Case-Insensitive)")]
        public string EpisodeShortDescription { get; set; }

        [ApiMember(Name = "EpisodeDescription", IsRequired = false, Description = "Filter by the Related Episode Description (Contains, Case-Insensitive)")]
        public string EpisodeDescription { get; set; }

        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

    }

    [Route("/EpisodeLocations/", "GET", Summary = "Gets All Active EpisodeLocations")]
    public class GetEpisodeLocations : EpisodeLocationSearchModelBase, IReturn<List<IEpisodeLocationModel>> { }

    [Route("/EpisodeLocations/Listing", "GET", Summary = "Gets All Active EpisodeLocations with the mininum header information")]
    public class GetEpisodeLocationsAsListing : EpisodeLocationSearchModelBase, IReturn<List<IEpisodeLocationModel>> { }

    [Route("/EpisodeLocations/{ID}", "GET", Summary = "Gets EpisodeLocation by Identifier")]
    public class GetEpisodeLocation : ImplementsID, IReturn<IEpisodeLocationModel> { }

    [Route("/EpisodeLocations/{CustomKey}/ByKey", "GET", Summary = "Gets EpisodeLocation by Key")]
    public class GetEpisodeLocationByKey : ImplementsKey, IReturn<IEpisodeLocationModel> { }

    //[Authenticate]
    [Route("/EpisodeLocations/Create", "POST", Summary = "Creates an EpisodeLocation with these contents")]
    public class CreateEpisodeLocation : EpisodeLocationModelBase, IReturn<IEpisodeLocationModel> { }

    //[Authenticate]
    [Route("/EpisodeLocations/Update", "POST", Summary = "Updates an EpisodeLocation with new contents")]
    public class UpdateEpisodeLocation : EpisodeLocationModelBase, IReturn<IEpisodeLocationModel> { }

    //[Authenticate]
    [Route("/EpisodeLocations/{ID}/Deactivate", "POST", Summary = "Deactivates an EpisodeLocation by Identifier")]
    public class DeactivateEpisodeLocation : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/EpisodeLocations/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an EpisodeLocation by Key")]
    public class DeactivateEpisodeLocationByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/EpisodeLocations/{ID}/Remove", "POST", Summary = "Removes an EpisodeLocation by Identifier")]
    public class RemoveEpisodeLocation : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/EpisodeLocations/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an EpisodeLocation by Key")]
    public class RemoveEpisodeLocationByKey : ImplementsKey, IReturn<bool> { }

    public interface IEpisodeLocationsServices
    {
        List<IEpisodeLocationModel> Any(GetEpisodeLocations request);
        List<IEpisodeLocationModel> Any(GetEpisodeLocationsAsListing request);
        IEpisodeLocationModel Any(GetEpisodeLocation request);
        IEpisodeLocationModel Any(GetEpisodeLocationByKey request);
        IEpisodeLocationModel Any(CreateEpisodeLocation request);
        IEpisodeLocationModel Any(UpdateEpisodeLocation request);
        bool Any(DeactivateEpisodeLocation request);
        bool Any(DeactivateEpisodeLocationByKey request);
        bool Any(RemoveEpisodeLocation request);
        bool Any(RemoveEpisodeLocationByKey request);
    }

    public class EpisodeLocationsServices : Service, IEpisodeLocationsServices
    {
        private readonly IEpisodeLocationsBusinessWorkflow workflow;

        public EpisodeLocationsServices(IEpisodeLocationsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IEpisodeLocationModel> Any(GetEpisodeLocations request) { return workflow.Search(request); }
        public List<IEpisodeLocationModel> Any(GetEpisodeLocationsAsListing request) { return workflow.Search(request, true); }
        public IEpisodeLocationModel Any(GetEpisodeLocation request) { return workflow.Get(request.ID); }
        public IEpisodeLocationModel Any(GetEpisodeLocationByKey request) { return workflow.Get(request.CustomKey); }
        public IEpisodeLocationModel Any(CreateEpisodeLocation request) { return workflow.Create(request); }
        public IEpisodeLocationModel Any(UpdateEpisodeLocation request) { return workflow.Update(request); }
        public bool Any(DeactivateEpisodeLocation request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateEpisodeLocationByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveEpisodeLocation request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveEpisodeLocationByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
