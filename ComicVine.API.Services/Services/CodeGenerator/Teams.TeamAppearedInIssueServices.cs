// <auto-generated>
// <copyright file="Teams.ITeamAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class TeamAppearedInIssueModelBase : NameableEntityModelBase, ITeamAppearedInIssueModel
    {
        // TeamAppearedInIssue Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        public int IssueId { get; set; }
        public IIssueModel Issue { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamAppearedInIssueSearchModelBase : NameableEntitySearchModelBase, ITeamAppearedInIssueSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

        [ApiMember(Name = "IssueId", IsRequired = false, Description = "Filter by the Related IssueId")]
        public int? IssueId { get; set; }

        [ApiMember(Name = "IssueCustomKey", IsRequired = false, Description = "Filter by the Related Issue CustomKey (Equals, Case-Insensitive)")]
        public string IssueCustomKey { get; set; }

        [ApiMember(Name = "IssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Api Detail Url (Contains, Case-Insensitive)")]
        public string IssueApiDetailUrl { get; set; }

        [ApiMember(Name = "IssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Site Detail Url (Contains, Case-Insensitive)")]
        public string IssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "IssueName", IsRequired = false, Description = "Filter by the Related Issue Name (Contains, Case-Insensitive)")]
        public string IssueName { get; set; }

        [ApiMember(Name = "IssueShortDescription", IsRequired = false, Description = "Filter by the Related Issue Short Description (Contains, Case-Insensitive)")]
        public string IssueShortDescription { get; set; }

        [ApiMember(Name = "IssueDescription", IsRequired = false, Description = "Filter by the Related Issue Description (Contains, Case-Insensitive)")]
        public string IssueDescription { get; set; }

    }

    [Route("/TeamAppearedInIssues/", "GET", Summary = "Gets All Active TeamAppearedInIssues")]
    public class GetTeamAppearedInIssues : TeamAppearedInIssueSearchModelBase, IReturn<List<ITeamAppearedInIssueModel>> { }

    [Route("/TeamAppearedInIssues/Listing", "GET", Summary = "Gets All Active TeamAppearedInIssues with the mininum header information")]
    public class GetTeamAppearedInIssuesAsListing : TeamAppearedInIssueSearchModelBase, IReturn<List<ITeamAppearedInIssueModel>> { }

    [Route("/TeamAppearedInIssues/{ID}", "GET", Summary = "Gets TeamAppearedInIssue by Identifier")]
    public class GetTeamAppearedInIssue : ImplementsID, IReturn<ITeamAppearedInIssueModel> { }

    [Route("/TeamAppearedInIssues/{CustomKey}/ByKey", "GET", Summary = "Gets TeamAppearedInIssue by Key")]
    public class GetTeamAppearedInIssueByKey : ImplementsKey, IReturn<ITeamAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/Create", "POST", Summary = "Creates an TeamAppearedInIssue with these contents")]
    public class CreateTeamAppearedInIssue : TeamAppearedInIssueModelBase, IReturn<ITeamAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/Update", "POST", Summary = "Updates an TeamAppearedInIssue with new contents")]
    public class UpdateTeamAppearedInIssue : TeamAppearedInIssueModelBase, IReturn<ITeamAppearedInIssueModel> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamAppearedInIssue by Identifier")]
    public class DeactivateTeamAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamAppearedInIssue by Key")]
    public class DeactivateTeamAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/{ID}/Remove", "POST", Summary = "Removes an TeamAppearedInIssue by Identifier")]
    public class RemoveTeamAppearedInIssue : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamAppearedInIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamAppearedInIssue by Key")]
    public class RemoveTeamAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamAppearedInIssuesServices
    {
        List<ITeamAppearedInIssueModel> Any(GetTeamAppearedInIssues request);
        List<ITeamAppearedInIssueModel> Any(GetTeamAppearedInIssuesAsListing request);
        ITeamAppearedInIssueModel Any(GetTeamAppearedInIssue request);
        ITeamAppearedInIssueModel Any(GetTeamAppearedInIssueByKey request);
        ITeamAppearedInIssueModel Any(CreateTeamAppearedInIssue request);
        ITeamAppearedInIssueModel Any(UpdateTeamAppearedInIssue request);
        bool Any(DeactivateTeamAppearedInIssue request);
        bool Any(DeactivateTeamAppearedInIssueByKey request);
        bool Any(RemoveTeamAppearedInIssue request);
        bool Any(RemoveTeamAppearedInIssueByKey request);
    }

    public class TeamAppearedInIssuesServices : /*ServicesBase,*/ ITeamAppearedInIssuesServices
    {
        private readonly ITeamAppearedInIssuesBusinessWorkflow workflow;

        public TeamAppearedInIssuesServices(ITeamAppearedInIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamAppearedInIssueModel> Any(GetTeamAppearedInIssues request) { return workflow.Search(request); }
        public List<ITeamAppearedInIssueModel> Any(GetTeamAppearedInIssuesAsListing request) { return workflow.Search(request, true); }
        public ITeamAppearedInIssueModel Any(GetTeamAppearedInIssue request) { return workflow.Get(request.ID); }
        public ITeamAppearedInIssueModel Any(GetTeamAppearedInIssueByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamAppearedInIssueModel Any(CreateTeamAppearedInIssue request) { return workflow.Create(request); }
        public ITeamAppearedInIssueModel Any(UpdateTeamAppearedInIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamAppearedInIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamAppearedInIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamAppearedInIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamAppearedInIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
