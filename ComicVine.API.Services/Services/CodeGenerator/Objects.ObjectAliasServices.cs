// <auto-generated>
// <copyright file="Objects.IObjectAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class ObjectAliasModelBase : NameableEntityModelBase, IObjectAliasModel
    {
        // ObjectAlias Properties
        // <None>
        // Related Objects
        public int ObjectId { get; set; }
        public IObjectModel Object { get; set; }
        // Associated Objects
        // <None>
    }
    public class ObjectAliasSearchModelBase : NameableEntitySearchModelBase, IObjectAliasSearchModel
    {
        [ApiMember(Name = "ObjectId", IsRequired = false, Description = "Filter by the Related ObjectId")]
        public int? ObjectId { get; set; }

        [ApiMember(Name = "ObjectCustomKey", IsRequired = false, Description = "Filter by the Related Object CustomKey (Equals, Case-Insensitive)")]
        public string ObjectCustomKey { get; set; }

        [ApiMember(Name = "ObjectApiDetailUrl", IsRequired = false, Description = "Filter by the Related Object Api Detail Url (Contains, Case-Insensitive)")]
        public string ObjectApiDetailUrl { get; set; }

        [ApiMember(Name = "ObjectSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Object Site Detail Url (Contains, Case-Insensitive)")]
        public string ObjectSiteDetailUrl { get; set; }

        [ApiMember(Name = "ObjectName", IsRequired = false, Description = "Filter by the Related Object Name (Contains, Case-Insensitive)")]
        public string ObjectName { get; set; }

        [ApiMember(Name = "ObjectShortDescription", IsRequired = false, Description = "Filter by the Related Object Short Description (Contains, Case-Insensitive)")]
        public string ObjectShortDescription { get; set; }

        [ApiMember(Name = "ObjectDescription", IsRequired = false, Description = "Filter by the Related Object Description (Contains, Case-Insensitive)")]
        public string ObjectDescription { get; set; }

    }

    [Route("/ObjectAliases/", "GET", Summary = "Gets All Active ObjectAliases")]
    public class GetObjectAliases : ObjectAliasSearchModelBase, IReturn<List<IObjectAliasModel>> { }

    [Route("/ObjectAliases/Listing", "GET", Summary = "Gets All Active ObjectAliases with the mininum header information")]
    public class GetObjectAliasesAsListing : ObjectAliasSearchModelBase, IReturn<List<IObjectAliasModel>> { }

    [Route("/ObjectAliases/{ID}", "GET", Summary = "Gets ObjectAlias by Identifier")]
    public class GetObjectAlias : ImplementsID, IReturn<IObjectAliasModel> { }

    [Route("/ObjectAliases/{CustomKey}/ByKey", "GET", Summary = "Gets ObjectAlias by Key")]
    public class GetObjectAliasByKey : ImplementsKey, IReturn<IObjectAliasModel> { }

    //[Authenticate]
    [Route("/ObjectAliases/Create", "POST", Summary = "Creates an ObjectAlias with these contents")]
    public class CreateObjectAlias : ObjectAliasModelBase, IReturn<IObjectAliasModel> { }

    //[Authenticate]
    [Route("/ObjectAliases/Update", "POST", Summary = "Updates an ObjectAlias with new contents")]
    public class UpdateObjectAlias : ObjectAliasModelBase, IReturn<IObjectAliasModel> { }

    //[Authenticate]
    [Route("/ObjectAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an ObjectAlias by Identifier")]
    public class DeactivateObjectAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ObjectAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ObjectAlias by Key")]
    public class DeactivateObjectAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/ObjectAliases/{ID}/Remove", "POST", Summary = "Removes an ObjectAlias by Identifier")]
    public class RemoveObjectAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/ObjectAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ObjectAlias by Key")]
    public class RemoveObjectAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IObjectAliasesServices
    {
        List<IObjectAliasModel> Any(GetObjectAliases request);
        List<IObjectAliasModel> Any(GetObjectAliasesAsListing request);
        IObjectAliasModel Any(GetObjectAlias request);
        IObjectAliasModel Any(GetObjectAliasByKey request);
        IObjectAliasModel Any(CreateObjectAlias request);
        IObjectAliasModel Any(UpdateObjectAlias request);
        bool Any(DeactivateObjectAlias request);
        bool Any(DeactivateObjectAliasByKey request);
        bool Any(RemoveObjectAlias request);
        bool Any(RemoveObjectAliasByKey request);
    }

    public class ObjectAliasesServices : /*ServicesBase,*/ IObjectAliasesServices
    {
        private readonly IObjectAliasesBusinessWorkflow workflow;

        public ObjectAliasesServices(IObjectAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IObjectAliasModel> Any(GetObjectAliases request) { return workflow.Search(request); }
        public List<IObjectAliasModel> Any(GetObjectAliasesAsListing request) { return workflow.Search(request, true); }
        public IObjectAliasModel Any(GetObjectAlias request) { return workflow.Get(request.ID); }
        public IObjectAliasModel Any(GetObjectAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IObjectAliasModel Any(CreateObjectAlias request) { return workflow.Create(request); }
        public IObjectAliasModel Any(UpdateObjectAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateObjectAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateObjectAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveObjectAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveObjectAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
