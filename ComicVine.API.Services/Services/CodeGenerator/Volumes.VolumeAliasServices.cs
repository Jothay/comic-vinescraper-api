// <auto-generated>
// <copyright file="Volumes.IVolumeAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Volumes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class VolumeAliasModelBase : NameableEntityModelBase, IVolumeAliasModel
    {
        // VolumeAlias Properties
        // <None>
        // Related Objects
        public int VolumeId { get; set; }
        public IVolumeModel Volume { get; set; }
        // Associated Objects
        // <None>
    }
    public class VolumeAliasSearchModelBase : NameableEntitySearchModelBase, IVolumeAliasSearchModel
    {
        [ApiMember(Name = "VolumeId", IsRequired = false, Description = "Filter by the Related VolumeId")]
        public int? VolumeId { get; set; }

        [ApiMember(Name = "VolumeCustomKey", IsRequired = false, Description = "Filter by the Related Volume CustomKey (Equals, Case-Insensitive)")]
        public string VolumeCustomKey { get; set; }

        [ApiMember(Name = "VolumeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Api Detail Url (Contains, Case-Insensitive)")]
        public string VolumeApiDetailUrl { get; set; }

        [ApiMember(Name = "VolumeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Site Detail Url (Contains, Case-Insensitive)")]
        public string VolumeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VolumeName", IsRequired = false, Description = "Filter by the Related Volume Name (Contains, Case-Insensitive)")]
        public string VolumeName { get; set; }

        [ApiMember(Name = "VolumeShortDescription", IsRequired = false, Description = "Filter by the Related Volume Short Description (Contains, Case-Insensitive)")]
        public string VolumeShortDescription { get; set; }

        [ApiMember(Name = "VolumeDescription", IsRequired = false, Description = "Filter by the Related Volume Description (Contains, Case-Insensitive)")]
        public string VolumeDescription { get; set; }

    }

    [Route("/VolumeAliases/", "GET", Summary = "Gets All Active VolumeAliases")]
    public class GetVolumeAliases : VolumeAliasSearchModelBase, IReturn<List<IVolumeAliasModel>> { }

    [Route("/VolumeAliases/Listing", "GET", Summary = "Gets All Active VolumeAliases with the mininum header information")]
    public class GetVolumeAliasesAsListing : VolumeAliasSearchModelBase, IReturn<List<IVolumeAliasModel>> { }

    [Route("/VolumeAliases/{ID}", "GET", Summary = "Gets VolumeAlias by Identifier")]
    public class GetVolumeAlias : ImplementsID, IReturn<IVolumeAliasModel> { }

    [Route("/VolumeAliases/{CustomKey}/ByKey", "GET", Summary = "Gets VolumeAlias by Key")]
    public class GetVolumeAliasByKey : ImplementsKey, IReturn<IVolumeAliasModel> { }

    //[Authenticate]
    [Route("/VolumeAliases/Create", "POST", Summary = "Creates an VolumeAlias with these contents")]
    public class CreateVolumeAlias : VolumeAliasModelBase, IReturn<IVolumeAliasModel> { }

    //[Authenticate]
    [Route("/VolumeAliases/Update", "POST", Summary = "Updates an VolumeAlias with new contents")]
    public class UpdateVolumeAlias : VolumeAliasModelBase, IReturn<IVolumeAliasModel> { }

    //[Authenticate]
    [Route("/VolumeAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an VolumeAlias by Identifier")]
    public class DeactivateVolumeAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an VolumeAlias by Key")]
    public class DeactivateVolumeAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeAliases/{ID}/Remove", "POST", Summary = "Removes an VolumeAlias by Identifier")]
    public class RemoveVolumeAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/VolumeAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an VolumeAlias by Key")]
    public class RemoveVolumeAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IVolumeAliasesServices
    {
        List<IVolumeAliasModel> Any(GetVolumeAliases request);
        List<IVolumeAliasModel> Any(GetVolumeAliasesAsListing request);
        IVolumeAliasModel Any(GetVolumeAlias request);
        IVolumeAliasModel Any(GetVolumeAliasByKey request);
        IVolumeAliasModel Any(CreateVolumeAlias request);
        IVolumeAliasModel Any(UpdateVolumeAlias request);
        bool Any(DeactivateVolumeAlias request);
        bool Any(DeactivateVolumeAliasByKey request);
        bool Any(RemoveVolumeAlias request);
        bool Any(RemoveVolumeAliasByKey request);
    }

    public class VolumeAliasesServices : Service, IVolumeAliasesServices
    {
        private readonly IVolumeAliasesBusinessWorkflow workflow;

        public VolumeAliasesServices(IVolumeAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IVolumeAliasModel> Any(GetVolumeAliases request) { return workflow.Search(request); }
        public List<IVolumeAliasModel> Any(GetVolumeAliasesAsListing request) { return workflow.Search(request, true); }
        public IVolumeAliasModel Any(GetVolumeAlias request) { return workflow.Get(request.ID); }
        public IVolumeAliasModel Any(GetVolumeAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IVolumeAliasModel Any(CreateVolumeAlias request) { return workflow.Create(request); }
        public IVolumeAliasModel Any(UpdateVolumeAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateVolumeAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateVolumeAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveVolumeAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveVolumeAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
