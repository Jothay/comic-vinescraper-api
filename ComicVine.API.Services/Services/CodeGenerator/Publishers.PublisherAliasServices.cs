// <auto-generated>
// <copyright file="Publishers.IPublisherAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PublisherAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Publishers
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class PublisherAliasModelBase : NameableEntityModelBase, IPublisherAliasModel
    {
        // PublisherAlias Properties
        // <None>
        // Related Objects
        public int PublisherId { get; set; }
        public IPublisherModel Publisher { get; set; }
        // Associated Objects
        // <None>
    }
    public class PublisherAliasSearchModelBase : NameableEntitySearchModelBase, IPublisherAliasSearchModel
    {
        [ApiMember(Name = "PublisherId", IsRequired = false, Description = "Filter by the Related PublisherId")]
        public int? PublisherId { get; set; }

        [ApiMember(Name = "PublisherCustomKey", IsRequired = false, Description = "Filter by the Related Publisher CustomKey (Equals, Case-Insensitive)")]
        public string PublisherCustomKey { get; set; }

        [ApiMember(Name = "PublisherApiDetailUrl", IsRequired = false, Description = "Filter by the Related Publisher Api Detail Url (Contains, Case-Insensitive)")]
        public string PublisherApiDetailUrl { get; set; }

        [ApiMember(Name = "PublisherSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Publisher Site Detail Url (Contains, Case-Insensitive)")]
        public string PublisherSiteDetailUrl { get; set; }

        [ApiMember(Name = "PublisherName", IsRequired = false, Description = "Filter by the Related Publisher Name (Contains, Case-Insensitive)")]
        public string PublisherName { get; set; }

        [ApiMember(Name = "PublisherShortDescription", IsRequired = false, Description = "Filter by the Related Publisher Short Description (Contains, Case-Insensitive)")]
        public string PublisherShortDescription { get; set; }

        [ApiMember(Name = "PublisherDescription", IsRequired = false, Description = "Filter by the Related Publisher Description (Contains, Case-Insensitive)")]
        public string PublisherDescription { get; set; }

    }

    [Route("/PublisherAliases/", "GET", Summary = "Gets All Active PublisherAliases")]
    public class GetPublisherAliases : PublisherAliasSearchModelBase, IReturn<List<IPublisherAliasModel>> { }

    [Route("/PublisherAliases/Listing", "GET", Summary = "Gets All Active PublisherAliases with the mininum header information")]
    public class GetPublisherAliasesAsListing : PublisherAliasSearchModelBase, IReturn<List<IPublisherAliasModel>> { }

    [Route("/PublisherAliases/{ID}", "GET", Summary = "Gets PublisherAlias by Identifier")]
    public class GetPublisherAlias : ImplementsID, IReturn<IPublisherAliasModel> { }

    [Route("/PublisherAliases/{CustomKey}/ByKey", "GET", Summary = "Gets PublisherAlias by Key")]
    public class GetPublisherAliasByKey : ImplementsKey, IReturn<IPublisherAliasModel> { }

    //[Authenticate]
    [Route("/PublisherAliases/Create", "POST", Summary = "Creates an PublisherAlias with these contents")]
    public class CreatePublisherAlias : PublisherAliasModelBase, IReturn<IPublisherAliasModel> { }

    //[Authenticate]
    [Route("/PublisherAliases/Update", "POST", Summary = "Updates an PublisherAlias with new contents")]
    public class UpdatePublisherAlias : PublisherAliasModelBase, IReturn<IPublisherAliasModel> { }

    //[Authenticate]
    [Route("/PublisherAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an PublisherAlias by Identifier")]
    public class DeactivatePublisherAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/PublisherAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an PublisherAlias by Key")]
    public class DeactivatePublisherAliasByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/PublisherAliases/{ID}/Remove", "POST", Summary = "Removes an PublisherAlias by Identifier")]
    public class RemovePublisherAlias : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/PublisherAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an PublisherAlias by Key")]
    public class RemovePublisherAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IPublisherAliasesServices
    {
        List<IPublisherAliasModel> Any(GetPublisherAliases request);
        List<IPublisherAliasModel> Any(GetPublisherAliasesAsListing request);
        IPublisherAliasModel Any(GetPublisherAlias request);
        IPublisherAliasModel Any(GetPublisherAliasByKey request);
        IPublisherAliasModel Any(CreatePublisherAlias request);
        IPublisherAliasModel Any(UpdatePublisherAlias request);
        bool Any(DeactivatePublisherAlias request);
        bool Any(DeactivatePublisherAliasByKey request);
        bool Any(RemovePublisherAlias request);
        bool Any(RemovePublisherAliasByKey request);
    }

    public class PublisherAliasesServices : /*ServicesBase,*/ IPublisherAliasesServices
    {
        private readonly IPublisherAliasesBusinessWorkflow workflow;

        public PublisherAliasesServices(IPublisherAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IPublisherAliasModel> Any(GetPublisherAliases request) { return workflow.Search(request); }
        public List<IPublisherAliasModel> Any(GetPublisherAliasesAsListing request) { return workflow.Search(request, true); }
        public IPublisherAliasModel Any(GetPublisherAlias request) { return workflow.Get(request.ID); }
        public IPublisherAliasModel Any(GetPublisherAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IPublisherAliasModel Any(CreatePublisherAlias request) { return workflow.Create(request); }
        public IPublisherAliasModel Any(UpdatePublisherAlias request) { return workflow.Update(request); }
        public bool Any(DeactivatePublisherAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivatePublisherAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemovePublisherAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemovePublisherAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
