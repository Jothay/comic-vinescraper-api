

// <auto-generated>
// <copyright file="Characters.ICharacterEnemyModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterEnemy model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class CharacterEnemyModelBase : NameableEntityModelBase, ICharacterEnemyModel
    {
        // CharacterEnemy Properties
        // <None>
        // Related Objects
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        public int EnemyId { get; set; }
        public ICharacterModel Enemy { get; set; }
        // Associated Objects
        // <None>
    }
    public class CharacterEnemySearchModelBase : NameableEntitySearchModelBase, ICharacterEnemySearchModel
    {
        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

        [ApiMember(Name = "EnemyId", IsRequired = false, Description = "Filter by the Related EnemyId")]
        public int? EnemyId { get; set; }

        [ApiMember(Name = "EnemyCustomKey", IsRequired = false, Description = "Filter by the Related Enemy CustomKey (Equals, Case-Insensitive)")]
        public string EnemyCustomKey { get; set; }

        [ApiMember(Name = "EnemyApiDetailUrl", IsRequired = false, Description = "Filter by the Related Enemy Api Detail Url (Contains, Case-Insensitive)")]
        public string EnemyApiDetailUrl { get; set; }

        [ApiMember(Name = "EnemySiteDetailUrl", IsRequired = false, Description = "Filter by the Related Enemy Site Detail Url (Contains, Case-Insensitive)")]
        public string EnemySiteDetailUrl { get; set; }

        [ApiMember(Name = "EnemyName", IsRequired = false, Description = "Filter by the Related Enemy Name (Contains, Case-Insensitive)")]
        public string EnemyName { get; set; }

        [ApiMember(Name = "EnemyShortDescription", IsRequired = false, Description = "Filter by the Related Enemy Short Description (Contains, Case-Insensitive)")]
        public string EnemyShortDescription { get; set; }

        [ApiMember(Name = "EnemyDescription", IsRequired = false, Description = "Filter by the Related Enemy Description (Contains, Case-Insensitive)")]
        public string EnemyDescription { get; set; }

    }

    [Route("/CharacterEnemies/", "GET", Summary = "Gets All Active CharacterEnemies")]
    public class GetCharacterEnemies : CharacterEnemySearchModelBase, IReturn<List<ICharacterEnemyModel>> { }

    [Route("/CharacterEnemies/Listing", "GET", Summary = "Gets All Active CharacterEnemies with the mininum header information")]
    public class GetCharacterEnemiesAsListing : CharacterEnemySearchModelBase, IReturn<List<ICharacterEnemyModel>> { }

    [Route("/CharacterEnemies/{ID}", "GET", Summary = "Gets CharacterEnemy by Identifier")]
    public class GetCharacterEnemy : ImplementsID, IReturn<ICharacterEnemyModel> { }

    [Route("/CharacterEnemies/{CustomKey}/ByKey", "GET", Summary = "Gets CharacterEnemy by Key")]
    public class GetCharacterEnemyByKey : ImplementsKey, IReturn<ICharacterEnemyModel> { }

    //[Authenticate]
    [Route("/CharacterEnemies/Create", "POST", Summary = "Creates an CharacterEnemy with these contents")]
    public class CreateCharacterEnemy : CharacterEnemyModelBase, IReturn<ICharacterEnemyModel> { }

    //[Authenticate]
    [Route("/CharacterEnemies/Update", "POST", Summary = "Updates an CharacterEnemy with new contents")]
    public class UpdateCharacterEnemy : CharacterEnemyModelBase, IReturn<ICharacterEnemyModel> { }

    //[Authenticate]
    [Route("/CharacterEnemies/{ID}/Deactivate", "POST", Summary = "Deactivates an CharacterEnemy by Identifier")]
    public class DeactivateCharacterEnemy : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterEnemies/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an CharacterEnemy by Key")]
    public class DeactivateCharacterEnemyByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterEnemies/{ID}/Remove", "POST", Summary = "Removes an CharacterEnemy by Identifier")]
    public class RemoveCharacterEnemy : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/CharacterEnemies/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an CharacterEnemy by Key")]
    public class RemoveCharacterEnemyByKey : ImplementsKey, IReturn<bool> { }

    public interface ICharacterEnemiesServices
    {
        List<ICharacterEnemyModel> Any(GetCharacterEnemies request);
        List<ICharacterEnemyModel> Any(GetCharacterEnemiesAsListing request);
        ICharacterEnemyModel Any(GetCharacterEnemy request);
        ICharacterEnemyModel Any(GetCharacterEnemyByKey request);
        ICharacterEnemyModel Any(CreateCharacterEnemy request);
        ICharacterEnemyModel Any(UpdateCharacterEnemy request);
        bool Any(DeactivateCharacterEnemy request);
        bool Any(DeactivateCharacterEnemyByKey request);
        bool Any(RemoveCharacterEnemy request);
        bool Any(RemoveCharacterEnemyByKey request);
    }

    public class CharacterEnemiesServices : Service, ICharacterEnemiesServices
    {
        private readonly ICharacterEnemiesBusinessWorkflow workflow;

        public CharacterEnemiesServices(ICharacterEnemiesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ICharacterEnemyModel> Any(GetCharacterEnemies request) { return workflow.Search(request); }
        public List<ICharacterEnemyModel> Any(GetCharacterEnemiesAsListing request) { return workflow.Search(request, true); }
        public ICharacterEnemyModel Any(GetCharacterEnemy request) { return workflow.Get(request.ID); }
        public ICharacterEnemyModel Any(GetCharacterEnemyByKey request) { return workflow.Get(request.CustomKey); }
        public ICharacterEnemyModel Any(CreateCharacterEnemy request) { return workflow.Create(request); }
        public ICharacterEnemyModel Any(UpdateCharacterEnemy request) { return workflow.Update(request); }
        public bool Any(DeactivateCharacterEnemy request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateCharacterEnemyByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveCharacterEnemy request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveCharacterEnemyByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
