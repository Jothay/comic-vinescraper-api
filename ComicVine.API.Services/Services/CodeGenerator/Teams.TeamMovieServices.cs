// <auto-generated>
// <copyright file="Teams.ITeamMovieModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMovie model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class TeamMovieModelBase : NameableEntityModelBase, ITeamMovieModel
    {
        // TeamMovie Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamMovieSearchModelBase : NameableEntitySearchModelBase, ITeamMovieSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

    }

    [Route("/TeamMovies/", "GET", Summary = "Gets All Active TeamMovies")]
    public class GetTeamMovies : TeamMovieSearchModelBase, IReturn<List<ITeamMovieModel>> { }

    [Route("/TeamMovies/Listing", "GET", Summary = "Gets All Active TeamMovies with the mininum header information")]
    public class GetTeamMoviesAsListing : TeamMovieSearchModelBase, IReturn<List<ITeamMovieModel>> { }

    [Route("/TeamMovies/{ID}", "GET", Summary = "Gets TeamMovie by Identifier")]
    public class GetTeamMovie : ImplementsID, IReturn<ITeamMovieModel> { }

    [Route("/TeamMovies/{CustomKey}/ByKey", "GET", Summary = "Gets TeamMovie by Key")]
    public class GetTeamMovieByKey : ImplementsKey, IReturn<ITeamMovieModel> { }

    //[Authenticate]
    [Route("/TeamMovies/Create", "POST", Summary = "Creates an TeamMovie with these contents")]
    public class CreateTeamMovie : TeamMovieModelBase, IReturn<ITeamMovieModel> { }

    //[Authenticate]
    [Route("/TeamMovies/Update", "POST", Summary = "Updates an TeamMovie with new contents")]
    public class UpdateTeamMovie : TeamMovieModelBase, IReturn<ITeamMovieModel> { }

    //[Authenticate]
    [Route("/TeamMovies/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamMovie by Identifier")]
    public class DeactivateTeamMovie : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMovies/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamMovie by Key")]
    public class DeactivateTeamMovieByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMovies/{ID}/Remove", "POST", Summary = "Removes an TeamMovie by Identifier")]
    public class RemoveTeamMovie : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/TeamMovies/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamMovie by Key")]
    public class RemoveTeamMovieByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamMoviesServices
    {
        List<ITeamMovieModel> Any(GetTeamMovies request);
        List<ITeamMovieModel> Any(GetTeamMoviesAsListing request);
        ITeamMovieModel Any(GetTeamMovie request);
        ITeamMovieModel Any(GetTeamMovieByKey request);
        ITeamMovieModel Any(CreateTeamMovie request);
        ITeamMovieModel Any(UpdateTeamMovie request);
        bool Any(DeactivateTeamMovie request);
        bool Any(DeactivateTeamMovieByKey request);
        bool Any(RemoveTeamMovie request);
        bool Any(RemoveTeamMovieByKey request);
    }

    public class TeamMoviesServices : Service, ITeamMoviesServices
    {
        private readonly ITeamMoviesBusinessWorkflow workflow;

        public TeamMoviesServices(ITeamMoviesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamMovieModel> Any(GetTeamMovies request) { return workflow.Search(request); }
        public List<ITeamMovieModel> Any(GetTeamMoviesAsListing request) { return workflow.Search(request, true); }
        public ITeamMovieModel Any(GetTeamMovie request) { return workflow.Get(request.ID); }
        public ITeamMovieModel Any(GetTeamMovieByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamMovieModel Any(CreateTeamMovie request) { return workflow.Create(request); }
        public ITeamMovieModel Any(UpdateTeamMovie request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamMovie request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamMovieByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamMovie request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamMovieByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
