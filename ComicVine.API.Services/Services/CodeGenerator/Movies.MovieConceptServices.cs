// <auto-generated>
// <copyright file="Movies.IMovieConceptModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieConcept model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class MovieConceptModelBase : NameableEntityModelBase, IMovieConceptModel
    {
        // MovieConcept Properties
        // <None>
        // Related Objects
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        // Associated Objects
        // <None>
    }
    public class MovieConceptSearchModelBase : NameableEntitySearchModelBase, IMovieConceptSearchModel
    {
        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

    }

    [Route("/MovieConcepts/", "GET", Summary = "Gets All Active MovieConcepts")]
    public class GetMovieConcepts : MovieConceptSearchModelBase, IReturn<List<IMovieConceptModel>> { }

    [Route("/MovieConcepts/Listing", "GET", Summary = "Gets All Active MovieConcepts with the mininum header information")]
    public class GetMovieConceptsAsListing : MovieConceptSearchModelBase, IReturn<List<IMovieConceptModel>> { }

    [Route("/MovieConcepts/{ID}", "GET", Summary = "Gets MovieConcept by Identifier")]
    public class GetMovieConcept : ImplementsID, IReturn<IMovieConceptModel> { }

    [Route("/MovieConcepts/{CustomKey}/ByKey", "GET", Summary = "Gets MovieConcept by Key")]
    public class GetMovieConceptByKey : ImplementsKey, IReturn<IMovieConceptModel> { }

    //[Authenticate]
    [Route("/MovieConcepts/Create", "POST", Summary = "Creates an MovieConcept with these contents")]
    public class CreateMovieConcept : MovieConceptModelBase, IReturn<IMovieConceptModel> { }

    //[Authenticate]
    [Route("/MovieConcepts/Update", "POST", Summary = "Updates an MovieConcept with new contents")]
    public class UpdateMovieConcept : MovieConceptModelBase, IReturn<IMovieConceptModel> { }

    //[Authenticate]
    [Route("/MovieConcepts/{ID}/Deactivate", "POST", Summary = "Deactivates an MovieConcept by Identifier")]
    public class DeactivateMovieConcept : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieConcepts/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an MovieConcept by Key")]
    public class DeactivateMovieConceptByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieConcepts/{ID}/Remove", "POST", Summary = "Removes an MovieConcept by Identifier")]
    public class RemoveMovieConcept : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/MovieConcepts/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an MovieConcept by Key")]
    public class RemoveMovieConceptByKey : ImplementsKey, IReturn<bool> { }

    public interface IMovieConceptsServices
    {
        List<IMovieConceptModel> Any(GetMovieConcepts request);
        List<IMovieConceptModel> Any(GetMovieConceptsAsListing request);
        IMovieConceptModel Any(GetMovieConcept request);
        IMovieConceptModel Any(GetMovieConceptByKey request);
        IMovieConceptModel Any(CreateMovieConcept request);
        IMovieConceptModel Any(UpdateMovieConcept request);
        bool Any(DeactivateMovieConcept request);
        bool Any(DeactivateMovieConceptByKey request);
        bool Any(RemoveMovieConcept request);
        bool Any(RemoveMovieConceptByKey request);
    }

    public class MovieConceptsServices : Service, IMovieConceptsServices
    {
        private readonly IMovieConceptsBusinessWorkflow workflow;

        public MovieConceptsServices(IMovieConceptsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IMovieConceptModel> Any(GetMovieConcepts request) { return workflow.Search(request); }
        public List<IMovieConceptModel> Any(GetMovieConceptsAsListing request) { return workflow.Search(request, true); }
        public IMovieConceptModel Any(GetMovieConcept request) { return workflow.Get(request.ID); }
        public IMovieConceptModel Any(GetMovieConceptByKey request) { return workflow.Get(request.CustomKey); }
        public IMovieConceptModel Any(CreateMovieConcept request) { return workflow.Create(request); }
        public IMovieConceptModel Any(UpdateMovieConcept request) { return workflow.Update(request); }
        public bool Any(DeactivateMovieConcept request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateMovieConceptByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveMovieConcept request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveMovieConceptByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
