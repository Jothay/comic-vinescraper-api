// <auto-generated>
// <copyright file="Videos.IVideoModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Video model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Videos
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;

    public class VideoModelBase : NameableEntityModelBase, IVideoModel
    {
        // Video Properties
        public string LowUrl { get; set; }
        public string HighUrl { get; set; }
        public string HdUrl { get; set; }
        public string Url { get; set; }
        public int? LengthSeconds { get; set; }
        public DateTime? PublishDate { get; set; }
        // Related Objects
        public int PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        public int AuthorId { get; set; }
        public IPersonModel Author { get; set; }
        public int VideoTypeId { get; set; }
        public IVideoTypeModel VideoType { get; set; }
        // Associated Objects
        // <None>
    }
    public class VideoSearchModelBase : NameableEntitySearchModelBase, IVideoSearchModel
    {
        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

        [ApiMember(Name = "AuthorId", IsRequired = false, Description = "Filter by the Related AuthorId")]
        public int? AuthorId { get; set; }

        [ApiMember(Name = "AuthorCustomKey", IsRequired = false, Description = "Filter by the Related Author CustomKey (Equals, Case-Insensitive)")]
        public string AuthorCustomKey { get; set; }

        [ApiMember(Name = "AuthorApiDetailUrl", IsRequired = false, Description = "Filter by the Related Author Api Detail Url (Contains, Case-Insensitive)")]
        public string AuthorApiDetailUrl { get; set; }

        [ApiMember(Name = "AuthorSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Author Site Detail Url (Contains, Case-Insensitive)")]
        public string AuthorSiteDetailUrl { get; set; }

        [ApiMember(Name = "AuthorName", IsRequired = false, Description = "Filter by the Related Author Name (Contains, Case-Insensitive)")]
        public string AuthorName { get; set; }

        [ApiMember(Name = "AuthorShortDescription", IsRequired = false, Description = "Filter by the Related Author Short Description (Contains, Case-Insensitive)")]
        public string AuthorShortDescription { get; set; }

        [ApiMember(Name = "AuthorDescription", IsRequired = false, Description = "Filter by the Related Author Description (Contains, Case-Insensitive)")]
        public string AuthorDescription { get; set; }

        [ApiMember(Name = "VideoTypeId", IsRequired = false, Description = "Filter by the Related VideoTypeId")]
        public int? VideoTypeId { get; set; }

        [ApiMember(Name = "VideoTypeCustomKey", IsRequired = false, Description = "Filter by the Related VideoType CustomKey (Equals, Case-Insensitive)")]
        public string VideoTypeCustomKey { get; set; }

        [ApiMember(Name = "VideoTypeApiDetailUrl", IsRequired = false, Description = "Filter by the Related VideoType Api Detail Url (Contains, Case-Insensitive)")]
        public string VideoTypeApiDetailUrl { get; set; }

        [ApiMember(Name = "VideoTypeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related VideoType Site Detail Url (Contains, Case-Insensitive)")]
        public string VideoTypeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VideoTypeName", IsRequired = false, Description = "Filter by the Related VideoType Name (Contains, Case-Insensitive)")]
        public string VideoTypeName { get; set; }

        [ApiMember(Name = "VideoTypeShortDescription", IsRequired = false, Description = "Filter by the Related VideoType Short Description (Contains, Case-Insensitive)")]
        public string VideoTypeShortDescription { get; set; }

        [ApiMember(Name = "VideoTypeDescription", IsRequired = false, Description = "Filter by the Related VideoType Description (Contains, Case-Insensitive)")]
        public string VideoTypeDescription { get; set; }

    }

    [Route("/Videos/", "GET", Summary = "Gets All Active Videos")]
    public class GetVideos : VideoSearchModelBase, IReturn<List<IVideoModel>> { }

    [Route("/Videos/Listing", "GET", Summary = "Gets All Active Videos with the mininum header information")]
    public class GetVideosAsListing : VideoSearchModelBase, IReturn<List<IVideoModel>> { }

    [Route("/Videos/{ID}", "GET", Summary = "Gets Video by Identifier")]
    public class GetVideo : ImplementsID, IReturn<IVideoModel> { }

    [Route("/Videos/{CustomKey}/ByKey", "GET", Summary = "Gets Video by Key")]
    public class GetVideoByKey : ImplementsKey, IReturn<IVideoModel> { }

    //[Authenticate]
    [Route("/Videos/Create", "POST", Summary = "Creates an Video with these contents")]
    public class CreateVideo : VideoModelBase, IReturn<IVideoModel> { }

    //[Authenticate]
    [Route("/Videos/Update", "POST", Summary = "Updates an Video with new contents")]
    public class UpdateVideo : VideoModelBase, IReturn<IVideoModel> { }

    //[Authenticate]
    [Route("/Videos/{ID}/Deactivate", "POST", Summary = "Deactivates an Video by Identifier")]
    public class DeactivateVideo : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/Videos/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Video by Key")]
    public class DeactivateVideoByKey : ImplementsKey, IReturn<bool> { }

    //[Authenticate]
    [Route("/Videos/{ID}/Remove", "POST", Summary = "Removes an Video by Identifier")]
    public class RemoveVideo : ImplementsID, IReturn<bool> { }

    //[Authenticate]
    [Route("/Videos/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Video by Key")]
    public class RemoveVideoByKey : ImplementsKey, IReturn<bool> { }

    public interface IVideosServices
    {
        List<IVideoModel> Any(GetVideos request);
        List<IVideoModel> Any(GetVideosAsListing request);
        IVideoModel Any(GetVideo request);
        IVideoModel Any(GetVideoByKey request);
        IVideoModel Any(CreateVideo request);
        IVideoModel Any(UpdateVideo request);
        bool Any(DeactivateVideo request);
        bool Any(DeactivateVideoByKey request);
        bool Any(RemoveVideo request);
        bool Any(RemoveVideoByKey request);
    }

    public class VideosServices : /*ServicesBase,*/ IVideosServices
    {
        private readonly IVideosBusinessWorkflow workflow;

        public VideosServices(IVideosBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IVideoModel> Any(GetVideos request) { return workflow.Search(request); }
        public List<IVideoModel> Any(GetVideosAsListing request) { return workflow.Search(request, true); }
        public IVideoModel Any(GetVideo request) { return workflow.Get(request.ID); }
        public IVideoModel Any(GetVideoByKey request) { return workflow.Get(request.CustomKey); }
        public IVideoModel Any(CreateVideo request) { return workflow.Create(request); }
        public IVideoModel Any(UpdateVideo request) { return workflow.Update(request); }
        public bool Any(DeactivateVideo request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateVideoByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveVideo request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveVideoByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
