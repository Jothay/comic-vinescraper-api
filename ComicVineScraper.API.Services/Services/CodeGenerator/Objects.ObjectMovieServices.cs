// <auto-generated>
// <copyright file="Objects.IObjectMovieServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ObjectMovie ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class ObjectMovieModelBase : NameableEntityModelBase, IObjectMovieModel
    {
        // ObjectMovie Properties
        // <None>
        // Related Objects
        public int ObjectId { get; set; }
        public IObjectModel Object { get; set; }
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        // Associated Objects
        // <None>
    }
    public class ObjectMovieSearchModelBase : NameableEntitySearchModelBase, IObjectMovieSearchModel
    {
        [ApiMember(Name = "ObjectId", IsRequired = false, Description = "Filter by the Related ObjectId")]
        public int? ObjectId { get; set; }

        [ApiMember(Name = "ObjectCustomKey", IsRequired = false, Description = "Filter by the Related Object CustomKey (Equals, Case-Insensitive)")]
        public string ObjectCustomKey { get; set; }

        [ApiMember(Name = "ObjectApiDetailUrl", IsRequired = false, Description = "Filter by the Related Object Api Detail Url (Contains, Case-Insensitive)")]
        public string ObjectApiDetailUrl { get; set; }

        [ApiMember(Name = "ObjectSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Object Site Detail Url (Contains, Case-Insensitive)")]
        public string ObjectSiteDetailUrl { get; set; }

        [ApiMember(Name = "ObjectName", IsRequired = false, Description = "Filter by the Related Object Name (Contains, Case-Insensitive)")]
        public string ObjectName { get; set; }

        [ApiMember(Name = "ObjectShortDescription", IsRequired = false, Description = "Filter by the Related Object Short Description (Contains, Case-Insensitive)")]
        public string ObjectShortDescription { get; set; }

        [ApiMember(Name = "ObjectDescription", IsRequired = false, Description = "Filter by the Related Object Description (Contains, Case-Insensitive)")]
        public string ObjectDescription { get; set; }

        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

    }

    [Route("/ObjectMovies/", "GET", Summary = "Gets All Active ObjectMovies")]
    public class GetObjectMovies : ObjectMovieSearchModelBase, IReturn<List<IObjectMovieModel>> { }

    [Route("/ObjectMovies/Listing", "GET", Summary = "Gets All Active ObjectMovies with the mininum header information")]
    public class GetObjectMoviesAsListing : ObjectMovieSearchModelBase, IReturn<List<IObjectMovieModel>> { }

    [Route("/ObjectMovies/{ID}", "GET", Summary = "Gets ObjectMovie by Identifier")]
    public class GetObjectMovie : ImplementsID, IReturn<IObjectMovieModel> { }

    [Route("/ObjectMovies/{CustomKey}/ByKey", "GET", Summary = "Gets ObjectMovie by Key")]
    public class GetObjectMovieByKey : ImplementsKey, IReturn<IObjectMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/Create", "POST", Summary = "Creates an ObjectMovie with these contents")]
    public class CreateObjectMovie : ObjectMovieModelBase, IReturn<IObjectMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/Update", "POST", Summary = "Updates an ObjectMovie with new contents")]
    public class UpdateObjectMovie : ObjectMovieModelBase, IReturn<IObjectMovieModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/{ID}/Deactivate", "POST", Summary = "Deactivates an ObjectMovie by Identifier")]
    public class DeactivateObjectMovie : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ObjectMovie by Key")]
    public class DeactivateObjectMovieByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/{ID}/Remove", "POST", Summary = "Removes an ObjectMovie by Identifier")]
    public class RemoveObjectMovie : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectMovies/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ObjectMovie by Key")]
    public class RemoveObjectMovieByKey : ImplementsKey, IReturn<bool> { }

    public interface IObjectMoviesServices
    {
        List<IObjectMovieModel> Any(GetObjectMovies request);
        List<IObjectMovieModel> Any(GetObjectMoviesAsListing request);
        IObjectMovieModel Any(GetObjectMovie request);
        IObjectMovieModel Any(GetObjectMovieByKey request);
        IObjectMovieModel Any(CreateObjectMovie request);
        IObjectMovieModel Any(UpdateObjectMovie request);
        bool Any(DeactivateObjectMovie request);
        bool Any(DeactivateObjectMovieByKey request);
        bool Any(RemoveObjectMovie request);
        bool Any(RemoveObjectMovieByKey request);
    }

    public class ObjectMoviesServices : Service, IObjectMoviesServices
    {
        private readonly IObjectMoviesBusinessWorkflow workflow;

        public ObjectMoviesServices(IObjectMoviesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IObjectMovieModel> Any(GetObjectMovies request) { return workflow.Search(request); }
        public List<IObjectMovieModel> Any(GetObjectMoviesAsListing request) { return workflow.Search(request, true); }
        public IObjectMovieModel Any(GetObjectMovie request) { return workflow.Get(request.ID); }
        public IObjectMovieModel Any(GetObjectMovieByKey request) { return workflow.Get(request.CustomKey); }
        public IObjectMovieModel Any(CreateObjectMovie request) { return workflow.Create(request); }
        public IObjectMovieModel Any(UpdateObjectMovie request) { return workflow.Update(request); }
        public bool Any(DeactivateObjectMovie request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateObjectMovieByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveObjectMovie request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveObjectMovieByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
