// <auto-generated>
// <copyright file="Profiles.IProfileServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Profile ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Profiles
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class ProfileModelBase : NameableEntityModelBase, IProfileModel
    {
        // Profile Properties
        // <None>
        // Related Objects
        // <None>
        // Associated Objects
        public List<IOriginProfileModel> OriginProfiles { get; set; }
    }
    public class ProfileSearchModelBase : NameableEntitySearchModelBase, IProfileSearchModel
    {
        // No Profile Search Properties
    }

    [Route("/Profiles/", "GET", Summary = "Gets All Active Profiles")]
    public class GetProfiles : ProfileSearchModelBase, IReturn<List<IProfileModel>> { }

    [Route("/Profiles/Listing", "GET", Summary = "Gets All Active Profiles with the mininum header information")]
    public class GetProfilesAsListing : ProfileSearchModelBase, IReturn<List<IProfileModel>> { }

    [Route("/Profiles/{ID}", "GET", Summary = "Gets Profile by Identifier")]
    public class GetProfile : ImplementsID, IReturn<IProfileModel> { }

    [Route("/Profiles/{CustomKey}/ByKey", "GET", Summary = "Gets Profile by Key")]
    public class GetProfileByKey : ImplementsKey, IReturn<IProfileModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/Create", "POST", Summary = "Creates an Profile with these contents")]
    public class CreateProfile : ProfileModelBase, IReturn<IProfileModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/Update", "POST", Summary = "Updates an Profile with new contents")]
    public class UpdateProfile : ProfileModelBase, IReturn<IProfileModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/{ID}/Deactivate", "POST", Summary = "Deactivates an Profile by Identifier")]
    public class DeactivateProfile : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Profile by Key")]
    public class DeactivateProfileByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/{ID}/Remove", "POST", Summary = "Removes an Profile by Identifier")]
    public class RemoveProfile : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Profiles/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Profile by Key")]
    public class RemoveProfileByKey : ImplementsKey, IReturn<bool> { }

    public interface IProfilesServices
    {
        List<IProfileModel> Any(GetProfiles request);
        List<IProfileModel> Any(GetProfilesAsListing request);
        IProfileModel Any(GetProfile request);
        IProfileModel Any(GetProfileByKey request);
        IProfileModel Any(CreateProfile request);
        IProfileModel Any(UpdateProfile request);
        bool Any(DeactivateProfile request);
        bool Any(DeactivateProfileByKey request);
        bool Any(RemoveProfile request);
        bool Any(RemoveProfileByKey request);
    }

    public class ProfilesServices : Service, IProfilesServices
    {
        private readonly IProfilesBusinessWorkflow workflow;

        public ProfilesServices(IProfilesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IProfileModel> Any(GetProfiles request) { return workflow.Search(request); }
        public List<IProfileModel> Any(GetProfilesAsListing request) { return workflow.Search(request, true); }
        public IProfileModel Any(GetProfile request) { return workflow.Get(request.ID); }
        public IProfileModel Any(GetProfileByKey request) { return workflow.Get(request.CustomKey); }
        public IProfileModel Any(CreateProfile request) { return workflow.Create(request); }
        public IProfileModel Any(UpdateProfile request) { return workflow.Update(request); }
        public bool Any(DeactivateProfile request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateProfileByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveProfile request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveProfileByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
