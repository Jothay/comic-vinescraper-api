// <auto-generated>
// <copyright file="Characters.ICharacterServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Character ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class CharacterModelBase : NameableEntityModelBase, ICharacterModel
    {
        // Character Properties
        public string RealName { get; set; }
        public DateTime? DateOfBirth { get; set; }
        // Related Objects
        public int PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        public int FirstIssueAppearanceId { get; set; }
        public IIssueModel FirstIssueAppearance { get; set; }
        public int GenderId { get; set; }
        public IGenderModel Gender { get; set; }
        public int OriginId { get; set; }
        public IOriginModel Origin { get; set; }
        public int PublisherId { get; set; }
        public IPublisherModel Publisher { get; set; }
        // Associated Objects
        public List<ICharacterAliasModel> CharacterAliases { get; set; }
        public List<ICharacterCreatorModel> CharacterCreators { get; set; }
        public List<ICharacterEnemyModel> CharacterEnemies { get; set; }
        public List<ICharacterEnemyTeamModel> CharacterEnemyTeams { get; set; }
        public List<ICharacterFriendModel> CharacterFriends { get; set; }
        public List<ICharacterFriendlyTeamModel> CharacterFriendlyTeams { get; set; }
        public List<ICharacterAppearedInIssueModel> CharacterIssuesAppearedIn { get; set; }
        public List<ICharacterDiedInIssueModel> CharacterIssuesDiedIn { get; set; }
        public List<ICharacterIssueModel> CharacterIssues { get; set; }
        public List<ICharacterMovieModel> CharacterMovies { get; set; }
        public List<ICharacterPowerModel> CharacterPowers { get; set; }
        public List<ICharacterStoryArcModel> CharacterStoryArcs { get; set; }
        public List<ICharacterTeamModel> CharacterTeams { get; set; }
        public List<ICharacterVolumeModel> CharacterVolumes { get; set; }
    }
    public class CharacterSearchModelBase : NameableEntitySearchModelBase, ICharacterSearchModel
    {
        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceId", IsRequired = false, Description = "Filter by the Related FirstIssueAppearanceId")]
        public int? FirstIssueAppearanceId { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceCustomKey", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance CustomKey (Equals, Case-Insensitive)")]
        public string FirstIssueAppearanceCustomKey { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceApiDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Api Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceApiDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceSiteDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Site Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceSiteDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceName", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Name (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceName { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceShortDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Short Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceShortDescription { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceDescription { get; set; }

        [ApiMember(Name = "GenderId", IsRequired = false, Description = "Filter by the Related GenderId")]
        public int? GenderId { get; set; }

        [ApiMember(Name = "GenderCustomKey", IsRequired = false, Description = "Filter by the Related Gender CustomKey (Equals, Case-Insensitive)")]
        public string GenderCustomKey { get; set; }

        [ApiMember(Name = "GenderApiDetailUrl", IsRequired = false, Description = "Filter by the Related Gender Api Detail Url (Contains, Case-Insensitive)")]
        public string GenderApiDetailUrl { get; set; }

        [ApiMember(Name = "GenderSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Gender Site Detail Url (Contains, Case-Insensitive)")]
        public string GenderSiteDetailUrl { get; set; }

        [ApiMember(Name = "GenderName", IsRequired = false, Description = "Filter by the Related Gender Name (Contains, Case-Insensitive)")]
        public string GenderName { get; set; }

        [ApiMember(Name = "GenderShortDescription", IsRequired = false, Description = "Filter by the Related Gender Short Description (Contains, Case-Insensitive)")]
        public string GenderShortDescription { get; set; }

        [ApiMember(Name = "GenderDescription", IsRequired = false, Description = "Filter by the Related Gender Description (Contains, Case-Insensitive)")]
        public string GenderDescription { get; set; }

        [ApiMember(Name = "OriginId", IsRequired = false, Description = "Filter by the Related OriginId")]
        public int? OriginId { get; set; }

        [ApiMember(Name = "OriginCustomKey", IsRequired = false, Description = "Filter by the Related Origin CustomKey (Equals, Case-Insensitive)")]
        public string OriginCustomKey { get; set; }

        [ApiMember(Name = "OriginApiDetailUrl", IsRequired = false, Description = "Filter by the Related Origin Api Detail Url (Contains, Case-Insensitive)")]
        public string OriginApiDetailUrl { get; set; }

        [ApiMember(Name = "OriginSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Origin Site Detail Url (Contains, Case-Insensitive)")]
        public string OriginSiteDetailUrl { get; set; }

        [ApiMember(Name = "OriginName", IsRequired = false, Description = "Filter by the Related Origin Name (Contains, Case-Insensitive)")]
        public string OriginName { get; set; }

        [ApiMember(Name = "OriginShortDescription", IsRequired = false, Description = "Filter by the Related Origin Short Description (Contains, Case-Insensitive)")]
        public string OriginShortDescription { get; set; }

        [ApiMember(Name = "OriginDescription", IsRequired = false, Description = "Filter by the Related Origin Description (Contains, Case-Insensitive)")]
        public string OriginDescription { get; set; }

        [ApiMember(Name = "PublisherId", IsRequired = false, Description = "Filter by the Related PublisherId")]
        public int? PublisherId { get; set; }

        [ApiMember(Name = "PublisherCustomKey", IsRequired = false, Description = "Filter by the Related Publisher CustomKey (Equals, Case-Insensitive)")]
        public string PublisherCustomKey { get; set; }

        [ApiMember(Name = "PublisherApiDetailUrl", IsRequired = false, Description = "Filter by the Related Publisher Api Detail Url (Contains, Case-Insensitive)")]
        public string PublisherApiDetailUrl { get; set; }

        [ApiMember(Name = "PublisherSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Publisher Site Detail Url (Contains, Case-Insensitive)")]
        public string PublisherSiteDetailUrl { get; set; }

        [ApiMember(Name = "PublisherName", IsRequired = false, Description = "Filter by the Related Publisher Name (Contains, Case-Insensitive)")]
        public string PublisherName { get; set; }

        [ApiMember(Name = "PublisherShortDescription", IsRequired = false, Description = "Filter by the Related Publisher Short Description (Contains, Case-Insensitive)")]
        public string PublisherShortDescription { get; set; }

        [ApiMember(Name = "PublisherDescription", IsRequired = false, Description = "Filter by the Related Publisher Description (Contains, Case-Insensitive)")]
        public string PublisherDescription { get; set; }

        [ApiMember(Name = "RealName", IsRequired = false, Description = "The RealName to search by. (Contains, Case-Insensitive)")]
        public string RealName { get; set; }

    }

    [Route("/Characters/", "GET", Summary = "Gets All Active Characters")]
    public class GetCharacters : CharacterSearchModelBase, IReturn<List<ICharacterModel>> { }

    [Route("/Characters/Listing", "GET", Summary = "Gets All Active Characters with the mininum header information")]
    public class GetCharactersAsListing : CharacterSearchModelBase, IReturn<List<ICharacterModel>> { }

    [Route("/Characters/{ID}", "GET", Summary = "Gets Character by Identifier")]
    public class GetCharacter : ImplementsID, IReturn<ICharacterModel> { }

    [Route("/Characters/{CustomKey}/ByKey", "GET", Summary = "Gets Character by Key")]
    public class GetCharacterByKey : ImplementsKey, IReturn<ICharacterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/Create", "POST", Summary = "Creates an Character with these contents")]
    public class CreateCharacter : CharacterModelBase, IReturn<ICharacterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/Update", "POST", Summary = "Updates an Character with new contents")]
    public class UpdateCharacter : CharacterModelBase, IReturn<ICharacterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/{ID}/Deactivate", "POST", Summary = "Deactivates an Character by Identifier")]
    public class DeactivateCharacter : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Character by Key")]
    public class DeactivateCharacterByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/{ID}/Remove", "POST", Summary = "Removes an Character by Identifier")]
    public class RemoveCharacter : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Characters/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Character by Key")]
    public class RemoveCharacterByKey : ImplementsKey, IReturn<bool> { }

    public interface ICharactersServices
    {
        List<ICharacterModel> Any(GetCharacters request);
        List<ICharacterModel> Any(GetCharactersAsListing request);
        ICharacterModel Any(GetCharacter request);
        ICharacterModel Any(GetCharacterByKey request);
        ICharacterModel Any(CreateCharacter request);
        ICharacterModel Any(UpdateCharacter request);
        bool Any(DeactivateCharacter request);
        bool Any(DeactivateCharacterByKey request);
        bool Any(RemoveCharacter request);
        bool Any(RemoveCharacterByKey request);
    }

    public class CharactersServices : Service, ICharactersServices
    {
        private readonly ICharactersBusinessWorkflow workflow;

        public CharactersServices(ICharactersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ICharacterModel> Any(GetCharacters request) { return workflow.Search(request); }
        public List<ICharacterModel> Any(GetCharactersAsListing request) { return workflow.Search(request, true); }
        public ICharacterModel Any(GetCharacter request) { return workflow.Get(request.ID); }
        public ICharacterModel Any(GetCharacterByKey request) { return workflow.Get(request.CustomKey); }
        public ICharacterModel Any(CreateCharacter request) { return workflow.Create(request); }
        public ICharacterModel Any(UpdateCharacter request) { return workflow.Update(request); }
        public bool Any(DeactivateCharacter request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateCharacterByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveCharacter request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveCharacterByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
