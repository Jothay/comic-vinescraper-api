// <auto-generated>
// <copyright file="Characters.ICharacterCreatorServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the CharacterCreator ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class CharacterCreatorModelBase : NameableEntityModelBase, ICharacterCreatorModel
    {
        // CharacterCreator Properties
        // <None>
        // Related Objects
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        public int CreatorId { get; set; }
        public IPersonModel Creator { get; set; }
        // Associated Objects
        // <None>
    }
    public class CharacterCreatorSearchModelBase : NameableEntitySearchModelBase, ICharacterCreatorSearchModel
    {
        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

        [ApiMember(Name = "CreatorId", IsRequired = false, Description = "Filter by the Related CreatorId")]
        public int? CreatorId { get; set; }

        [ApiMember(Name = "CreatorCustomKey", IsRequired = false, Description = "Filter by the Related Creator CustomKey (Equals, Case-Insensitive)")]
        public string CreatorCustomKey { get; set; }

        [ApiMember(Name = "CreatorApiDetailUrl", IsRequired = false, Description = "Filter by the Related Creator Api Detail Url (Contains, Case-Insensitive)")]
        public string CreatorApiDetailUrl { get; set; }

        [ApiMember(Name = "CreatorSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Creator Site Detail Url (Contains, Case-Insensitive)")]
        public string CreatorSiteDetailUrl { get; set; }

        [ApiMember(Name = "CreatorName", IsRequired = false, Description = "Filter by the Related Creator Name (Contains, Case-Insensitive)")]
        public string CreatorName { get; set; }

        [ApiMember(Name = "CreatorShortDescription", IsRequired = false, Description = "Filter by the Related Creator Short Description (Contains, Case-Insensitive)")]
        public string CreatorShortDescription { get; set; }

        [ApiMember(Name = "CreatorDescription", IsRequired = false, Description = "Filter by the Related Creator Description (Contains, Case-Insensitive)")]
        public string CreatorDescription { get; set; }

    }

    [Route("/CharacterCreators/", "GET", Summary = "Gets All Active CharacterCreators")]
    public class GetCharacterCreators : CharacterCreatorSearchModelBase, IReturn<List<ICharacterCreatorModel>> { }

    [Route("/CharacterCreators/Listing", "GET", Summary = "Gets All Active CharacterCreators with the mininum header information")]
    public class GetCharacterCreatorsAsListing : CharacterCreatorSearchModelBase, IReturn<List<ICharacterCreatorModel>> { }

    [Route("/CharacterCreators/{ID}", "GET", Summary = "Gets CharacterCreator by Identifier")]
    public class GetCharacterCreator : ImplementsID, IReturn<ICharacterCreatorModel> { }

    [Route("/CharacterCreators/{CustomKey}/ByKey", "GET", Summary = "Gets CharacterCreator by Key")]
    public class GetCharacterCreatorByKey : ImplementsKey, IReturn<ICharacterCreatorModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/Create", "POST", Summary = "Creates an CharacterCreator with these contents")]
    public class CreateCharacterCreator : CharacterCreatorModelBase, IReturn<ICharacterCreatorModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/Update", "POST", Summary = "Updates an CharacterCreator with new contents")]
    public class UpdateCharacterCreator : CharacterCreatorModelBase, IReturn<ICharacterCreatorModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/{ID}/Deactivate", "POST", Summary = "Deactivates an CharacterCreator by Identifier")]
    public class DeactivateCharacterCreator : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an CharacterCreator by Key")]
    public class DeactivateCharacterCreatorByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/{ID}/Remove", "POST", Summary = "Removes an CharacterCreator by Identifier")]
    public class RemoveCharacterCreator : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterCreators/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an CharacterCreator by Key")]
    public class RemoveCharacterCreatorByKey : ImplementsKey, IReturn<bool> { }

    public interface ICharacterCreatorsServices
    {
        List<ICharacterCreatorModel> Any(GetCharacterCreators request);
        List<ICharacterCreatorModel> Any(GetCharacterCreatorsAsListing request);
        ICharacterCreatorModel Any(GetCharacterCreator request);
        ICharacterCreatorModel Any(GetCharacterCreatorByKey request);
        ICharacterCreatorModel Any(CreateCharacterCreator request);
        ICharacterCreatorModel Any(UpdateCharacterCreator request);
        bool Any(DeactivateCharacterCreator request);
        bool Any(DeactivateCharacterCreatorByKey request);
        bool Any(RemoveCharacterCreator request);
        bool Any(RemoveCharacterCreatorByKey request);
    }

    public class CharacterCreatorsServices : Service, ICharacterCreatorsServices
    {
        private readonly ICharacterCreatorsBusinessWorkflow workflow;

        public CharacterCreatorsServices(ICharacterCreatorsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ICharacterCreatorModel> Any(GetCharacterCreators request) { return workflow.Search(request); }
        public List<ICharacterCreatorModel> Any(GetCharacterCreatorsAsListing request) { return workflow.Search(request, true); }
        public ICharacterCreatorModel Any(GetCharacterCreator request) { return workflow.Get(request.ID); }
        public ICharacterCreatorModel Any(GetCharacterCreatorByKey request) { return workflow.Get(request.CustomKey); }
        public ICharacterCreatorModel Any(CreateCharacterCreator request) { return workflow.Create(request); }
        public ICharacterCreatorModel Any(UpdateCharacterCreator request) { return workflow.Update(request); }
        public bool Any(DeactivateCharacterCreator request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateCharacterCreatorByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveCharacterCreator request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveCharacterCreatorByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
