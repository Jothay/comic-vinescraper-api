// <auto-generated>
// <copyright file="Movies.IMovieStudioServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the MovieStudio ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class MovieStudioModelBase : NameableEntityModelBase, IMovieStudioModel
    {
        // MovieStudio Properties
        // <None>
        // Related Objects
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        public int StudioId { get; set; }
        public IStudioModel Studio { get; set; }
        // Associated Objects
        // <None>
    }
    public class MovieStudioSearchModelBase : NameableEntitySearchModelBase, IMovieStudioSearchModel
    {
        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

        [ApiMember(Name = "StudioId", IsRequired = false, Description = "Filter by the Related StudioId")]
        public int? StudioId { get; set; }

        [ApiMember(Name = "StudioCustomKey", IsRequired = false, Description = "Filter by the Related Studio CustomKey (Equals, Case-Insensitive)")]
        public string StudioCustomKey { get; set; }

        [ApiMember(Name = "StudioApiDetailUrl", IsRequired = false, Description = "Filter by the Related Studio Api Detail Url (Contains, Case-Insensitive)")]
        public string StudioApiDetailUrl { get; set; }

        [ApiMember(Name = "StudioSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Studio Site Detail Url (Contains, Case-Insensitive)")]
        public string StudioSiteDetailUrl { get; set; }

        [ApiMember(Name = "StudioName", IsRequired = false, Description = "Filter by the Related Studio Name (Contains, Case-Insensitive)")]
        public string StudioName { get; set; }

        [ApiMember(Name = "StudioShortDescription", IsRequired = false, Description = "Filter by the Related Studio Short Description (Contains, Case-Insensitive)")]
        public string StudioShortDescription { get; set; }

        [ApiMember(Name = "StudioDescription", IsRequired = false, Description = "Filter by the Related Studio Description (Contains, Case-Insensitive)")]
        public string StudioDescription { get; set; }

    }

    [Route("/MovieStudios/", "GET", Summary = "Gets All Active MovieStudios")]
    public class GetMovieStudios : MovieStudioSearchModelBase, IReturn<List<IMovieStudioModel>> { }

    [Route("/MovieStudios/Listing", "GET", Summary = "Gets All Active MovieStudios with the mininum header information")]
    public class GetMovieStudiosAsListing : MovieStudioSearchModelBase, IReturn<List<IMovieStudioModel>> { }

    [Route("/MovieStudios/{ID}", "GET", Summary = "Gets MovieStudio by Identifier")]
    public class GetMovieStudio : ImplementsID, IReturn<IMovieStudioModel> { }

    [Route("/MovieStudios/{CustomKey}/ByKey", "GET", Summary = "Gets MovieStudio by Key")]
    public class GetMovieStudioByKey : ImplementsKey, IReturn<IMovieStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/Create", "POST", Summary = "Creates an MovieStudio with these contents")]
    public class CreateMovieStudio : MovieStudioModelBase, IReturn<IMovieStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/Update", "POST", Summary = "Updates an MovieStudio with new contents")]
    public class UpdateMovieStudio : MovieStudioModelBase, IReturn<IMovieStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/{ID}/Deactivate", "POST", Summary = "Deactivates an MovieStudio by Identifier")]
    public class DeactivateMovieStudio : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an MovieStudio by Key")]
    public class DeactivateMovieStudioByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/{ID}/Remove", "POST", Summary = "Removes an MovieStudio by Identifier")]
    public class RemoveMovieStudio : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieStudios/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an MovieStudio by Key")]
    public class RemoveMovieStudioByKey : ImplementsKey, IReturn<bool> { }

    public interface IMovieStudiosServices
    {
        List<IMovieStudioModel> Any(GetMovieStudios request);
        List<IMovieStudioModel> Any(GetMovieStudiosAsListing request);
        IMovieStudioModel Any(GetMovieStudio request);
        IMovieStudioModel Any(GetMovieStudioByKey request);
        IMovieStudioModel Any(CreateMovieStudio request);
        IMovieStudioModel Any(UpdateMovieStudio request);
        bool Any(DeactivateMovieStudio request);
        bool Any(DeactivateMovieStudioByKey request);
        bool Any(RemoveMovieStudio request);
        bool Any(RemoveMovieStudioByKey request);
    }

    public class MovieStudiosServices : Service, IMovieStudiosServices
    {
        private readonly IMovieStudiosBusinessWorkflow workflow;

        public MovieStudiosServices(IMovieStudiosBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IMovieStudioModel> Any(GetMovieStudios request) { return workflow.Search(request); }
        public List<IMovieStudioModel> Any(GetMovieStudiosAsListing request) { return workflow.Search(request, true); }
        public IMovieStudioModel Any(GetMovieStudio request) { return workflow.Get(request.ID); }
        public IMovieStudioModel Any(GetMovieStudioByKey request) { return workflow.Get(request.CustomKey); }
        public IMovieStudioModel Any(CreateMovieStudio request) { return workflow.Create(request); }
        public IMovieStudioModel Any(UpdateMovieStudio request) { return workflow.Update(request); }
        public bool Any(DeactivateMovieStudio request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateMovieStudioByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveMovieStudio request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveMovieStudioByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
