// <auto-generated>
// <copyright file="Locations.ILocationServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Location ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class LocationModelBase : NameableEntityModelBase, ILocationModel
    {
        // Location Properties
        public int? StartYear { get; set; }
        // Related Objects
        public int FirstIssueAppearanceId { get; set; }
        public IIssueModel FirstIssueAppearance { get; set; }
        public int PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        // Associated Objects
        public List<ILocationAliasModel> LocationAliases { get; set; }
        public List<ILocationAppearedInIssueModel> LocationAppearedInIssues { get; set; }
        public List<ILocationIssueModel> LocationIssues { get; set; }
        public List<ILocationMovieModel> LocationMovies { get; set; }
        public List<ILocationStoryArcModel> LocationStoryArcs { get; set; }
        public List<ILocationVolumeModel> LocationVolumes { get; set; }
    }
    public class LocationSearchModelBase : NameableEntitySearchModelBase, ILocationSearchModel
    {
        [ApiMember(Name = "FirstIssueAppearanceId", IsRequired = false, Description = "Filter by the Related FirstIssueAppearanceId")]
        public int? FirstIssueAppearanceId { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceCustomKey", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance CustomKey (Equals, Case-Insensitive)")]
        public string FirstIssueAppearanceCustomKey { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceApiDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Api Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceApiDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceSiteDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Site Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceSiteDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceName", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Name (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceName { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceShortDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Short Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceShortDescription { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

    }

    [Route("/Locations/", "GET", Summary = "Gets All Active Locations")]
    public class GetLocations : LocationSearchModelBase, IReturn<List<ILocationModel>> { }

    [Route("/Locations/Listing", "GET", Summary = "Gets All Active Locations with the mininum header information")]
    public class GetLocationsAsListing : LocationSearchModelBase, IReturn<List<ILocationModel>> { }

    [Route("/Locations/{ID}", "GET", Summary = "Gets Location by Identifier")]
    public class GetLocation : ImplementsID, IReturn<ILocationModel> { }

    [Route("/Locations/{CustomKey}/ByKey", "GET", Summary = "Gets Location by Key")]
    public class GetLocationByKey : ImplementsKey, IReturn<ILocationModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/Create", "POST", Summary = "Creates an Location with these contents")]
    public class CreateLocation : LocationModelBase, IReturn<ILocationModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/Update", "POST", Summary = "Updates an Location with new contents")]
    public class UpdateLocation : LocationModelBase, IReturn<ILocationModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/{ID}/Deactivate", "POST", Summary = "Deactivates an Location by Identifier")]
    public class DeactivateLocation : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Location by Key")]
    public class DeactivateLocationByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/{ID}/Remove", "POST", Summary = "Removes an Location by Identifier")]
    public class RemoveLocation : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Locations/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Location by Key")]
    public class RemoveLocationByKey : ImplementsKey, IReturn<bool> { }

    public interface ILocationsServices
    {
        List<ILocationModel> Any(GetLocations request);
        List<ILocationModel> Any(GetLocationsAsListing request);
        ILocationModel Any(GetLocation request);
        ILocationModel Any(GetLocationByKey request);
        ILocationModel Any(CreateLocation request);
        ILocationModel Any(UpdateLocation request);
        bool Any(DeactivateLocation request);
        bool Any(DeactivateLocationByKey request);
        bool Any(RemoveLocation request);
        bool Any(RemoveLocationByKey request);
    }

    public class LocationsServices : Service, ILocationsServices
    {
        private readonly ILocationsBusinessWorkflow workflow;

        public LocationsServices(ILocationsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ILocationModel> Any(GetLocations request) { return workflow.Search(request); }
        public List<ILocationModel> Any(GetLocationsAsListing request) { return workflow.Search(request, true); }
        public ILocationModel Any(GetLocation request) { return workflow.Get(request.ID); }
        public ILocationModel Any(GetLocationByKey request) { return workflow.Get(request.CustomKey); }
        public ILocationModel Any(CreateLocation request) { return workflow.Create(request); }
        public ILocationModel Any(UpdateLocation request) { return workflow.Update(request); }
        public bool Any(DeactivateLocation request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateLocationByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveLocation request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveLocationByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
