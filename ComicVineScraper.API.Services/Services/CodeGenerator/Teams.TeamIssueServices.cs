// <auto-generated>
// <copyright file="Teams.ITeamIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Teams
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class TeamIssueModelBase : NameableEntityModelBase, ITeamIssueModel
    {
        // TeamIssue Properties
        // <None>
        // Related Objects
        public int TeamId { get; set; }
        public ITeamModel Team { get; set; }
        public int IssueId { get; set; }
        public IIssueModel Issue { get; set; }
        // Associated Objects
        // <None>
    }
    public class TeamIssueSearchModelBase : NameableEntitySearchModelBase, ITeamIssueSearchModel
    {
        [ApiMember(Name = "TeamId", IsRequired = false, Description = "Filter by the Related TeamId")]
        public int? TeamId { get; set; }

        [ApiMember(Name = "TeamCustomKey", IsRequired = false, Description = "Filter by the Related Team CustomKey (Equals, Case-Insensitive)")]
        public string TeamCustomKey { get; set; }

        [ApiMember(Name = "TeamApiDetailUrl", IsRequired = false, Description = "Filter by the Related Team Api Detail Url (Contains, Case-Insensitive)")]
        public string TeamApiDetailUrl { get; set; }

        [ApiMember(Name = "TeamSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Team Site Detail Url (Contains, Case-Insensitive)")]
        public string TeamSiteDetailUrl { get; set; }

        [ApiMember(Name = "TeamName", IsRequired = false, Description = "Filter by the Related Team Name (Contains, Case-Insensitive)")]
        public string TeamName { get; set; }

        [ApiMember(Name = "TeamShortDescription", IsRequired = false, Description = "Filter by the Related Team Short Description (Contains, Case-Insensitive)")]
        public string TeamShortDescription { get; set; }

        [ApiMember(Name = "TeamDescription", IsRequired = false, Description = "Filter by the Related Team Description (Contains, Case-Insensitive)")]
        public string TeamDescription { get; set; }

        [ApiMember(Name = "IssueId", IsRequired = false, Description = "Filter by the Related IssueId")]
        public int? IssueId { get; set; }

        [ApiMember(Name = "IssueCustomKey", IsRequired = false, Description = "Filter by the Related Issue CustomKey (Equals, Case-Insensitive)")]
        public string IssueCustomKey { get; set; }

        [ApiMember(Name = "IssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Api Detail Url (Contains, Case-Insensitive)")]
        public string IssueApiDetailUrl { get; set; }

        [ApiMember(Name = "IssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Issue Site Detail Url (Contains, Case-Insensitive)")]
        public string IssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "IssueName", IsRequired = false, Description = "Filter by the Related Issue Name (Contains, Case-Insensitive)")]
        public string IssueName { get; set; }

        [ApiMember(Name = "IssueShortDescription", IsRequired = false, Description = "Filter by the Related Issue Short Description (Contains, Case-Insensitive)")]
        public string IssueShortDescription { get; set; }

        [ApiMember(Name = "IssueDescription", IsRequired = false, Description = "Filter by the Related Issue Description (Contains, Case-Insensitive)")]
        public string IssueDescription { get; set; }

    }

    [Route("/TeamIssues/", "GET", Summary = "Gets All Active TeamIssues")]
    public class GetTeamIssues : TeamIssueSearchModelBase, IReturn<List<ITeamIssueModel>> { }

    [Route("/TeamIssues/Listing", "GET", Summary = "Gets All Active TeamIssues with the mininum header information")]
    public class GetTeamIssuesAsListing : TeamIssueSearchModelBase, IReturn<List<ITeamIssueModel>> { }

    [Route("/TeamIssues/{ID}", "GET", Summary = "Gets TeamIssue by Identifier")]
    public class GetTeamIssue : ImplementsID, IReturn<ITeamIssueModel> { }

    [Route("/TeamIssues/{CustomKey}/ByKey", "GET", Summary = "Gets TeamIssue by Key")]
    public class GetTeamIssueByKey : ImplementsKey, IReturn<ITeamIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/Create", "POST", Summary = "Creates an TeamIssue with these contents")]
    public class CreateTeamIssue : TeamIssueModelBase, IReturn<ITeamIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/Update", "POST", Summary = "Updates an TeamIssue with new contents")]
    public class UpdateTeamIssue : TeamIssueModelBase, IReturn<ITeamIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an TeamIssue by Identifier")]
    public class DeactivateTeamIssue : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an TeamIssue by Key")]
    public class DeactivateTeamIssueByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/{ID}/Remove", "POST", Summary = "Removes an TeamIssue by Identifier")]
    public class RemoveTeamIssue : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/TeamIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an TeamIssue by Key")]
    public class RemoveTeamIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface ITeamIssuesServices
    {
        List<ITeamIssueModel> Any(GetTeamIssues request);
        List<ITeamIssueModel> Any(GetTeamIssuesAsListing request);
        ITeamIssueModel Any(GetTeamIssue request);
        ITeamIssueModel Any(GetTeamIssueByKey request);
        ITeamIssueModel Any(CreateTeamIssue request);
        ITeamIssueModel Any(UpdateTeamIssue request);
        bool Any(DeactivateTeamIssue request);
        bool Any(DeactivateTeamIssueByKey request);
        bool Any(RemoveTeamIssue request);
        bool Any(RemoveTeamIssueByKey request);
    }

    public class TeamIssuesServices : Service, ITeamIssuesServices
    {
        private readonly ITeamIssuesBusinessWorkflow workflow;

        public TeamIssuesServices(ITeamIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ITeamIssueModel> Any(GetTeamIssues request) { return workflow.Search(request); }
        public List<ITeamIssueModel> Any(GetTeamIssuesAsListing request) { return workflow.Search(request, true); }
        public ITeamIssueModel Any(GetTeamIssue request) { return workflow.Get(request.ID); }
        public ITeamIssueModel Any(GetTeamIssueByKey request) { return workflow.Get(request.CustomKey); }
        public ITeamIssueModel Any(CreateTeamIssue request) { return workflow.Create(request); }
        public ITeamIssueModel Any(UpdateTeamIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateTeamIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateTeamIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveTeamIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveTeamIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
