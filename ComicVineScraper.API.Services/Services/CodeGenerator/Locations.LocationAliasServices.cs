// <auto-generated>
// <copyright file="Locations.ILocationAliasServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the LocationAlias ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class LocationAliasModelBase : NameableEntityModelBase, ILocationAliasModel
    {
        // LocationAlias Properties
        // <None>
        // Related Objects
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        // Associated Objects
        // <None>
    }
    public class LocationAliasSearchModelBase : NameableEntitySearchModelBase, ILocationAliasSearchModel
    {
        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

    }

    [Route("/LocationAliases/", "GET", Summary = "Gets All Active LocationAliases")]
    public class GetLocationAliases : LocationAliasSearchModelBase, IReturn<List<ILocationAliasModel>> { }

    [Route("/LocationAliases/Listing", "GET", Summary = "Gets All Active LocationAliases with the mininum header information")]
    public class GetLocationAliasesAsListing : LocationAliasSearchModelBase, IReturn<List<ILocationAliasModel>> { }

    [Route("/LocationAliases/{ID}", "GET", Summary = "Gets LocationAlias by Identifier")]
    public class GetLocationAlias : ImplementsID, IReturn<ILocationAliasModel> { }

    [Route("/LocationAliases/{CustomKey}/ByKey", "GET", Summary = "Gets LocationAlias by Key")]
    public class GetLocationAliasByKey : ImplementsKey, IReturn<ILocationAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/Create", "POST", Summary = "Creates an LocationAlias with these contents")]
    public class CreateLocationAlias : LocationAliasModelBase, IReturn<ILocationAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/Update", "POST", Summary = "Updates an LocationAlias with new contents")]
    public class UpdateLocationAlias : LocationAliasModelBase, IReturn<ILocationAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an LocationAlias by Identifier")]
    public class DeactivateLocationAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an LocationAlias by Key")]
    public class DeactivateLocationAliasByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/{ID}/Remove", "POST", Summary = "Removes an LocationAlias by Identifier")]
    public class RemoveLocationAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an LocationAlias by Key")]
    public class RemoveLocationAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface ILocationAliasesServices
    {
        List<ILocationAliasModel> Any(GetLocationAliases request);
        List<ILocationAliasModel> Any(GetLocationAliasesAsListing request);
        ILocationAliasModel Any(GetLocationAlias request);
        ILocationAliasModel Any(GetLocationAliasByKey request);
        ILocationAliasModel Any(CreateLocationAlias request);
        ILocationAliasModel Any(UpdateLocationAlias request);
        bool Any(DeactivateLocationAlias request);
        bool Any(DeactivateLocationAliasByKey request);
        bool Any(RemoveLocationAlias request);
        bool Any(RemoveLocationAliasByKey request);
    }

    public class LocationAliasesServices : Service, ILocationAliasesServices
    {
        private readonly ILocationAliasesBusinessWorkflow workflow;

        public LocationAliasesServices(ILocationAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ILocationAliasModel> Any(GetLocationAliases request) { return workflow.Search(request); }
        public List<ILocationAliasModel> Any(GetLocationAliasesAsListing request) { return workflow.Search(request, true); }
        public ILocationAliasModel Any(GetLocationAlias request) { return workflow.Get(request.ID); }
        public ILocationAliasModel Any(GetLocationAliasByKey request) { return workflow.Get(request.CustomKey); }
        public ILocationAliasModel Any(CreateLocationAlias request) { return workflow.Create(request); }
        public ILocationAliasModel Any(UpdateLocationAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateLocationAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateLocationAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveLocationAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveLocationAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
