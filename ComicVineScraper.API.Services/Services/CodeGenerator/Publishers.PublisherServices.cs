// <auto-generated>
// <copyright file="Publishers.IPublisherServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Publisher ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Publishers
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class PublisherModelBase : NameableEntityModelBase, IPublisherModel
    {
        // Publisher Properties
        public string LocationAddress { get; set; }
        public string LocationCity { get; set; }
        public string LocationState { get; set; }
        // Related Objects
        public int? PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        // Associated Objects
        public List<ICharacterModel> CharactersPublished { get; set; }
        public List<IPublisherAliasModel> PublisherAliases { get; set; }
        public List<ISeriesModel> SeriesPublished { get; set; }
        public List<IStoryArcModel> StoryArcsPublished { get; set; }
        public List<ITeamModel> TeamsPublished { get; set; }
        public List<IVolumeModel> VolumesPublished { get; set; }
    }
    public class PublisherSearchModelBase : NameableEntitySearchModelBase, IPublisherSearchModel
    {
        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

    }

    [Route("/Publishers/", "GET", Summary = "Gets All Active Publishers")]
    public class GetPublishers : PublisherSearchModelBase, IReturn<List<IPublisherModel>> { }

    [Route("/Publishers/Listing", "GET", Summary = "Gets All Active Publishers with the mininum header information")]
    public class GetPublishersAsListing : PublisherSearchModelBase, IReturn<List<IPublisherModel>> { }

    [Route("/Publishers/{ID}", "GET", Summary = "Gets Publisher by Identifier")]
    public class GetPublisher : ImplementsID, IReturn<IPublisherModel> { }

    [Route("/Publishers/{CustomKey}/ByKey", "GET", Summary = "Gets Publisher by Key")]
    public class GetPublisherByKey : ImplementsKey, IReturn<IPublisherModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/Create", "POST", Summary = "Creates an Publisher with these contents")]
    public class CreatePublisher : PublisherModelBase, IReturn<IPublisherModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/Update", "POST", Summary = "Updates an Publisher with new contents")]
    public class UpdatePublisher : PublisherModelBase, IReturn<IPublisherModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/{ID}/Deactivate", "POST", Summary = "Deactivates an Publisher by Identifier")]
    public class DeactivatePublisher : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Publisher by Key")]
    public class DeactivatePublisherByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/{ID}/Remove", "POST", Summary = "Removes an Publisher by Identifier")]
    public class RemovePublisher : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Publishers/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Publisher by Key")]
    public class RemovePublisherByKey : ImplementsKey, IReturn<bool> { }

    public interface IPublishersServices
    {
        List<IPublisherModel> Any(GetPublishers request);
        List<IPublisherModel> Any(GetPublishersAsListing request);
        IPublisherModel Any(GetPublisher request);
        IPublisherModel Any(GetPublisherByKey request);
        IPublisherModel Any(CreatePublisher request);
        IPublisherModel Any(UpdatePublisher request);
        bool Any(DeactivatePublisher request);
        bool Any(DeactivatePublisherByKey request);
        bool Any(RemovePublisher request);
        bool Any(RemovePublisherByKey request);
    }

    public class PublishersServices : Service, IPublishersServices
    {
        private readonly IPublishersBusinessWorkflow workflow;

        public PublishersServices(IPublishersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IPublisherModel> Any(GetPublishers request) { return workflow.Search(request); }
        public List<IPublisherModel> Any(GetPublishersAsListing request) { return workflow.Search(request, true); }
        public IPublisherModel Any(GetPublisher request) { return workflow.Get(request.ID); }
        public IPublisherModel Any(GetPublisherByKey request) { return workflow.Get(request.CustomKey); }
        public IPublisherModel Any(CreatePublisher request) { return workflow.Create(request); }
        public IPublisherModel Any(UpdatePublisher request) { return workflow.Update(request); }
        public bool Any(DeactivatePublisher request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivatePublisherByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemovePublisher request) { return workflow.Remove(request.ID); }
        public bool Any(RemovePublisherByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
