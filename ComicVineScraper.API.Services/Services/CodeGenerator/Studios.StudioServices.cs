// <auto-generated>
// <copyright file="Studios.IStudioServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the Studio ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Studios
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class StudioModelBase : NameableEntityModelBase, IStudioModel
    {
        // Studio Properties
        // <None>
        // Related Objects
        // <None>
        // Associated Objects
        public List<IMovieStudioModel> MovieStudios { get; set; }
    }
    public class StudioSearchModelBase : NameableEntitySearchModelBase, IStudioSearchModel
    {
        // No Studio Search Properties
    }

    [Route("/Studios/", "GET", Summary = "Gets All Active Studios")]
    public class GetStudios : StudioSearchModelBase, IReturn<List<IStudioModel>> { }

    [Route("/Studios/Listing", "GET", Summary = "Gets All Active Studios with the mininum header information")]
    public class GetStudiosAsListing : StudioSearchModelBase, IReturn<List<IStudioModel>> { }

    [Route("/Studios/{ID}", "GET", Summary = "Gets Studio by Identifier")]
    public class GetStudio : ImplementsID, IReturn<IStudioModel> { }

    [Route("/Studios/{CustomKey}/ByKey", "GET", Summary = "Gets Studio by Key")]
    public class GetStudioByKey : ImplementsKey, IReturn<IStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/Create", "POST", Summary = "Creates an Studio with these contents")]
    public class CreateStudio : StudioModelBase, IReturn<IStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/Update", "POST", Summary = "Updates an Studio with new contents")]
    public class UpdateStudio : StudioModelBase, IReturn<IStudioModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/{ID}/Deactivate", "POST", Summary = "Deactivates an Studio by Identifier")]
    public class DeactivateStudio : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Studio by Key")]
    public class DeactivateStudioByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/{ID}/Remove", "POST", Summary = "Removes an Studio by Identifier")]
    public class RemoveStudio : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Studios/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Studio by Key")]
    public class RemoveStudioByKey : ImplementsKey, IReturn<bool> { }

    public interface IStudiosServices
    {
        List<IStudioModel> Any(GetStudios request);
        List<IStudioModel> Any(GetStudiosAsListing request);
        IStudioModel Any(GetStudio request);
        IStudioModel Any(GetStudioByKey request);
        IStudioModel Any(CreateStudio request);
        IStudioModel Any(UpdateStudio request);
        bool Any(DeactivateStudio request);
        bool Any(DeactivateStudioByKey request);
        bool Any(RemoveStudio request);
        bool Any(RemoveStudioByKey request);
    }

    public class StudiosServices : Service, IStudiosServices
    {
        private readonly IStudiosBusinessWorkflow workflow;

        public StudiosServices(IStudiosBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IStudioModel> Any(GetStudios request) { return workflow.Search(request); }
        public List<IStudioModel> Any(GetStudiosAsListing request) { return workflow.Search(request, true); }
        public IStudioModel Any(GetStudio request) { return workflow.Get(request.ID); }
        public IStudioModel Any(GetStudioByKey request) { return workflow.Get(request.CustomKey); }
        public IStudioModel Any(CreateStudio request) { return workflow.Create(request); }
        public IStudioModel Any(UpdateStudio request) { return workflow.Update(request); }
        public bool Any(DeactivateStudio request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateStudioByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveStudio request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveStudioByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
