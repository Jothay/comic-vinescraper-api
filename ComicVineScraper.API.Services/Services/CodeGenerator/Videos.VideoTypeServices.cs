// <auto-generated>
// <copyright file="Videos.IVideoTypeModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VideoType model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Videos
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class VideoTypeModelBase : NameableEntityModelBase, IVideoTypeModel
    {
        // VideoType Properties
        // <None>
        // Related Objects
        // <None>
        // Associated Objects
        public List<IVideoModel> Videos { get; set; }
    }
    public class VideoTypeSearchModelBase : NameableEntitySearchModelBase, IVideoTypeSearchModel
    {
        // No VideoType Search Properties
    }

    [Route("/VideoTypes/", "GET", Summary = "Gets All Active VideoTypes")]
    public class GetVideoTypes : VideoTypeSearchModelBase, IReturn<List<IVideoTypeModel>> { }

    [Route("/VideoTypes/Listing", "GET", Summary = "Gets All Active VideoTypes with the mininum header information")]
    public class GetVideoTypesAsListing : VideoTypeSearchModelBase, IReturn<List<IVideoTypeModel>> { }

    [Route("/VideoTypes/{ID}", "GET", Summary = "Gets VideoType by Identifier")]
    public class GetVideoType : ImplementsID, IReturn<IVideoTypeModel> { }

    [Route("/VideoTypes/{CustomKey}/ByKey", "GET", Summary = "Gets VideoType by Key")]
    public class GetVideoTypeByKey : ImplementsKey, IReturn<IVideoTypeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/Create", "POST", Summary = "Creates an VideoType with these contents")]
    public class CreateVideoType : VideoTypeModelBase, IReturn<IVideoTypeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/Update", "POST", Summary = "Updates an VideoType with new contents")]
    public class UpdateVideoType : VideoTypeModelBase, IReturn<IVideoTypeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/{ID}/Deactivate", "POST", Summary = "Deactivates an VideoType by Identifier")]
    public class DeactivateVideoType : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an VideoType by Key")]
    public class DeactivateVideoTypeByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/{ID}/Remove", "POST", Summary = "Removes an VideoType by Identifier")]
    public class RemoveVideoType : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/VideoTypes/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an VideoType by Key")]
    public class RemoveVideoTypeByKey : ImplementsKey, IReturn<bool> { }

    public interface IVideoTypesServices
    {
        List<IVideoTypeModel> Any(GetVideoTypes request);
        List<IVideoTypeModel> Any(GetVideoTypesAsListing request);
        IVideoTypeModel Any(GetVideoType request);
        IVideoTypeModel Any(GetVideoTypeByKey request);
        IVideoTypeModel Any(CreateVideoType request);
        IVideoTypeModel Any(UpdateVideoType request);
        bool Any(DeactivateVideoType request);
        bool Any(DeactivateVideoTypeByKey request);
        bool Any(RemoveVideoType request);
        bool Any(RemoveVideoTypeByKey request);
    }

    public class VideoTypesServices : Service, IVideoTypesServices
    {
        private readonly IVideoTypesBusinessWorkflow workflow;

        public VideoTypesServices(IVideoTypesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IVideoTypeModel> Any(GetVideoTypes request) { return workflow.Search(request); }
        public List<IVideoTypeModel> Any(GetVideoTypesAsListing request) { return workflow.Search(request, true); }
        public IVideoTypeModel Any(GetVideoType request) { return workflow.Get(request.ID); }
        public IVideoTypeModel Any(GetVideoTypeByKey request) { return workflow.Get(request.CustomKey); }
        public IVideoTypeModel Any(CreateVideoType request) { return workflow.Create(request); }
        public IVideoTypeModel Any(UpdateVideoType request) { return workflow.Update(request); }
        public bool Any(DeactivateVideoType request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateVideoTypeByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveVideoType request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveVideoTypeByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
