// <auto-generated>
// <copyright file="Episodes.IEpisodePersonServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodePerson ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class EpisodePersonModelBase : NameableEntityModelBase, IEpisodePersonModel
    {
        // EpisodePerson Properties
        // <None>
        // Related Objects
        public int EpisodeId { get; set; }
        public IEpisodeModel Episode { get; set; }
        public int PersonId { get; set; }
        public IPersonModel Person { get; set; }
        // Associated Objects
        // <None>
    }
    public class EpisodePersonSearchModelBase : NameableEntitySearchModelBase, IEpisodePersonSearchModel
    {
        [ApiMember(Name = "EpisodeId", IsRequired = false, Description = "Filter by the Related EpisodeId")]
        public int? EpisodeId { get; set; }

        [ApiMember(Name = "EpisodeCustomKey", IsRequired = false, Description = "Filter by the Related Episode CustomKey (Equals, Case-Insensitive)")]
        public string EpisodeCustomKey { get; set; }

        [ApiMember(Name = "EpisodeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Api Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeApiDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Site Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeSiteDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeName", IsRequired = false, Description = "Filter by the Related Episode Name (Contains, Case-Insensitive)")]
        public string EpisodeName { get; set; }

        [ApiMember(Name = "EpisodeShortDescription", IsRequired = false, Description = "Filter by the Related Episode Short Description (Contains, Case-Insensitive)")]
        public string EpisodeShortDescription { get; set; }

        [ApiMember(Name = "EpisodeDescription", IsRequired = false, Description = "Filter by the Related Episode Description (Contains, Case-Insensitive)")]
        public string EpisodeDescription { get; set; }

        [ApiMember(Name = "PersonId", IsRequired = false, Description = "Filter by the Related PersonId")]
        public int? PersonId { get; set; }

        [ApiMember(Name = "PersonCustomKey", IsRequired = false, Description = "Filter by the Related Person CustomKey (Equals, Case-Insensitive)")]
        public string PersonCustomKey { get; set; }

        [ApiMember(Name = "PersonApiDetailUrl", IsRequired = false, Description = "Filter by the Related Person Api Detail Url (Contains, Case-Insensitive)")]
        public string PersonApiDetailUrl { get; set; }

        [ApiMember(Name = "PersonSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Person Site Detail Url (Contains, Case-Insensitive)")]
        public string PersonSiteDetailUrl { get; set; }

        [ApiMember(Name = "PersonName", IsRequired = false, Description = "Filter by the Related Person Name (Contains, Case-Insensitive)")]
        public string PersonName { get; set; }

        [ApiMember(Name = "PersonShortDescription", IsRequired = false, Description = "Filter by the Related Person Short Description (Contains, Case-Insensitive)")]
        public string PersonShortDescription { get; set; }

        [ApiMember(Name = "PersonDescription", IsRequired = false, Description = "Filter by the Related Person Description (Contains, Case-Insensitive)")]
        public string PersonDescription { get; set; }

    }

    [Route("/EpisodePeople/", "GET", Summary = "Gets All Active EpisodePeople")]
    public class GetEpisodePeople : EpisodePersonSearchModelBase, IReturn<List<IEpisodePersonModel>> { }

    [Route("/EpisodePeople/Listing", "GET", Summary = "Gets All Active EpisodePeople with the mininum header information")]
    public class GetEpisodePeopleAsListing : EpisodePersonSearchModelBase, IReturn<List<IEpisodePersonModel>> { }

    [Route("/EpisodePeople/{ID}", "GET", Summary = "Gets EpisodePerson by Identifier")]
    public class GetEpisodePerson : ImplementsID, IReturn<IEpisodePersonModel> { }

    [Route("/EpisodePeople/{CustomKey}/ByKey", "GET", Summary = "Gets EpisodePerson by Key")]
    public class GetEpisodePersonByKey : ImplementsKey, IReturn<IEpisodePersonModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/Create", "POST", Summary = "Creates an EpisodePerson with these contents")]
    public class CreateEpisodePerson : EpisodePersonModelBase, IReturn<IEpisodePersonModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/Update", "POST", Summary = "Updates an EpisodePerson with new contents")]
    public class UpdateEpisodePerson : EpisodePersonModelBase, IReturn<IEpisodePersonModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/{ID}/Deactivate", "POST", Summary = "Deactivates an EpisodePerson by Identifier")]
    public class DeactivateEpisodePerson : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an EpisodePerson by Key")]
    public class DeactivateEpisodePersonByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/{ID}/Remove", "POST", Summary = "Removes an EpisodePerson by Identifier")]
    public class RemoveEpisodePerson : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodePeople/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an EpisodePerson by Key")]
    public class RemoveEpisodePersonByKey : ImplementsKey, IReturn<bool> { }

    public interface IEpisodePeopleServices
    {
        List<IEpisodePersonModel> Any(GetEpisodePeople request);
        List<IEpisodePersonModel> Any(GetEpisodePeopleAsListing request);
        IEpisodePersonModel Any(GetEpisodePerson request);
        IEpisodePersonModel Any(GetEpisodePersonByKey request);
        IEpisodePersonModel Any(CreateEpisodePerson request);
        IEpisodePersonModel Any(UpdateEpisodePerson request);
        bool Any(DeactivateEpisodePerson request);
        bool Any(DeactivateEpisodePersonByKey request);
        bool Any(RemoveEpisodePerson request);
        bool Any(RemoveEpisodePersonByKey request);
    }

    public class EpisodePeopleServices : Service, IEpisodePeopleServices
    {
        private readonly IEpisodePeopleBusinessWorkflow workflow;

        public EpisodePeopleServices(IEpisodePeopleBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IEpisodePersonModel> Any(GetEpisodePeople request) { return workflow.Search(request); }
        public List<IEpisodePersonModel> Any(GetEpisodePeopleAsListing request) { return workflow.Search(request, true); }
        public IEpisodePersonModel Any(GetEpisodePerson request) { return workflow.Get(request.ID); }
        public IEpisodePersonModel Any(GetEpisodePersonByKey request) { return workflow.Get(request.CustomKey); }
        public IEpisodePersonModel Any(CreateEpisodePerson request) { return workflow.Create(request); }
        public IEpisodePersonModel Any(UpdateEpisodePerson request) { return workflow.Update(request); }
        public bool Any(DeactivateEpisodePerson request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateEpisodePersonByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveEpisodePerson request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveEpisodePersonByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
