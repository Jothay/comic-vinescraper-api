// <auto-generated>
// <copyright file="Locations.ILocationAppearedInIssueModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationAppearedInIssue model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class LocationAppearedInIssueModelBase : NameableEntityModelBase, ILocationAppearedInIssueModel
    {
        // LocationAppearedInIssue Properties
        // <None>
        // Related Objects
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        public int AppearedInIssueId { get; set; }
        public IIssueModel AppearedInIssue { get; set; }
        // Associated Objects
        // <None>
    }
    public class LocationAppearedInIssueSearchModelBase : NameableEntitySearchModelBase, ILocationAppearedInIssueSearchModel
    {
        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueId", IsRequired = false, Description = "Filter by the Related AppearedInIssueId")]
        public int? AppearedInIssueId { get; set; }

        [ApiMember(Name = "AppearedInIssueCustomKey", IsRequired = false, Description = "Filter by the Related AppearedInIssue CustomKey (Equals, Case-Insensitive)")]
        public string AppearedInIssueCustomKey { get; set; }

        [ApiMember(Name = "AppearedInIssueApiDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Api Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueApiDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueSiteDetailUrl", IsRequired = false, Description = "Filter by the Related AppearedInIssue Site Detail Url (Contains, Case-Insensitive)")]
        public string AppearedInIssueSiteDetailUrl { get; set; }

        [ApiMember(Name = "AppearedInIssueName", IsRequired = false, Description = "Filter by the Related AppearedInIssue Name (Contains, Case-Insensitive)")]
        public string AppearedInIssueName { get; set; }

        [ApiMember(Name = "AppearedInIssueShortDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Short Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueShortDescription { get; set; }

        [ApiMember(Name = "AppearedInIssueDescription", IsRequired = false, Description = "Filter by the Related AppearedInIssue Description (Contains, Case-Insensitive)")]
        public string AppearedInIssueDescription { get; set; }

    }

    [Route("/LocationAppearedInIssues/", "GET", Summary = "Gets All Active LocationAppearedInIssues")]
    public class GetLocationAppearedInIssues : LocationAppearedInIssueSearchModelBase, IReturn<List<ILocationAppearedInIssueModel>> { }

    [Route("/LocationAppearedInIssues/Listing", "GET", Summary = "Gets All Active LocationAppearedInIssues with the mininum header information")]
    public class GetLocationAppearedInIssuesAsListing : LocationAppearedInIssueSearchModelBase, IReturn<List<ILocationAppearedInIssueModel>> { }

    [Route("/LocationAppearedInIssues/{ID}", "GET", Summary = "Gets LocationAppearedInIssue by Identifier")]
    public class GetLocationAppearedInIssue : ImplementsID, IReturn<ILocationAppearedInIssueModel> { }

    [Route("/LocationAppearedInIssues/{CustomKey}/ByKey", "GET", Summary = "Gets LocationAppearedInIssue by Key")]
    public class GetLocationAppearedInIssueByKey : ImplementsKey, IReturn<ILocationAppearedInIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/Create", "POST", Summary = "Creates an LocationAppearedInIssue with these contents")]
    public class CreateLocationAppearedInIssue : LocationAppearedInIssueModelBase, IReturn<ILocationAppearedInIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/Update", "POST", Summary = "Updates an LocationAppearedInIssue with new contents")]
    public class UpdateLocationAppearedInIssue : LocationAppearedInIssueModelBase, IReturn<ILocationAppearedInIssueModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/{ID}/Deactivate", "POST", Summary = "Deactivates an LocationAppearedInIssue by Identifier")]
    public class DeactivateLocationAppearedInIssue : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an LocationAppearedInIssue by Key")]
    public class DeactivateLocationAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/{ID}/Remove", "POST", Summary = "Removes an LocationAppearedInIssue by Identifier")]
    public class RemoveLocationAppearedInIssue : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationAppearedInIssues/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an LocationAppearedInIssue by Key")]
    public class RemoveLocationAppearedInIssueByKey : ImplementsKey, IReturn<bool> { }

    public interface ILocationAppearedInIssuesServices
    {
        List<ILocationAppearedInIssueModel> Any(GetLocationAppearedInIssues request);
        List<ILocationAppearedInIssueModel> Any(GetLocationAppearedInIssuesAsListing request);
        ILocationAppearedInIssueModel Any(GetLocationAppearedInIssue request);
        ILocationAppearedInIssueModel Any(GetLocationAppearedInIssueByKey request);
        ILocationAppearedInIssueModel Any(CreateLocationAppearedInIssue request);
        ILocationAppearedInIssueModel Any(UpdateLocationAppearedInIssue request);
        bool Any(DeactivateLocationAppearedInIssue request);
        bool Any(DeactivateLocationAppearedInIssueByKey request);
        bool Any(RemoveLocationAppearedInIssue request);
        bool Any(RemoveLocationAppearedInIssueByKey request);
    }

    public class LocationAppearedInIssuesServices : Service, ILocationAppearedInIssuesServices
    {
        private readonly ILocationAppearedInIssuesBusinessWorkflow workflow;

        public LocationAppearedInIssuesServices(ILocationAppearedInIssuesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ILocationAppearedInIssueModel> Any(GetLocationAppearedInIssues request) { return workflow.Search(request); }
        public List<ILocationAppearedInIssueModel> Any(GetLocationAppearedInIssuesAsListing request) { return workflow.Search(request, true); }
        public ILocationAppearedInIssueModel Any(GetLocationAppearedInIssue request) { return workflow.Get(request.ID); }
        public ILocationAppearedInIssueModel Any(GetLocationAppearedInIssueByKey request) { return workflow.Get(request.CustomKey); }
        public ILocationAppearedInIssueModel Any(CreateLocationAppearedInIssue request) { return workflow.Create(request); }
        public ILocationAppearedInIssueModel Any(UpdateLocationAppearedInIssue request) { return workflow.Update(request); }
        public bool Any(DeactivateLocationAppearedInIssue request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateLocationAppearedInIssueByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveLocationAppearedInIssue request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveLocationAppearedInIssueByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
