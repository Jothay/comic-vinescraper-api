// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterFirstAppearanceModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeCharacterFirstAppearance model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class EpisodeCharacterFirstAppearanceModelBase : NameableEntityModelBase, IEpisodeCharacterFirstAppearanceModel
    {
        // EpisodeCharacterFirstAppearance Properties
        // <None>
        // Related Objects
        public int EpisodeId { get; set; }
        public IEpisodeModel Episode { get; set; }
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        // Associated Objects
        // <None>
    }
    public class EpisodeCharacterFirstAppearanceSearchModelBase : NameableEntitySearchModelBase, IEpisodeCharacterFirstAppearanceSearchModel
    {
        [ApiMember(Name = "EpisodeId", IsRequired = false, Description = "Filter by the Related EpisodeId")]
        public int? EpisodeId { get; set; }

        [ApiMember(Name = "EpisodeCustomKey", IsRequired = false, Description = "Filter by the Related Episode CustomKey (Equals, Case-Insensitive)")]
        public string EpisodeCustomKey { get; set; }

        [ApiMember(Name = "EpisodeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Api Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeApiDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Site Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeSiteDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeName", IsRequired = false, Description = "Filter by the Related Episode Name (Contains, Case-Insensitive)")]
        public string EpisodeName { get; set; }

        [ApiMember(Name = "EpisodeShortDescription", IsRequired = false, Description = "Filter by the Related Episode Short Description (Contains, Case-Insensitive)")]
        public string EpisodeShortDescription { get; set; }

        [ApiMember(Name = "EpisodeDescription", IsRequired = false, Description = "Filter by the Related Episode Description (Contains, Case-Insensitive)")]
        public string EpisodeDescription { get; set; }

        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

    }

    [Route("/EpisodeCharacterFirstAppearances/", "GET", Summary = "Gets All Active EpisodeCharacterFirstAppearances")]
    public class GetEpisodeCharacterFirstAppearances : EpisodeCharacterFirstAppearanceSearchModelBase, IReturn<List<IEpisodeCharacterFirstAppearanceModel>> { }

    [Route("/EpisodeCharacterFirstAppearances/Listing", "GET", Summary = "Gets All Active EpisodeCharacterFirstAppearances with the mininum header information")]
    public class GetEpisodeCharacterFirstAppearancesAsListing : EpisodeCharacterFirstAppearanceSearchModelBase, IReturn<List<IEpisodeCharacterFirstAppearanceModel>> { }

    [Route("/EpisodeCharacterFirstAppearances/{ID}", "GET", Summary = "Gets EpisodeCharacterFirstAppearance by Identifier")]
    public class GetEpisodeCharacterFirstAppearance : ImplementsID, IReturn<IEpisodeCharacterFirstAppearanceModel> { }

    [Route("/EpisodeCharacterFirstAppearances/{CustomKey}/ByKey", "GET", Summary = "Gets EpisodeCharacterFirstAppearance by Key")]
    public class GetEpisodeCharacterFirstAppearanceByKey : ImplementsKey, IReturn<IEpisodeCharacterFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/Create", "POST", Summary = "Creates an EpisodeCharacterFirstAppearance with these contents")]
    public class CreateEpisodeCharacterFirstAppearance : EpisodeCharacterFirstAppearanceModelBase, IReturn<IEpisodeCharacterFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/Update", "POST", Summary = "Updates an EpisodeCharacterFirstAppearance with new contents")]
    public class UpdateEpisodeCharacterFirstAppearance : EpisodeCharacterFirstAppearanceModelBase, IReturn<IEpisodeCharacterFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/{ID}/Deactivate", "POST", Summary = "Deactivates an EpisodeCharacterFirstAppearance by Identifier")]
    public class DeactivateEpisodeCharacterFirstAppearance : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an EpisodeCharacterFirstAppearance by Key")]
    public class DeactivateEpisodeCharacterFirstAppearanceByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/{ID}/Remove", "POST", Summary = "Removes an EpisodeCharacterFirstAppearance by Identifier")]
    public class RemoveEpisodeCharacterFirstAppearance : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharacterFirstAppearances/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an EpisodeCharacterFirstAppearance by Key")]
    public class RemoveEpisodeCharacterFirstAppearanceByKey : ImplementsKey, IReturn<bool> { }

    public interface IEpisodeCharacterFirstAppearancesServices
    {
        List<IEpisodeCharacterFirstAppearanceModel> Any(GetEpisodeCharacterFirstAppearances request);
        List<IEpisodeCharacterFirstAppearanceModel> Any(GetEpisodeCharacterFirstAppearancesAsListing request);
        IEpisodeCharacterFirstAppearanceModel Any(GetEpisodeCharacterFirstAppearance request);
        IEpisodeCharacterFirstAppearanceModel Any(GetEpisodeCharacterFirstAppearanceByKey request);
        IEpisodeCharacterFirstAppearanceModel Any(CreateEpisodeCharacterFirstAppearance request);
        IEpisodeCharacterFirstAppearanceModel Any(UpdateEpisodeCharacterFirstAppearance request);
        bool Any(DeactivateEpisodeCharacterFirstAppearance request);
        bool Any(DeactivateEpisodeCharacterFirstAppearanceByKey request);
        bool Any(RemoveEpisodeCharacterFirstAppearance request);
        bool Any(RemoveEpisodeCharacterFirstAppearanceByKey request);
    }

    public class EpisodeCharacterFirstAppearancesServices : Service, IEpisodeCharacterFirstAppearancesServices
    {
        private readonly IEpisodeCharacterFirstAppearancesBusinessWorkflow workflow;

        public EpisodeCharacterFirstAppearancesServices(IEpisodeCharacterFirstAppearancesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IEpisodeCharacterFirstAppearanceModel> Any(GetEpisodeCharacterFirstAppearances request) { return workflow.Search(request); }
        public List<IEpisodeCharacterFirstAppearanceModel> Any(GetEpisodeCharacterFirstAppearancesAsListing request) { return workflow.Search(request, true); }
        public IEpisodeCharacterFirstAppearanceModel Any(GetEpisodeCharacterFirstAppearance request) { return workflow.Get(request.ID); }
        public IEpisodeCharacterFirstAppearanceModel Any(GetEpisodeCharacterFirstAppearanceByKey request) { return workflow.Get(request.CustomKey); }
        public IEpisodeCharacterFirstAppearanceModel Any(CreateEpisodeCharacterFirstAppearance request) { return workflow.Create(request); }
        public IEpisodeCharacterFirstAppearanceModel Any(UpdateEpisodeCharacterFirstAppearance request) { return workflow.Update(request); }
        public bool Any(DeactivateEpisodeCharacterFirstAppearance request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateEpisodeCharacterFirstAppearanceByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveEpisodeCharacterFirstAppearance request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveEpisodeCharacterFirstAppearanceByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
