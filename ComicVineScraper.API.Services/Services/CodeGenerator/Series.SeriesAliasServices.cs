// <auto-generated>
// <copyright file="Series.ISeriesAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the SeriesAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Series
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class SeriesAliasModelBase : NameableEntityModelBase, ISeriesAliasModel
    {
        // SeriesAlias Properties
        // <None>
        // Related Objects
        public int SeriesId { get; set; }
        public ISeriesModel Series { get; set; }
        // Associated Objects
        // <None>
    }
    public class SeriesAliasSearchModelBase : NameableEntitySearchModelBase, ISeriesAliasSearchModel
    {
        [ApiMember(Name = "SeriesId", IsRequired = false, Description = "Filter by the Related SeriesId")]
        public int? SeriesId { get; set; }

        [ApiMember(Name = "SeriesCustomKey", IsRequired = false, Description = "Filter by the Related Series CustomKey (Equals, Case-Insensitive)")]
        public string SeriesCustomKey { get; set; }

        [ApiMember(Name = "SeriesApiDetailUrl", IsRequired = false, Description = "Filter by the Related Series Api Detail Url (Contains, Case-Insensitive)")]
        public string SeriesApiDetailUrl { get; set; }

        [ApiMember(Name = "SeriesSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Series Site Detail Url (Contains, Case-Insensitive)")]
        public string SeriesSiteDetailUrl { get; set; }

        [ApiMember(Name = "SeriesName", IsRequired = false, Description = "Filter by the Related Series Name (Contains, Case-Insensitive)")]
        public string SeriesName { get; set; }

        [ApiMember(Name = "SeriesShortDescription", IsRequired = false, Description = "Filter by the Related Series Short Description (Contains, Case-Insensitive)")]
        public string SeriesShortDescription { get; set; }

        [ApiMember(Name = "SeriesDescription", IsRequired = false, Description = "Filter by the Related Series Description (Contains, Case-Insensitive)")]
        public string SeriesDescription { get; set; }

    }

    [Route("/SeriesAliases/", "GET", Summary = "Gets All Active SeriesAliases")]
    public class GetSeriesAliases : SeriesAliasSearchModelBase, IReturn<List<ISeriesAliasModel>> { }

    [Route("/SeriesAliases/Listing", "GET", Summary = "Gets All Active SeriesAliases with the mininum header information")]
    public class GetSeriesAliasesAsListing : SeriesAliasSearchModelBase, IReturn<List<ISeriesAliasModel>> { }

    [Route("/SeriesAliases/{ID}", "GET", Summary = "Gets SeriesAlias by Identifier")]
    public class GetSeriesAlias : ImplementsID, IReturn<ISeriesAliasModel> { }

    [Route("/SeriesAliases/{CustomKey}/ByKey", "GET", Summary = "Gets SeriesAlias by Key")]
    public class GetSeriesAliasByKey : ImplementsKey, IReturn<ISeriesAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/Create", "POST", Summary = "Creates an SeriesAlias with these contents")]
    public class CreateSeriesAlias : SeriesAliasModelBase, IReturn<ISeriesAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/Update", "POST", Summary = "Updates an SeriesAlias with new contents")]
    public class UpdateSeriesAlias : SeriesAliasModelBase, IReturn<ISeriesAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an SeriesAlias by Identifier")]
    public class DeactivateSeriesAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an SeriesAlias by Key")]
    public class DeactivateSeriesAliasByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/{ID}/Remove", "POST", Summary = "Removes an SeriesAlias by Identifier")]
    public class RemoveSeriesAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/SeriesAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an SeriesAlias by Key")]
    public class RemoveSeriesAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface ISeriesAliasesServices
    {
        List<ISeriesAliasModel> Any(GetSeriesAliases request);
        List<ISeriesAliasModel> Any(GetSeriesAliasesAsListing request);
        ISeriesAliasModel Any(GetSeriesAlias request);
        ISeriesAliasModel Any(GetSeriesAliasByKey request);
        ISeriesAliasModel Any(CreateSeriesAlias request);
        ISeriesAliasModel Any(UpdateSeriesAlias request);
        bool Any(DeactivateSeriesAlias request);
        bool Any(DeactivateSeriesAliasByKey request);
        bool Any(RemoveSeriesAlias request);
        bool Any(RemoveSeriesAliasByKey request);
    }

    public class SeriesAliasesServices : Service, ISeriesAliasesServices
    {
        private readonly ISeriesAliasesBusinessWorkflow workflow;

        public SeriesAliasesServices(ISeriesAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ISeriesAliasModel> Any(GetSeriesAliases request) { return workflow.Search(request); }
        public List<ISeriesAliasModel> Any(GetSeriesAliasesAsListing request) { return workflow.Search(request, true); }
        public ISeriesAliasModel Any(GetSeriesAlias request) { return workflow.Get(request.ID); }
        public ISeriesAliasModel Any(GetSeriesAliasByKey request) { return workflow.Get(request.CustomKey); }
        public ISeriesAliasModel Any(CreateSeriesAlias request) { return workflow.Create(request); }
        public ISeriesAliasModel Any(UpdateSeriesAlias request) { return workflow.Update(request); }
        public bool Any(DeactivateSeriesAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateSeriesAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveSeriesAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveSeriesAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
