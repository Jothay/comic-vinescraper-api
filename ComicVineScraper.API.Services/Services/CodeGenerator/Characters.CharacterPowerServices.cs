// <auto-generated>
// <copyright file="Characters.ICharacterPowerModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterPower model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Characters
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class CharacterPowerModelBase : NameableEntityModelBase, ICharacterPowerModel
    {
        // CharacterPower Properties
        // <None>
        // Related Objects
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        public int PowerId { get; set; }
        public IPowerModel Power { get; set; }
        // Associated Objects
        // <None>
    }
    public class CharacterPowerSearchModelBase : NameableEntitySearchModelBase, ICharacterPowerSearchModel
    {
        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

        [ApiMember(Name = "PowerId", IsRequired = false, Description = "Filter by the Related PowerId")]
        public int? PowerId { get; set; }

        [ApiMember(Name = "PowerCustomKey", IsRequired = false, Description = "Filter by the Related Power CustomKey (Equals, Case-Insensitive)")]
        public string PowerCustomKey { get; set; }

        [ApiMember(Name = "PowerApiDetailUrl", IsRequired = false, Description = "Filter by the Related Power Api Detail Url (Contains, Case-Insensitive)")]
        public string PowerApiDetailUrl { get; set; }

        [ApiMember(Name = "PowerSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Power Site Detail Url (Contains, Case-Insensitive)")]
        public string PowerSiteDetailUrl { get; set; }

        [ApiMember(Name = "PowerName", IsRequired = false, Description = "Filter by the Related Power Name (Contains, Case-Insensitive)")]
        public string PowerName { get; set; }

        [ApiMember(Name = "PowerShortDescription", IsRequired = false, Description = "Filter by the Related Power Short Description (Contains, Case-Insensitive)")]
        public string PowerShortDescription { get; set; }

        [ApiMember(Name = "PowerDescription", IsRequired = false, Description = "Filter by the Related Power Description (Contains, Case-Insensitive)")]
        public string PowerDescription { get; set; }

    }

    [Route("/CharacterPowers/", "GET", Summary = "Gets All Active CharacterPowers")]
    public class GetCharacterPowers : CharacterPowerSearchModelBase, IReturn<List<ICharacterPowerModel>> { }

    [Route("/CharacterPowers/Listing", "GET", Summary = "Gets All Active CharacterPowers with the mininum header information")]
    public class GetCharacterPowersAsListing : CharacterPowerSearchModelBase, IReturn<List<ICharacterPowerModel>> { }

    [Route("/CharacterPowers/{ID}", "GET", Summary = "Gets CharacterPower by Identifier")]
    public class GetCharacterPower : ImplementsID, IReturn<ICharacterPowerModel> { }

    [Route("/CharacterPowers/{CustomKey}/ByKey", "GET", Summary = "Gets CharacterPower by Key")]
    public class GetCharacterPowerByKey : ImplementsKey, IReturn<ICharacterPowerModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/Create", "POST", Summary = "Creates an CharacterPower with these contents")]
    public class CreateCharacterPower : CharacterPowerModelBase, IReturn<ICharacterPowerModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/Update", "POST", Summary = "Updates an CharacterPower with new contents")]
    public class UpdateCharacterPower : CharacterPowerModelBase, IReturn<ICharacterPowerModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/{ID}/Deactivate", "POST", Summary = "Deactivates an CharacterPower by Identifier")]
    public class DeactivateCharacterPower : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an CharacterPower by Key")]
    public class DeactivateCharacterPowerByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/{ID}/Remove", "POST", Summary = "Removes an CharacterPower by Identifier")]
    public class RemoveCharacterPower : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/CharacterPowers/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an CharacterPower by Key")]
    public class RemoveCharacterPowerByKey : ImplementsKey, IReturn<bool> { }

    public interface ICharacterPowersServices
    {
        List<ICharacterPowerModel> Any(GetCharacterPowers request);
        List<ICharacterPowerModel> Any(GetCharacterPowersAsListing request);
        ICharacterPowerModel Any(GetCharacterPower request);
        ICharacterPowerModel Any(GetCharacterPowerByKey request);
        ICharacterPowerModel Any(CreateCharacterPower request);
        ICharacterPowerModel Any(UpdateCharacterPower request);
        bool Any(DeactivateCharacterPower request);
        bool Any(DeactivateCharacterPowerByKey request);
        bool Any(RemoveCharacterPower request);
        bool Any(RemoveCharacterPowerByKey request);
    }

    public class CharacterPowersServices : Service, ICharacterPowersServices
    {
        private readonly ICharacterPowersBusinessWorkflow workflow;

        public CharacterPowersServices(ICharacterPowersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ICharacterPowerModel> Any(GetCharacterPowers request) { return workflow.Search(request); }
        public List<ICharacterPowerModel> Any(GetCharacterPowersAsListing request) { return workflow.Search(request, true); }
        public ICharacterPowerModel Any(GetCharacterPower request) { return workflow.Get(request.ID); }
        public ICharacterPowerModel Any(GetCharacterPowerByKey request) { return workflow.Get(request.CustomKey); }
        public ICharacterPowerModel Any(CreateCharacterPower request) { return workflow.Create(request); }
        public ICharacterPowerModel Any(UpdateCharacterPower request) { return workflow.Update(request); }
        public bool Any(DeactivateCharacterPower request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateCharacterPowerByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveCharacterPower request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveCharacterPowerByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
