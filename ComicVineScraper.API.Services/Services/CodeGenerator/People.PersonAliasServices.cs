// <auto-generated>
// <copyright file="People.IPersonAliasModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PersonAlias model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.People
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class PersonAliasModelBase : NameableEntityModelBase, IPersonAliasModel
    {
        // PersonAlias Properties
        // <None>
        // Related Objects
        public int PersonId { get; set; }
        public IPersonModel Person { get; set; }
        // Associated Objects
        // <None>
    }
    public class PersonAliasSearchModelBase : NameableEntitySearchModelBase, IPersonAliasSearchModel
    {
        [ApiMember(Name = "PersonId", IsRequired = false, Description = "Filter by the Related PersonId")]
        public int? PersonId { get; set; }

        [ApiMember(Name = "PersonCustomKey", IsRequired = false, Description = "Filter by the Related Person CustomKey (Equals, Case-Insensitive)")]
        public string PersonCustomKey { get; set; }

        [ApiMember(Name = "PersonApiDetailUrl", IsRequired = false, Description = "Filter by the Related Person Api Detail Url (Contains, Case-Insensitive)")]
        public string PersonApiDetailUrl { get; set; }

        [ApiMember(Name = "PersonSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Person Site Detail Url (Contains, Case-Insensitive)")]
        public string PersonSiteDetailUrl { get; set; }

        [ApiMember(Name = "PersonName", IsRequired = false, Description = "Filter by the Related Person Name (Contains, Case-Insensitive)")]
        public string PersonName { get; set; }

        [ApiMember(Name = "PersonShortDescription", IsRequired = false, Description = "Filter by the Related Person Short Description (Contains, Case-Insensitive)")]
        public string PersonShortDescription { get; set; }

        [ApiMember(Name = "PersonDescription", IsRequired = false, Description = "Filter by the Related Person Description (Contains, Case-Insensitive)")]
        public string PersonDescription { get; set; }

    }

    [Route("/PersonAliases/", "GET", Summary = "Gets All Active PersonAliases")]
    public class GetPersonAliases : PersonAliasSearchModelBase, IReturn<List<IPersonAliasModel>> { }

    [Route("/PersonAliases/Listing", "GET", Summary = "Gets All Active PersonAliases with the mininum header information")]
    public class GetPersonAliasesAsListing : PersonAliasSearchModelBase, IReturn<List<IPersonAliasModel>> { }

    [Route("/PersonAliases/{ID}", "GET", Summary = "Gets PersonAlias by Identifier")]
    public class GetPersonAlias : ImplementsID, IReturn<IPersonAliasModel> { }

    [Route("/PersonAliases/{CustomKey}/ByKey", "GET", Summary = "Gets PersonAlias by Key")]
    public class GetPersonAliasByKey : ImplementsKey, IReturn<IPersonAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/Create", "POST", Summary = "Creates an PersonAlias with these contents")]
    public class CreatePersonAlias : PersonAliasModelBase, IReturn<IPersonAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/Update", "POST", Summary = "Updates an PersonAlias with new contents")]
    public class UpdatePersonAlias : PersonAliasModelBase, IReturn<IPersonAliasModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/{ID}/Deactivate", "POST", Summary = "Deactivates an PersonAlias by Identifier")]
    public class DeactivatePersonAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an PersonAlias by Key")]
    public class DeactivatePersonAliasByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/{ID}/Remove", "POST", Summary = "Removes an PersonAlias by Identifier")]
    public class RemovePersonAlias : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/PersonAliases/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an PersonAlias by Key")]
    public class RemovePersonAliasByKey : ImplementsKey, IReturn<bool> { }

    public interface IPersonAliasesServices
    {
        List<IPersonAliasModel> Any(GetPersonAliases request);
        List<IPersonAliasModel> Any(GetPersonAliasesAsListing request);
        IPersonAliasModel Any(GetPersonAlias request);
        IPersonAliasModel Any(GetPersonAliasByKey request);
        IPersonAliasModel Any(CreatePersonAlias request);
        IPersonAliasModel Any(UpdatePersonAlias request);
        bool Any(DeactivatePersonAlias request);
        bool Any(DeactivatePersonAliasByKey request);
        bool Any(RemovePersonAlias request);
        bool Any(RemovePersonAliasByKey request);
    }

    public class PersonAliasesServices : Service, IPersonAliasesServices
    {
        private readonly IPersonAliasesBusinessWorkflow workflow;

        public PersonAliasesServices(IPersonAliasesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IPersonAliasModel> Any(GetPersonAliases request) { return workflow.Search(request); }
        public List<IPersonAliasModel> Any(GetPersonAliasesAsListing request) { return workflow.Search(request, true); }
        public IPersonAliasModel Any(GetPersonAlias request) { return workflow.Get(request.ID); }
        public IPersonAliasModel Any(GetPersonAliasByKey request) { return workflow.Get(request.CustomKey); }
        public IPersonAliasModel Any(CreatePersonAlias request) { return workflow.Create(request); }
        public IPersonAliasModel Any(UpdatePersonAlias request) { return workflow.Update(request); }
        public bool Any(DeactivatePersonAlias request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivatePersonAliasByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemovePersonAlias request) { return workflow.Remove(request.ID); }
        public bool Any(RemovePersonAliasByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
