// <auto-generated>
// <copyright file="Episodes.IEpisodeConceptFirstAppearanceModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeConceptFirstAppearance model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class EpisodeConceptFirstAppearanceModelBase : NameableEntityModelBase, IEpisodeConceptFirstAppearanceModel
    {
        // EpisodeConceptFirstAppearance Properties
        // <None>
        // Related Objects
        public int EpisodeId { get; set; }
        public IEpisodeModel Episode { get; set; }
        public int ConceptId { get; set; }
        public IConceptModel Concept { get; set; }
        // Associated Objects
        // <None>
    }
    public class EpisodeConceptFirstAppearanceSearchModelBase : NameableEntitySearchModelBase, IEpisodeConceptFirstAppearanceSearchModel
    {
        [ApiMember(Name = "EpisodeId", IsRequired = false, Description = "Filter by the Related EpisodeId")]
        public int? EpisodeId { get; set; }

        [ApiMember(Name = "EpisodeCustomKey", IsRequired = false, Description = "Filter by the Related Episode CustomKey (Equals, Case-Insensitive)")]
        public string EpisodeCustomKey { get; set; }

        [ApiMember(Name = "EpisodeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Api Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeApiDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Site Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeSiteDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeName", IsRequired = false, Description = "Filter by the Related Episode Name (Contains, Case-Insensitive)")]
        public string EpisodeName { get; set; }

        [ApiMember(Name = "EpisodeShortDescription", IsRequired = false, Description = "Filter by the Related Episode Short Description (Contains, Case-Insensitive)")]
        public string EpisodeShortDescription { get; set; }

        [ApiMember(Name = "EpisodeDescription", IsRequired = false, Description = "Filter by the Related Episode Description (Contains, Case-Insensitive)")]
        public string EpisodeDescription { get; set; }

        [ApiMember(Name = "ConceptId", IsRequired = false, Description = "Filter by the Related ConceptId")]
        public int? ConceptId { get; set; }

        [ApiMember(Name = "ConceptCustomKey", IsRequired = false, Description = "Filter by the Related Concept CustomKey (Equals, Case-Insensitive)")]
        public string ConceptCustomKey { get; set; }

        [ApiMember(Name = "ConceptApiDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Api Detail Url (Contains, Case-Insensitive)")]
        public string ConceptApiDetailUrl { get; set; }

        [ApiMember(Name = "ConceptSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Concept Site Detail Url (Contains, Case-Insensitive)")]
        public string ConceptSiteDetailUrl { get; set; }

        [ApiMember(Name = "ConceptName", IsRequired = false, Description = "Filter by the Related Concept Name (Contains, Case-Insensitive)")]
        public string ConceptName { get; set; }

        [ApiMember(Name = "ConceptShortDescription", IsRequired = false, Description = "Filter by the Related Concept Short Description (Contains, Case-Insensitive)")]
        public string ConceptShortDescription { get; set; }

        [ApiMember(Name = "ConceptDescription", IsRequired = false, Description = "Filter by the Related Concept Description (Contains, Case-Insensitive)")]
        public string ConceptDescription { get; set; }

    }

    [Route("/EpisodeConceptFirstAppearances/", "GET", Summary = "Gets All Active EpisodeConceptFirstAppearances")]
    public class GetEpisodeConceptFirstAppearances : EpisodeConceptFirstAppearanceSearchModelBase, IReturn<List<IEpisodeConceptFirstAppearanceModel>> { }

    [Route("/EpisodeConceptFirstAppearances/Listing", "GET", Summary = "Gets All Active EpisodeConceptFirstAppearances with the mininum header information")]
    public class GetEpisodeConceptFirstAppearancesAsListing : EpisodeConceptFirstAppearanceSearchModelBase, IReturn<List<IEpisodeConceptFirstAppearanceModel>> { }

    [Route("/EpisodeConceptFirstAppearances/{ID}", "GET", Summary = "Gets EpisodeConceptFirstAppearance by Identifier")]
    public class GetEpisodeConceptFirstAppearance : ImplementsID, IReturn<IEpisodeConceptFirstAppearanceModel> { }

    [Route("/EpisodeConceptFirstAppearances/{CustomKey}/ByKey", "GET", Summary = "Gets EpisodeConceptFirstAppearance by Key")]
    public class GetEpisodeConceptFirstAppearanceByKey : ImplementsKey, IReturn<IEpisodeConceptFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/Create", "POST", Summary = "Creates an EpisodeConceptFirstAppearance with these contents")]
    public class CreateEpisodeConceptFirstAppearance : EpisodeConceptFirstAppearanceModelBase, IReturn<IEpisodeConceptFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/Update", "POST", Summary = "Updates an EpisodeConceptFirstAppearance with new contents")]
    public class UpdateEpisodeConceptFirstAppearance : EpisodeConceptFirstAppearanceModelBase, IReturn<IEpisodeConceptFirstAppearanceModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/{ID}/Deactivate", "POST", Summary = "Deactivates an EpisodeConceptFirstAppearance by Identifier")]
    public class DeactivateEpisodeConceptFirstAppearance : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an EpisodeConceptFirstAppearance by Key")]
    public class DeactivateEpisodeConceptFirstAppearanceByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/{ID}/Remove", "POST", Summary = "Removes an EpisodeConceptFirstAppearance by Identifier")]
    public class RemoveEpisodeConceptFirstAppearance : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeConceptFirstAppearances/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an EpisodeConceptFirstAppearance by Key")]
    public class RemoveEpisodeConceptFirstAppearanceByKey : ImplementsKey, IReturn<bool> { }

    public interface IEpisodeConceptFirstAppearancesServices
    {
        List<IEpisodeConceptFirstAppearanceModel> Any(GetEpisodeConceptFirstAppearances request);
        List<IEpisodeConceptFirstAppearanceModel> Any(GetEpisodeConceptFirstAppearancesAsListing request);
        IEpisodeConceptFirstAppearanceModel Any(GetEpisodeConceptFirstAppearance request);
        IEpisodeConceptFirstAppearanceModel Any(GetEpisodeConceptFirstAppearanceByKey request);
        IEpisodeConceptFirstAppearanceModel Any(CreateEpisodeConceptFirstAppearance request);
        IEpisodeConceptFirstAppearanceModel Any(UpdateEpisodeConceptFirstAppearance request);
        bool Any(DeactivateEpisodeConceptFirstAppearance request);
        bool Any(DeactivateEpisodeConceptFirstAppearanceByKey request);
        bool Any(RemoveEpisodeConceptFirstAppearance request);
        bool Any(RemoveEpisodeConceptFirstAppearanceByKey request);
    }

    public class EpisodeConceptFirstAppearancesServices : Service, IEpisodeConceptFirstAppearancesServices
    {
        private readonly IEpisodeConceptFirstAppearancesBusinessWorkflow workflow;

        public EpisodeConceptFirstAppearancesServices(IEpisodeConceptFirstAppearancesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IEpisodeConceptFirstAppearanceModel> Any(GetEpisodeConceptFirstAppearances request) { return workflow.Search(request); }
        public List<IEpisodeConceptFirstAppearanceModel> Any(GetEpisodeConceptFirstAppearancesAsListing request) { return workflow.Search(request, true); }
        public IEpisodeConceptFirstAppearanceModel Any(GetEpisodeConceptFirstAppearance request) { return workflow.Get(request.ID); }
        public IEpisodeConceptFirstAppearanceModel Any(GetEpisodeConceptFirstAppearanceByKey request) { return workflow.Get(request.CustomKey); }
        public IEpisodeConceptFirstAppearanceModel Any(CreateEpisodeConceptFirstAppearance request) { return workflow.Create(request); }
        public IEpisodeConceptFirstAppearanceModel Any(UpdateEpisodeConceptFirstAppearance request) { return workflow.Update(request); }
        public bool Any(DeactivateEpisodeConceptFirstAppearance request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateEpisodeConceptFirstAppearanceByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveEpisodeConceptFirstAppearance request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveEpisodeConceptFirstAppearanceByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
