// <auto-generated>
// <copyright file="Movies.IMovieObjectServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the MovieObject ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Movies
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class MovieObjectModelBase : NameableEntityModelBase, IMovieObjectModel
    {
        // MovieObject Properties
        // <None>
        // Related Objects
        public int MovieId { get; set; }
        public IMovieModel Movie { get; set; }
        public int ObjectId { get; set; }
        public IObjectModel Object { get; set; }
        // Associated Objects
        // <None>
    }
    public class MovieObjectSearchModelBase : NameableEntitySearchModelBase, IMovieObjectSearchModel
    {
        [ApiMember(Name = "MovieId", IsRequired = false, Description = "Filter by the Related MovieId")]
        public int? MovieId { get; set; }

        [ApiMember(Name = "MovieCustomKey", IsRequired = false, Description = "Filter by the Related Movie CustomKey (Equals, Case-Insensitive)")]
        public string MovieCustomKey { get; set; }

        [ApiMember(Name = "MovieApiDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Api Detail Url (Contains, Case-Insensitive)")]
        public string MovieApiDetailUrl { get; set; }

        [ApiMember(Name = "MovieSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Movie Site Detail Url (Contains, Case-Insensitive)")]
        public string MovieSiteDetailUrl { get; set; }

        [ApiMember(Name = "MovieName", IsRequired = false, Description = "Filter by the Related Movie Name (Contains, Case-Insensitive)")]
        public string MovieName { get; set; }

        [ApiMember(Name = "MovieShortDescription", IsRequired = false, Description = "Filter by the Related Movie Short Description (Contains, Case-Insensitive)")]
        public string MovieShortDescription { get; set; }

        [ApiMember(Name = "MovieDescription", IsRequired = false, Description = "Filter by the Related Movie Description (Contains, Case-Insensitive)")]
        public string MovieDescription { get; set; }

        [ApiMember(Name = "ObjectId", IsRequired = false, Description = "Filter by the Related ObjectId")]
        public int? ObjectId { get; set; }

        [ApiMember(Name = "ObjectCustomKey", IsRequired = false, Description = "Filter by the Related Object CustomKey (Equals, Case-Insensitive)")]
        public string ObjectCustomKey { get; set; }

        [ApiMember(Name = "ObjectApiDetailUrl", IsRequired = false, Description = "Filter by the Related Object Api Detail Url (Contains, Case-Insensitive)")]
        public string ObjectApiDetailUrl { get; set; }

        [ApiMember(Name = "ObjectSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Object Site Detail Url (Contains, Case-Insensitive)")]
        public string ObjectSiteDetailUrl { get; set; }

        [ApiMember(Name = "ObjectName", IsRequired = false, Description = "Filter by the Related Object Name (Contains, Case-Insensitive)")]
        public string ObjectName { get; set; }

        [ApiMember(Name = "ObjectShortDescription", IsRequired = false, Description = "Filter by the Related Object Short Description (Contains, Case-Insensitive)")]
        public string ObjectShortDescription { get; set; }

        [ApiMember(Name = "ObjectDescription", IsRequired = false, Description = "Filter by the Related Object Description (Contains, Case-Insensitive)")]
        public string ObjectDescription { get; set; }

    }

    [Route("/MovieObjects/", "GET", Summary = "Gets All Active MovieObjects")]
    public class GetMovieObjects : MovieObjectSearchModelBase, IReturn<List<IMovieObjectModel>> { }

    [Route("/MovieObjects/Listing", "GET", Summary = "Gets All Active MovieObjects with the mininum header information")]
    public class GetMovieObjectsAsListing : MovieObjectSearchModelBase, IReturn<List<IMovieObjectModel>> { }

    [Route("/MovieObjects/{ID}", "GET", Summary = "Gets MovieObject by Identifier")]
    public class GetMovieObject : ImplementsID, IReturn<IMovieObjectModel> { }

    [Route("/MovieObjects/{CustomKey}/ByKey", "GET", Summary = "Gets MovieObject by Key")]
    public class GetMovieObjectByKey : ImplementsKey, IReturn<IMovieObjectModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/Create", "POST", Summary = "Creates an MovieObject with these contents")]
    public class CreateMovieObject : MovieObjectModelBase, IReturn<IMovieObjectModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/Update", "POST", Summary = "Updates an MovieObject with new contents")]
    public class UpdateMovieObject : MovieObjectModelBase, IReturn<IMovieObjectModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/{ID}/Deactivate", "POST", Summary = "Deactivates an MovieObject by Identifier")]
    public class DeactivateMovieObject : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an MovieObject by Key")]
    public class DeactivateMovieObjectByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/{ID}/Remove", "POST", Summary = "Removes an MovieObject by Identifier")]
    public class RemoveMovieObject : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/MovieObjects/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an MovieObject by Key")]
    public class RemoveMovieObjectByKey : ImplementsKey, IReturn<bool> { }

    public interface IMovieObjectsServices
    {
        List<IMovieObjectModel> Any(GetMovieObjects request);
        List<IMovieObjectModel> Any(GetMovieObjectsAsListing request);
        IMovieObjectModel Any(GetMovieObject request);
        IMovieObjectModel Any(GetMovieObjectByKey request);
        IMovieObjectModel Any(CreateMovieObject request);
        IMovieObjectModel Any(UpdateMovieObject request);
        bool Any(DeactivateMovieObject request);
        bool Any(DeactivateMovieObjectByKey request);
        bool Any(RemoveMovieObject request);
        bool Any(RemoveMovieObjectByKey request);
    }

    public class MovieObjectsServices : Service, IMovieObjectsServices
    {
        private readonly IMovieObjectsBusinessWorkflow workflow;

        public MovieObjectsServices(IMovieObjectsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IMovieObjectModel> Any(GetMovieObjects request) { return workflow.Search(request); }
        public List<IMovieObjectModel> Any(GetMovieObjectsAsListing request) { return workflow.Search(request, true); }
        public IMovieObjectModel Any(GetMovieObject request) { return workflow.Get(request.ID); }
        public IMovieObjectModel Any(GetMovieObjectByKey request) { return workflow.Get(request.CustomKey); }
        public IMovieObjectModel Any(CreateMovieObject request) { return workflow.Create(request); }
        public IMovieObjectModel Any(UpdateMovieObject request) { return workflow.Update(request); }
        public bool Any(DeactivateMovieObject request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateMovieObjectByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveMovieObject request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveMovieObjectByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
