// <auto-generated>
// <copyright file="Objects.IObjectVolumeServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ObjectVolume ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Objects
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class ObjectVolumeModelBase : NameableEntityModelBase, IObjectVolumeModel
    {
        // ObjectVolume Properties
        // <None>
        // Related Objects
        public int ObjectId { get; set; }
        public IObjectModel Object { get; set; }
        public int VolumeId { get; set; }
        public IVolumeModel Volume { get; set; }
        // Associated Objects
        // <None>
    }
    public class ObjectVolumeSearchModelBase : NameableEntitySearchModelBase, IObjectVolumeSearchModel
    {
        [ApiMember(Name = "ObjectId", IsRequired = false, Description = "Filter by the Related ObjectId")]
        public int? ObjectId { get; set; }

        [ApiMember(Name = "ObjectCustomKey", IsRequired = false, Description = "Filter by the Related Object CustomKey (Equals, Case-Insensitive)")]
        public string ObjectCustomKey { get; set; }

        [ApiMember(Name = "ObjectApiDetailUrl", IsRequired = false, Description = "Filter by the Related Object Api Detail Url (Contains, Case-Insensitive)")]
        public string ObjectApiDetailUrl { get; set; }

        [ApiMember(Name = "ObjectSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Object Site Detail Url (Contains, Case-Insensitive)")]
        public string ObjectSiteDetailUrl { get; set; }

        [ApiMember(Name = "ObjectName", IsRequired = false, Description = "Filter by the Related Object Name (Contains, Case-Insensitive)")]
        public string ObjectName { get; set; }

        [ApiMember(Name = "ObjectShortDescription", IsRequired = false, Description = "Filter by the Related Object Short Description (Contains, Case-Insensitive)")]
        public string ObjectShortDescription { get; set; }

        [ApiMember(Name = "ObjectDescription", IsRequired = false, Description = "Filter by the Related Object Description (Contains, Case-Insensitive)")]
        public string ObjectDescription { get; set; }

        [ApiMember(Name = "VolumeId", IsRequired = false, Description = "Filter by the Related VolumeId")]
        public int? VolumeId { get; set; }

        [ApiMember(Name = "VolumeCustomKey", IsRequired = false, Description = "Filter by the Related Volume CustomKey (Equals, Case-Insensitive)")]
        public string VolumeCustomKey { get; set; }

        [ApiMember(Name = "VolumeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Api Detail Url (Contains, Case-Insensitive)")]
        public string VolumeApiDetailUrl { get; set; }

        [ApiMember(Name = "VolumeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Volume Site Detail Url (Contains, Case-Insensitive)")]
        public string VolumeSiteDetailUrl { get; set; }

        [ApiMember(Name = "VolumeName", IsRequired = false, Description = "Filter by the Related Volume Name (Contains, Case-Insensitive)")]
        public string VolumeName { get; set; }

        [ApiMember(Name = "VolumeShortDescription", IsRequired = false, Description = "Filter by the Related Volume Short Description (Contains, Case-Insensitive)")]
        public string VolumeShortDescription { get; set; }

        [ApiMember(Name = "VolumeDescription", IsRequired = false, Description = "Filter by the Related Volume Description (Contains, Case-Insensitive)")]
        public string VolumeDescription { get; set; }

    }

    [Route("/ObjectVolumes/", "GET", Summary = "Gets All Active ObjectVolumes")]
    public class GetObjectVolumes : ObjectVolumeSearchModelBase, IReturn<List<IObjectVolumeModel>> { }

    [Route("/ObjectVolumes/Listing", "GET", Summary = "Gets All Active ObjectVolumes with the mininum header information")]
    public class GetObjectVolumesAsListing : ObjectVolumeSearchModelBase, IReturn<List<IObjectVolumeModel>> { }

    [Route("/ObjectVolumes/{ID}", "GET", Summary = "Gets ObjectVolume by Identifier")]
    public class GetObjectVolume : ImplementsID, IReturn<IObjectVolumeModel> { }

    [Route("/ObjectVolumes/{CustomKey}/ByKey", "GET", Summary = "Gets ObjectVolume by Key")]
    public class GetObjectVolumeByKey : ImplementsKey, IReturn<IObjectVolumeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/Create", "POST", Summary = "Creates an ObjectVolume with these contents")]
    public class CreateObjectVolume : ObjectVolumeModelBase, IReturn<IObjectVolumeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/Update", "POST", Summary = "Updates an ObjectVolume with new contents")]
    public class UpdateObjectVolume : ObjectVolumeModelBase, IReturn<IObjectVolumeModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/{ID}/Deactivate", "POST", Summary = "Deactivates an ObjectVolume by Identifier")]
    public class DeactivateObjectVolume : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an ObjectVolume by Key")]
    public class DeactivateObjectVolumeByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/{ID}/Remove", "POST", Summary = "Removes an ObjectVolume by Identifier")]
    public class RemoveObjectVolume : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/ObjectVolumes/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an ObjectVolume by Key")]
    public class RemoveObjectVolumeByKey : ImplementsKey, IReturn<bool> { }

    public interface IObjectVolumesServices
    {
        List<IObjectVolumeModel> Any(GetObjectVolumes request);
        List<IObjectVolumeModel> Any(GetObjectVolumesAsListing request);
        IObjectVolumeModel Any(GetObjectVolume request);
        IObjectVolumeModel Any(GetObjectVolumeByKey request);
        IObjectVolumeModel Any(CreateObjectVolume request);
        IObjectVolumeModel Any(UpdateObjectVolume request);
        bool Any(DeactivateObjectVolume request);
        bool Any(DeactivateObjectVolumeByKey request);
        bool Any(RemoveObjectVolume request);
        bool Any(RemoveObjectVolumeByKey request);
    }

    public class ObjectVolumesServices : Service, IObjectVolumesServices
    {
        private readonly IObjectVolumesBusinessWorkflow workflow;

        public ObjectVolumesServices(IObjectVolumesBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IObjectVolumeModel> Any(GetObjectVolumes request) { return workflow.Search(request); }
        public List<IObjectVolumeModel> Any(GetObjectVolumesAsListing request) { return workflow.Search(request, true); }
        public IObjectVolumeModel Any(GetObjectVolume request) { return workflow.Get(request.ID); }
        public IObjectVolumeModel Any(GetObjectVolumeByKey request) { return workflow.Get(request.CustomKey); }
        public IObjectVolumeModel Any(CreateObjectVolume request) { return workflow.Create(request); }
        public IObjectVolumeModel Any(UpdateObjectVolume request) { return workflow.Update(request); }
        public bool Any(DeactivateObjectVolume request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateObjectVolumeByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveObjectVolume request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveObjectVolumeByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
