// <auto-generated>
// <copyright file="StoryArcs.IStoryArcWriterModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the StoryArcWriter model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.StoryArcs
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class StoryArcWriterModelBase : NameableEntityModelBase, IStoryArcWriterModel
    {
        // StoryArcWriter Properties
        // <None>
        // Related Objects
        public int StoryArcId { get; set; }
        public IStoryArcModel StoryArc { get; set; }
        public int WriterId { get; set; }
        public IPersonModel Writer { get; set; }
        // Associated Objects
        // <None>
    }
    public class StoryArcWriterSearchModelBase : NameableEntitySearchModelBase, IStoryArcWriterSearchModel
    {
        [ApiMember(Name = "StoryArcId", IsRequired = false, Description = "Filter by the Related StoryArcId")]
        public int? StoryArcId { get; set; }

        [ApiMember(Name = "StoryArcCustomKey", IsRequired = false, Description = "Filter by the Related StoryArc CustomKey (Equals, Case-Insensitive)")]
        public string StoryArcCustomKey { get; set; }

        [ApiMember(Name = "StoryArcApiDetailUrl", IsRequired = false, Description = "Filter by the Related StoryArc Api Detail Url (Contains, Case-Insensitive)")]
        public string StoryArcApiDetailUrl { get; set; }

        [ApiMember(Name = "StoryArcSiteDetailUrl", IsRequired = false, Description = "Filter by the Related StoryArc Site Detail Url (Contains, Case-Insensitive)")]
        public string StoryArcSiteDetailUrl { get; set; }

        [ApiMember(Name = "StoryArcName", IsRequired = false, Description = "Filter by the Related StoryArc Name (Contains, Case-Insensitive)")]
        public string StoryArcName { get; set; }

        [ApiMember(Name = "StoryArcShortDescription", IsRequired = false, Description = "Filter by the Related StoryArc Short Description (Contains, Case-Insensitive)")]
        public string StoryArcShortDescription { get; set; }

        [ApiMember(Name = "StoryArcDescription", IsRequired = false, Description = "Filter by the Related StoryArc Description (Contains, Case-Insensitive)")]
        public string StoryArcDescription { get; set; }

        [ApiMember(Name = "WriterId", IsRequired = false, Description = "Filter by the Related WriterId")]
        public int? WriterId { get; set; }

        [ApiMember(Name = "WriterCustomKey", IsRequired = false, Description = "Filter by the Related Writer CustomKey (Equals, Case-Insensitive)")]
        public string WriterCustomKey { get; set; }

        [ApiMember(Name = "WriterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Writer Api Detail Url (Contains, Case-Insensitive)")]
        public string WriterApiDetailUrl { get; set; }

        [ApiMember(Name = "WriterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Writer Site Detail Url (Contains, Case-Insensitive)")]
        public string WriterSiteDetailUrl { get; set; }

        [ApiMember(Name = "WriterName", IsRequired = false, Description = "Filter by the Related Writer Name (Contains, Case-Insensitive)")]
        public string WriterName { get; set; }

        [ApiMember(Name = "WriterShortDescription", IsRequired = false, Description = "Filter by the Related Writer Short Description (Contains, Case-Insensitive)")]
        public string WriterShortDescription { get; set; }

        [ApiMember(Name = "WriterDescription", IsRequired = false, Description = "Filter by the Related Writer Description (Contains, Case-Insensitive)")]
        public string WriterDescription { get; set; }

    }

    [Route("/StoryArcWriters/", "GET", Summary = "Gets All Active StoryArcWriters")]
    public class GetStoryArcWriters : StoryArcWriterSearchModelBase, IReturn<List<IStoryArcWriterModel>> { }

    [Route("/StoryArcWriters/Listing", "GET", Summary = "Gets All Active StoryArcWriters with the mininum header information")]
    public class GetStoryArcWritersAsListing : StoryArcWriterSearchModelBase, IReturn<List<IStoryArcWriterModel>> { }

    [Route("/StoryArcWriters/{ID}", "GET", Summary = "Gets StoryArcWriter by Identifier")]
    public class GetStoryArcWriter : ImplementsID, IReturn<IStoryArcWriterModel> { }

    [Route("/StoryArcWriters/{CustomKey}/ByKey", "GET", Summary = "Gets StoryArcWriter by Key")]
    public class GetStoryArcWriterByKey : ImplementsKey, IReturn<IStoryArcWriterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/Create", "POST", Summary = "Creates an StoryArcWriter with these contents")]
    public class CreateStoryArcWriter : StoryArcWriterModelBase, IReturn<IStoryArcWriterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/Update", "POST", Summary = "Updates an StoryArcWriter with new contents")]
    public class UpdateStoryArcWriter : StoryArcWriterModelBase, IReturn<IStoryArcWriterModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/{ID}/Deactivate", "POST", Summary = "Deactivates an StoryArcWriter by Identifier")]
    public class DeactivateStoryArcWriter : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an StoryArcWriter by Key")]
    public class DeactivateStoryArcWriterByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/{ID}/Remove", "POST", Summary = "Removes an StoryArcWriter by Identifier")]
    public class RemoveStoryArcWriter : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/StoryArcWriters/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an StoryArcWriter by Key")]
    public class RemoveStoryArcWriterByKey : ImplementsKey, IReturn<bool> { }

    public interface IStoryArcWritersServices
    {
        List<IStoryArcWriterModel> Any(GetStoryArcWriters request);
        List<IStoryArcWriterModel> Any(GetStoryArcWritersAsListing request);
        IStoryArcWriterModel Any(GetStoryArcWriter request);
        IStoryArcWriterModel Any(GetStoryArcWriterByKey request);
        IStoryArcWriterModel Any(CreateStoryArcWriter request);
        IStoryArcWriterModel Any(UpdateStoryArcWriter request);
        bool Any(DeactivateStoryArcWriter request);
        bool Any(DeactivateStoryArcWriterByKey request);
        bool Any(RemoveStoryArcWriter request);
        bool Any(RemoveStoryArcWriterByKey request);
    }

    public class StoryArcWritersServices : Service, IStoryArcWritersServices
    {
        private readonly IStoryArcWritersBusinessWorkflow workflow;

        public StoryArcWritersServices(IStoryArcWritersBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IStoryArcWriterModel> Any(GetStoryArcWriters request) { return workflow.Search(request); }
        public List<IStoryArcWriterModel> Any(GetStoryArcWritersAsListing request) { return workflow.Search(request, true); }
        public IStoryArcWriterModel Any(GetStoryArcWriter request) { return workflow.Get(request.ID); }
        public IStoryArcWriterModel Any(GetStoryArcWriterByKey request) { return workflow.Get(request.CustomKey); }
        public IStoryArcWriterModel Any(CreateStoryArcWriter request) { return workflow.Create(request); }
        public IStoryArcWriterModel Any(UpdateStoryArcWriter request) { return workflow.Update(request); }
        public bool Any(DeactivateStoryArcWriter request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateStoryArcWriterByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveStoryArcWriter request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveStoryArcWriterByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
