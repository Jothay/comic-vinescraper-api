// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterDiedServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the EpisodeCharacterDied ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Episodes
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class EpisodeCharacterDiedModelBase : NameableEntityModelBase, IEpisodeCharacterDiedModel
    {
        // EpisodeCharacterDied Properties
        // <None>
        // Related Objects
        public int EpisodeId { get; set; }
        public IEpisodeModel Episode { get; set; }
        public int CharacterId { get; set; }
        public ICharacterModel Character { get; set; }
        // Associated Objects
        // <None>
    }
    public class EpisodeCharacterDiedSearchModelBase : NameableEntitySearchModelBase, IEpisodeCharacterDiedSearchModel
    {
        [ApiMember(Name = "EpisodeId", IsRequired = false, Description = "Filter by the Related EpisodeId")]
        public int? EpisodeId { get; set; }

        [ApiMember(Name = "EpisodeCustomKey", IsRequired = false, Description = "Filter by the Related Episode CustomKey (Equals, Case-Insensitive)")]
        public string EpisodeCustomKey { get; set; }

        [ApiMember(Name = "EpisodeApiDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Api Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeApiDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Episode Site Detail Url (Contains, Case-Insensitive)")]
        public string EpisodeSiteDetailUrl { get; set; }

        [ApiMember(Name = "EpisodeName", IsRequired = false, Description = "Filter by the Related Episode Name (Contains, Case-Insensitive)")]
        public string EpisodeName { get; set; }

        [ApiMember(Name = "EpisodeShortDescription", IsRequired = false, Description = "Filter by the Related Episode Short Description (Contains, Case-Insensitive)")]
        public string EpisodeShortDescription { get; set; }

        [ApiMember(Name = "EpisodeDescription", IsRequired = false, Description = "Filter by the Related Episode Description (Contains, Case-Insensitive)")]
        public string EpisodeDescription { get; set; }

        [ApiMember(Name = "CharacterId", IsRequired = false, Description = "Filter by the Related CharacterId")]
        public int? CharacterId { get; set; }

        [ApiMember(Name = "CharacterCustomKey", IsRequired = false, Description = "Filter by the Related Character CustomKey (Equals, Case-Insensitive)")]
        public string CharacterCustomKey { get; set; }

        [ApiMember(Name = "CharacterApiDetailUrl", IsRequired = false, Description = "Filter by the Related Character Api Detail Url (Contains, Case-Insensitive)")]
        public string CharacterApiDetailUrl { get; set; }

        [ApiMember(Name = "CharacterSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Character Site Detail Url (Contains, Case-Insensitive)")]
        public string CharacterSiteDetailUrl { get; set; }

        [ApiMember(Name = "CharacterName", IsRequired = false, Description = "Filter by the Related Character Name (Contains, Case-Insensitive)")]
        public string CharacterName { get; set; }

        [ApiMember(Name = "CharacterShortDescription", IsRequired = false, Description = "Filter by the Related Character Short Description (Contains, Case-Insensitive)")]
        public string CharacterShortDescription { get; set; }

        [ApiMember(Name = "CharacterDescription", IsRequired = false, Description = "Filter by the Related Character Description (Contains, Case-Insensitive)")]
        public string CharacterDescription { get; set; }

    }

    [Route("/EpisodeCharactersDied/", "GET", Summary = "Gets All Active EpisodeCharactersDied")]
    public class GetEpisodeCharactersDied : EpisodeCharacterDiedSearchModelBase, IReturn<List<IEpisodeCharacterDiedModel>> { }

    [Route("/EpisodeCharactersDied/Listing", "GET", Summary = "Gets All Active EpisodeCharactersDied with the mininum header information")]
    public class GetEpisodeCharactersDiedAsListing : EpisodeCharacterDiedSearchModelBase, IReturn<List<IEpisodeCharacterDiedModel>> { }

    [Route("/EpisodeCharactersDied/{ID}", "GET", Summary = "Gets EpisodeCharacterDied by Identifier")]
    public class GetEpisodeCharacterDied : ImplementsID, IReturn<IEpisodeCharacterDiedModel> { }

    [Route("/EpisodeCharactersDied/{CustomKey}/ByKey", "GET", Summary = "Gets EpisodeCharacterDied by Key")]
    public class GetEpisodeCharacterDiedByKey : ImplementsKey, IReturn<IEpisodeCharacterDiedModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/Create", "POST", Summary = "Creates an EpisodeCharacterDied with these contents")]
    public class CreateEpisodeCharacterDied : EpisodeCharacterDiedModelBase, IReturn<IEpisodeCharacterDiedModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/Update", "POST", Summary = "Updates an EpisodeCharacterDied with new contents")]
    public class UpdateEpisodeCharacterDied : EpisodeCharacterDiedModelBase, IReturn<IEpisodeCharacterDiedModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/{ID}/Deactivate", "POST", Summary = "Deactivates an EpisodeCharacterDied by Identifier")]
    public class DeactivateEpisodeCharacterDied : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an EpisodeCharacterDied by Key")]
    public class DeactivateEpisodeCharacterDiedByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/{ID}/Remove", "POST", Summary = "Removes an EpisodeCharacterDied by Identifier")]
    public class RemoveEpisodeCharacterDied : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/EpisodeCharactersDied/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an EpisodeCharacterDied by Key")]
    public class RemoveEpisodeCharacterDiedByKey : ImplementsKey, IReturn<bool> { }

    public interface IEpisodeCharactersDiedServices
    {
        List<IEpisodeCharacterDiedModel> Any(GetEpisodeCharactersDied request);
        List<IEpisodeCharacterDiedModel> Any(GetEpisodeCharactersDiedAsListing request);
        IEpisodeCharacterDiedModel Any(GetEpisodeCharacterDied request);
        IEpisodeCharacterDiedModel Any(GetEpisodeCharacterDiedByKey request);
        IEpisodeCharacterDiedModel Any(CreateEpisodeCharacterDied request);
        IEpisodeCharacterDiedModel Any(UpdateEpisodeCharacterDied request);
        bool Any(DeactivateEpisodeCharacterDied request);
        bool Any(DeactivateEpisodeCharacterDiedByKey request);
        bool Any(RemoveEpisodeCharacterDied request);
        bool Any(RemoveEpisodeCharacterDiedByKey request);
    }

    public class EpisodeCharactersDiedServices : Service, IEpisodeCharactersDiedServices
    {
        private readonly IEpisodeCharactersDiedBusinessWorkflow workflow;

        public EpisodeCharactersDiedServices(IEpisodeCharactersDiedBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IEpisodeCharacterDiedModel> Any(GetEpisodeCharactersDied request) { return workflow.Search(request); }
        public List<IEpisodeCharacterDiedModel> Any(GetEpisodeCharactersDiedAsListing request) { return workflow.Search(request, true); }
        public IEpisodeCharacterDiedModel Any(GetEpisodeCharacterDied request) { return workflow.Get(request.ID); }
        public IEpisodeCharacterDiedModel Any(GetEpisodeCharacterDiedByKey request) { return workflow.Get(request.CustomKey); }
        public IEpisodeCharacterDiedModel Any(CreateEpisodeCharacterDied request) { return workflow.Create(request); }
        public IEpisodeCharacterDiedModel Any(UpdateEpisodeCharacterDied request) { return workflow.Update(request); }
        public bool Any(DeactivateEpisodeCharacterDied request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateEpisodeCharacterDiedByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveEpisodeCharacterDied request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveEpisodeCharacterDiedByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
