// <auto-generated>
// <copyright file="Concepts.IConceptModel.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the Concept model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.Services//.Concepts
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class ConceptModelBase : NameableEntityModelBase, IConceptModel
    {
        // Concept Properties
        public int StartYear { get; set; }
        // Related Objects
        public int? PrimaryImageFileId { get; set; }
        public IImageFileModel PrimaryImageFile { get; set; }
        public int FirstIssueAppearanceId { get; set; }
        public IIssueModel FirstIssueAppearance { get; set; }
        // Associated Objects
        public List<IConceptAliasModel> ConceptAliases { get; set; }
        public List<IConceptAppearedInIssueModel> ConceptIssuesAppearedIn { get; set; }
        public List<IConceptIssueModel> ConceptIssues { get; set; }
        public List<IConceptMovieModel> ConceptMovies { get; set; }
        public List<IConceptVolumeModel> ConceptVolumes { get; set; }
    }
    public class ConceptSearchModelBase : NameableEntitySearchModelBase, IConceptSearchModel
    {
        [ApiMember(Name = "PrimaryImageFileId", IsRequired = false, Description = "Filter by the Related PrimaryImageFileId")]
        public int? PrimaryImageFileId { get; set; }

        [ApiMember(Name = "PrimaryImageFileCustomKey", IsRequired = false, Description = "Filter by the Related PrimaryImageFile CustomKey (Equals, Case-Insensitive)")]
        public string PrimaryImageFileCustomKey { get; set; }

        [ApiMember(Name = "PrimaryImageFileApiDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Api Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileApiDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileSiteDetailUrl", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Site Detail Url (Contains, Case-Insensitive)")]
        public string PrimaryImageFileSiteDetailUrl { get; set; }

        [ApiMember(Name = "PrimaryImageFileName", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Name (Contains, Case-Insensitive)")]
        public string PrimaryImageFileName { get; set; }

        [ApiMember(Name = "PrimaryImageFileShortDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Short Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileShortDescription { get; set; }

        [ApiMember(Name = "PrimaryImageFileDescription", IsRequired = false, Description = "Filter by the Related PrimaryImageFile Description (Contains, Case-Insensitive)")]
        public string PrimaryImageFileDescription { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceId", IsRequired = false, Description = "Filter by the Related FirstIssueAppearanceId")]
        public int? FirstIssueAppearanceId { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceCustomKey", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance CustomKey (Equals, Case-Insensitive)")]
        public string FirstIssueAppearanceCustomKey { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceApiDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Api Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceApiDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceSiteDetailUrl", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Site Detail Url (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceSiteDetailUrl { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceName", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Name (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceName { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceShortDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Short Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceShortDescription { get; set; }

        [ApiMember(Name = "FirstIssueAppearanceDescription", IsRequired = false, Description = "Filter by the Related FirstIssueAppearance Description (Contains, Case-Insensitive)")]
        public string FirstIssueAppearanceDescription { get; set; }

    }

    [Route("/Concepts/", "GET", Summary = "Gets All Active Concepts")]
    public class GetConcepts : ConceptSearchModelBase, IReturn<List<IConceptModel>> { }

    [Route("/Concepts/Listing", "GET", Summary = "Gets All Active Concepts with the mininum header information")]
    public class GetConceptsAsListing : ConceptSearchModelBase, IReturn<List<IConceptModel>> { }

    [Route("/Concepts/{ID}", "GET", Summary = "Gets Concept by Identifier")]
    public class GetConcept : ImplementsID, IReturn<IConceptModel> { }

    [Route("/Concepts/{CustomKey}/ByKey", "GET", Summary = "Gets Concept by Key")]
    public class GetConceptByKey : ImplementsKey, IReturn<IConceptModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/Create", "POST", Summary = "Creates an Concept with these contents")]
    public class CreateConcept : ConceptModelBase, IReturn<IConceptModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/Update", "POST", Summary = "Updates an Concept with new contents")]
    public class UpdateConcept : ConceptModelBase, IReturn<IConceptModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/{ID}/Deactivate", "POST", Summary = "Deactivates an Concept by Identifier")]
    public class DeactivateConcept : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an Concept by Key")]
    public class DeactivateConceptByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/{ID}/Remove", "POST", Summary = "Removes an Concept by Identifier")]
    public class RemoveConcept : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/Concepts/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an Concept by Key")]
    public class RemoveConceptByKey : ImplementsKey, IReturn<bool> { }

    public interface IConceptsServices
    {
        List<IConceptModel> Any(GetConcepts request);
        List<IConceptModel> Any(GetConceptsAsListing request);
        IConceptModel Any(GetConcept request);
        IConceptModel Any(GetConceptByKey request);
        IConceptModel Any(CreateConcept request);
        IConceptModel Any(UpdateConcept request);
        bool Any(DeactivateConcept request);
        bool Any(DeactivateConceptByKey request);
        bool Any(RemoveConcept request);
        bool Any(RemoveConceptByKey request);
    }

    public class ConceptsServices : Service, IConceptsServices
    {
        private readonly IConceptsBusinessWorkflow workflow;

        public ConceptsServices(IConceptsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<IConceptModel> Any(GetConcepts request) { return workflow.Search(request); }
        public List<IConceptModel> Any(GetConceptsAsListing request) { return workflow.Search(request, true); }
        public IConceptModel Any(GetConcept request) { return workflow.Get(request.ID); }
        public IConceptModel Any(GetConceptByKey request) { return workflow.Get(request.CustomKey); }
        public IConceptModel Any(CreateConcept request) { return workflow.Create(request); }
        public IConceptModel Any(UpdateConcept request) { return workflow.Update(request); }
        public bool Any(DeactivateConcept request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateConceptByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveConcept request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveConceptByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
