// <auto-generated>
// <copyright file="Locations.ILocationStoryArcServices.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the LocationStoryArc ServiceStack DTOs and Handlers.</summary>
// <remarks>This file was auto-generated using ServiceFileMaster.tt in
// ComicVineScraper.API.Services\Framework\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Services//.Locations
{
    using System;
    using System.Collections.Generic;
    using Interfaces.BusinessWorkflows;
    using Interfaces.Models;
    using Interfaces.SearchModels;
    using ServiceStack;
    using ServiceStack.DataAnnotations;

    public class LocationStoryArcModelBase : NameableEntityModelBase, ILocationStoryArcModel
    {
        // LocationStoryArc Properties
        // <None>
        // Related Objects
        public int LocationId { get; set; }
        public ILocationModel Location { get; set; }
        public int StoryArcId { get; set; }
        public IStoryArcModel StoryArc { get; set; }
        // Associated Objects
        // <None>
    }
    public class LocationStoryArcSearchModelBase : NameableEntitySearchModelBase, ILocationStoryArcSearchModel
    {
        [ApiMember(Name = "LocationId", IsRequired = false, Description = "Filter by the Related LocationId")]
        public int? LocationId { get; set; }

        [ApiMember(Name = "LocationCustomKey", IsRequired = false, Description = "Filter by the Related Location CustomKey (Equals, Case-Insensitive)")]
        public string LocationCustomKey { get; set; }

        [ApiMember(Name = "LocationApiDetailUrl", IsRequired = false, Description = "Filter by the Related Location Api Detail Url (Contains, Case-Insensitive)")]
        public string LocationApiDetailUrl { get; set; }

        [ApiMember(Name = "LocationSiteDetailUrl", IsRequired = false, Description = "Filter by the Related Location Site Detail Url (Contains, Case-Insensitive)")]
        public string LocationSiteDetailUrl { get; set; }

        [ApiMember(Name = "LocationName", IsRequired = false, Description = "Filter by the Related Location Name (Contains, Case-Insensitive)")]
        public string LocationName { get; set; }

        [ApiMember(Name = "LocationShortDescription", IsRequired = false, Description = "Filter by the Related Location Short Description (Contains, Case-Insensitive)")]
        public string LocationShortDescription { get; set; }

        [ApiMember(Name = "LocationDescription", IsRequired = false, Description = "Filter by the Related Location Description (Contains, Case-Insensitive)")]
        public string LocationDescription { get; set; }

        [ApiMember(Name = "StoryArcId", IsRequired = false, Description = "Filter by the Related StoryArcId")]
        public int? StoryArcId { get; set; }

        [ApiMember(Name = "StoryArcCustomKey", IsRequired = false, Description = "Filter by the Related StoryArc CustomKey (Equals, Case-Insensitive)")]
        public string StoryArcCustomKey { get; set; }

        [ApiMember(Name = "StoryArcApiDetailUrl", IsRequired = false, Description = "Filter by the Related StoryArc Api Detail Url (Contains, Case-Insensitive)")]
        public string StoryArcApiDetailUrl { get; set; }

        [ApiMember(Name = "StoryArcSiteDetailUrl", IsRequired = false, Description = "Filter by the Related StoryArc Site Detail Url (Contains, Case-Insensitive)")]
        public string StoryArcSiteDetailUrl { get; set; }

        [ApiMember(Name = "StoryArcName", IsRequired = false, Description = "Filter by the Related StoryArc Name (Contains, Case-Insensitive)")]
        public string StoryArcName { get; set; }

        [ApiMember(Name = "StoryArcShortDescription", IsRequired = false, Description = "Filter by the Related StoryArc Short Description (Contains, Case-Insensitive)")]
        public string StoryArcShortDescription { get; set; }

        [ApiMember(Name = "StoryArcDescription", IsRequired = false, Description = "Filter by the Related StoryArc Description (Contains, Case-Insensitive)")]
        public string StoryArcDescription { get; set; }

    }

    [Route("/LocationStoryArcs/", "GET", Summary = "Gets All Active LocationStoryArcs")]
    public class GetLocationStoryArcs : LocationStoryArcSearchModelBase, IReturn<List<ILocationStoryArcModel>> { }

    [Route("/LocationStoryArcs/Listing", "GET", Summary = "Gets All Active LocationStoryArcs with the mininum header information")]
    public class GetLocationStoryArcsAsListing : LocationStoryArcSearchModelBase, IReturn<List<ILocationStoryArcModel>> { }

    [Route("/LocationStoryArcs/{ID}", "GET", Summary = "Gets LocationStoryArc by Identifier")]
    public class GetLocationStoryArc : ImplementsID, IReturn<ILocationStoryArcModel> { }

    [Route("/LocationStoryArcs/{CustomKey}/ByKey", "GET", Summary = "Gets LocationStoryArc by Key")]
    public class GetLocationStoryArcByKey : ImplementsKey, IReturn<ILocationStoryArcModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/Create", "POST", Summary = "Creates an LocationStoryArc with these contents")]
    public class CreateLocationStoryArc : LocationStoryArcModelBase, IReturn<ILocationStoryArcModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/Update", "POST", Summary = "Updates an LocationStoryArc with new contents")]
    public class UpdateLocationStoryArc : LocationStoryArcModelBase, IReturn<ILocationStoryArcModel> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/{ID}/Deactivate", "POST", Summary = "Deactivates an LocationStoryArc by Identifier")]
    public class DeactivateLocationStoryArc : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/{CustomKey}/DeactivateByKey", "POST", Summary = "Deactivates an LocationStoryArc by Key")]
    public class DeactivateLocationStoryArcByKey : ImplementsKey, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/{ID}/Remove", "POST", Summary = "Removes an LocationStoryArc by Identifier")]
    public class RemoveLocationStoryArc : ImplementsID, IReturn<bool> { }

    [Authenticate][Exclude(Feature.Metadata)][Restrict(VisibilityTo = RequestAttributes.None)]
    [Route("/LocationStoryArcs/{CustomKey}/RemoveByKey", "POST", Summary = "Removes an LocationStoryArc by Key")]
    public class RemoveLocationStoryArcByKey : ImplementsKey, IReturn<bool> { }

    public interface ILocationStoryArcsServices
    {
        List<ILocationStoryArcModel> Any(GetLocationStoryArcs request);
        List<ILocationStoryArcModel> Any(GetLocationStoryArcsAsListing request);
        ILocationStoryArcModel Any(GetLocationStoryArc request);
        ILocationStoryArcModel Any(GetLocationStoryArcByKey request);
        ILocationStoryArcModel Any(CreateLocationStoryArc request);
        ILocationStoryArcModel Any(UpdateLocationStoryArc request);
        bool Any(DeactivateLocationStoryArc request);
        bool Any(DeactivateLocationStoryArcByKey request);
        bool Any(RemoveLocationStoryArc request);
        bool Any(RemoveLocationStoryArcByKey request);
    }

    public class LocationStoryArcsServices : Service, ILocationStoryArcsServices
    {
        private readonly ILocationStoryArcsBusinessWorkflow workflow;

        public LocationStoryArcsServices(ILocationStoryArcsBusinessWorkflow workflow)
        {
            this.workflow = workflow;
        }

        public List<ILocationStoryArcModel> Any(GetLocationStoryArcs request) { return workflow.Search(request); }
        public List<ILocationStoryArcModel> Any(GetLocationStoryArcsAsListing request) { return workflow.Search(request, true); }
        public ILocationStoryArcModel Any(GetLocationStoryArc request) { return workflow.Get(request.ID); }
        public ILocationStoryArcModel Any(GetLocationStoryArcByKey request) { return workflow.Get(request.CustomKey); }
        public ILocationStoryArcModel Any(CreateLocationStoryArc request) { return workflow.Create(request); }
        public ILocationStoryArcModel Any(UpdateLocationStoryArc request) { return workflow.Update(request); }
        public bool Any(DeactivateLocationStoryArc request) { return workflow.Deactivate(request.ID); }
        public bool Any(DeactivateLocationStoryArcByKey request) { return workflow.Deactivate(request.CustomKey); }
        public bool Any(RemoveLocationStoryArc request) { return workflow.Remove(request.ID); }
        public bool Any(RemoveLocationStoryArcByKey request) { return workflow.Remove(request.CustomKey); }
    }
}
