// <auto-generated>
// <copyright file="Episodes.IEpisodeTeamFirstAppearanceRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeTeamFirstAppearancesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Episodes
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class EpisodeTeamFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeTeamFirstAppearanceModel> DoMockingSetupForEpisodeTeamFirstAppearanceModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeTeamFirstAppearanceModel = new Mock<IEpisodeTeamFirstAppearanceModel>();
            // Mock Functions
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Active).Returns(() => true);
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeTeamFirstAppearanceModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Episode).Returns(() => new EpisodeModel());
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.TeamId).Returns(() => 1);
            mockEpisodeTeamFirstAppearanceModel.Setup(m => m.Team).Returns(() => new TeamModel());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeTeamFirstAppearanceModel;
        }

        public static Mock<IEpisodeTeamFirstAppearance> DoMockingSetupForEpisodeTeamFirstAppearance(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeTeamFirstAppearance = new Mock<IEpisodeTeamFirstAppearance>();
            // Mock Functions
            mockEpisodeTeamFirstAppearance.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Active).Returns(() => true);
            mockEpisodeTeamFirstAppearance.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeTeamFirstAppearance.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeTeamFirstAppearance.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeTeamFirstAppearance.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeTeamFirstAppearance.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeTeamFirstAppearance.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Episode).Returns(() => new Episode());
            mockEpisodeTeamFirstAppearance.Setup(m => m.TeamId).Returns(() => 1);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Team).Returns(() => new Team());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeTeamFirstAppearance;
        }
    }

    public class EpisodeTeamFirstAppearanceMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeTeamFirstAppearanceModel>()));
            var mockModel = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel(1);
            EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeTeamFirstAppearanceModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeTeamFirstAppearanceModel>(), ref It.IsAny<IEpisodeTeamFirstAppearance>()));
        //    var mockModel = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel(1);
        //    var mockEntity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(1);
        //    EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeTeamFirstAppearanceModel>(), ref It.IsAny<IEpisodeTeamFirstAppearance>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IEpisodeTeamFirstAppearance>()));
            var mockEntity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(1);
            EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IEpisodeTeamFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IEpisodeTeamFirstAppearance>()));
            var mockEntity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(1);
            EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IEpisodeTeamFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IEpisodeTeamFirstAppearance>()));
            var mockEntity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(1);
            EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IEpisodeTeamFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeTeamFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IEpisodeTeamFirstAppearanceModel>()));
            var mockModel = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel(1);
            EpisodeTeamFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IEpisodeTeamFirstAppearanceModel>()), Times.Once);
        }

        public static Mock<IEpisodeTeamFirstAppearance> DoMockingSetupForEpisodeTeamFirstAppearance(int idReturnValue = 0)
        {
            var mockEpisodeTeamFirstAppearance = new Mock<IEpisodeTeamFirstAppearance>();
            // Mock Functions
            mockEpisodeTeamFirstAppearance.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Active).Returns(() => true);
            mockEpisodeTeamFirstAppearance.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeTeamFirstAppearance.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeTeamFirstAppearance.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockEpisodeTeamFirstAppearance.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Episode).Returns(() => new Episode());
            mockEpisodeTeamFirstAppearance.Setup(m => m.TeamId).Returns(() => 1);
            mockEpisodeTeamFirstAppearance.Setup(m => m.Team).Returns(() => new Team());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeTeamFirstAppearance;
        }
    }

    public class EpisodeTeamFirstAppearancesMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsEpisodeTeamFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var model = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, entity.EpisodeId);
            Assert.Equal(model.Object.TeamId, entity.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsEpisodeTeamFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var model = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel();
            // Act
            IEpisodeTeamFirstAppearance existingEntity = new EpisodeTeamFirstAppearance { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, existingEntity.EpisodeId);
            Assert.Equal(model.Object.TeamId, existingEntity.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsEpisodeTeamFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var entity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyEpisodeTeamFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var entity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyEpisodeTeamFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var entity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsEpisodeTeamFirstAppearanceSearchProperties()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var model = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.EpisodeId, searchModel.EpisodeId);
            Assert.Equal(model.Object.Episode?.CustomKey, searchModel.EpisodeCustomKey);
            Assert.Equal(model.Object.Episode?.ApiDetailUrl, searchModel.EpisodeApiDetailUrl);
            Assert.Equal(model.Object.Episode?.SiteDetailUrl, searchModel.EpisodeSiteDetailUrl);
            Assert.Equal(model.Object.Episode?.Name, searchModel.EpisodeName);
            Assert.Equal(model.Object.Episode?.ShortDescription, searchModel.EpisodeShortDescription);
            Assert.Equal(model.Object.Episode?.Description, searchModel.EpisodeDescription);
            Assert.Equal(model.Object.TeamId, searchModel.TeamId);
            Assert.Equal(model.Object.Team?.CustomKey, searchModel.TeamCustomKey);
            Assert.Equal(model.Object.Team?.ApiDetailUrl, searchModel.TeamApiDetailUrl);
            Assert.Equal(model.Object.Team?.SiteDetailUrl, searchModel.TeamSiteDetailUrl);
            Assert.Equal(model.Object.Team?.Name, searchModel.TeamName);
            Assert.Equal(model.Object.Team?.ShortDescription, searchModel.TeamShortDescription);
            Assert.Equal(model.Object.Team?.Description, searchModel.TeamDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var model = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel(1);
            var entity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new EpisodeTeamFirstAppearanceMapper();
            var model = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearanceModel(1);
            var entity = EpisodeTeamFirstAppearancesMockingSetup.DoMockingSetupForEpisodeTeamFirstAppearance(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
