// <auto-generated>
// <copyright file="Characters.ICharacterAppearedInIssueRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterAppearedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Characters
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class CharacterAppearedInIssuesMockingSetup
    {
        public static Mock<ICharacterAppearedInIssueModel> DoMockingSetupForCharacterAppearedInIssueModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterAppearedInIssueModel = new Mock<ICharacterAppearedInIssueModel>();
            // Mock Functions
            mockCharacterAppearedInIssueModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterAppearedInIssueModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterAppearedInIssueModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterAppearedInIssueModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssueModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssueModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterAppearedInIssueModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterAppearedInIssueModel.Setup(m => m.Name).Returns(() => name);
            //mockCharacterAppearedInIssueModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterAppearedInIssueModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterAppearedInIssueModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterAppearedInIssueModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            mockCharacterAppearedInIssueModel.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockCharacterAppearedInIssueModel.Setup(m => m.AppearedInIssue).Returns(() => new IssueModel());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterAppearedInIssueModel;
        }

        public static Mock<ICharacterAppearedInIssue> DoMockingSetupForCharacterAppearedInIssue(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterAppearedInIssue = new Mock<ICharacterAppearedInIssue>();
            // Mock Functions
            mockCharacterAppearedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterAppearedInIssue.Setup(m => m.Active).Returns(() => true);
            mockCharacterAppearedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterAppearedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterAppearedInIssue.Setup(m => m.Name).Returns(() => name);
            //mockCharacterAppearedInIssue.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterAppearedInIssue.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterAppearedInIssue.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterAppearedInIssue.Setup(m => m.Character).Returns(() => new Character());
            mockCharacterAppearedInIssue.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockCharacterAppearedInIssue.Setup(m => m.AppearedInIssue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterAppearedInIssue;
        }
    }

    public class CharacterAppearedInIssueMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterAppearedInIssueModel>()));
            var mockModel = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel(1);
            CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterAppearedInIssueModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterAppearedInIssueModel>(), ref It.IsAny<ICharacterAppearedInIssue>()));
        //    var mockModel = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel(1);
        //    var mockEntity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(1);
        //    CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterAppearedInIssueModel>(), ref It.IsAny<ICharacterAppearedInIssue>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ICharacterAppearedInIssue>()));
            var mockEntity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(1);
            CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ICharacterAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ICharacterAppearedInIssue>()));
            var mockEntity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(1);
            CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ICharacterAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ICharacterAppearedInIssue>()));
            var mockEntity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(1);
            CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ICharacterAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ICharacterAppearedInIssueModel>()));
            var mockModel = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel(1);
            CharacterAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ICharacterAppearedInIssueModel>()), Times.Once);
        }

        public static Mock<ICharacterAppearedInIssue> DoMockingSetupForCharacterAppearedInIssue(int idReturnValue = 0)
        {
            var mockCharacterAppearedInIssue = new Mock<ICharacterAppearedInIssue>();
            // Mock Functions
            mockCharacterAppearedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterAppearedInIssue.Setup(m => m.Active).Returns(() => true);
            mockCharacterAppearedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterAppearedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterAppearedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockCharacterAppearedInIssue.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterAppearedInIssue.Setup(m => m.Character).Returns(() => new Character());
            mockCharacterAppearedInIssue.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockCharacterAppearedInIssue.Setup(m => m.AppearedInIssue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterAppearedInIssue;
        }
    }

    public class CharacterAppearedInIssuesMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsCharacterAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var model = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            Assert.Equal(model.Object.AppearedInIssueId, entity.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsCharacterAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var model = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel();
            // Act
            ICharacterAppearedInIssue existingEntity = new CharacterAppearedInIssue { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            Assert.Equal(model.Object.AppearedInIssueId, existingEntity.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsCharacterAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var entity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyCharacterAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var entity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyCharacterAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var entity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsCharacterAppearedInIssueSearchProperties()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var model = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
            Assert.Equal(model.Object.AppearedInIssueId, searchModel.AppearedInIssueId);
            Assert.Equal(model.Object.AppearedInIssue?.CustomKey, searchModel.AppearedInIssueCustomKey);
            Assert.Equal(model.Object.AppearedInIssue?.ApiDetailUrl, searchModel.AppearedInIssueApiDetailUrl);
            Assert.Equal(model.Object.AppearedInIssue?.SiteDetailUrl, searchModel.AppearedInIssueSiteDetailUrl);
            Assert.Equal(model.Object.AppearedInIssue?.Name, searchModel.AppearedInIssueName);
            Assert.Equal(model.Object.AppearedInIssue?.ShortDescription, searchModel.AppearedInIssueShortDescription);
            Assert.Equal(model.Object.AppearedInIssue?.Description, searchModel.AppearedInIssueDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var model = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel(1);
            var entity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new CharacterAppearedInIssueMapper();
            var model = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssueModel(1);
            var entity = CharacterAppearedInIssuesMockingSetup.DoMockingSetupForCharacterAppearedInIssue(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
