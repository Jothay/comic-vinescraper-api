// <auto-generated>
// <copyright file="Videos.IVideoRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VideosRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Videos
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class VideosMockingSetup
    {
        public static Mock<IVideoModel> DoMockingSetupForVideoModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockVideoModel = new Mock<IVideoModel>();
            // Mock Functions
            mockVideoModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockVideoModel.Setup(m => m.Active).Returns(() => true);
            mockVideoModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockVideoModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideoModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideoModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockVideoModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockVideoModel.Setup(m => m.Name).Returns(() => name);
            //mockVideoModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockVideoModel.Setup(m => m.Description).Returns(() => "long");
            mockVideoModel.Setup(m => m.LowUrl).Returns(() => "LowUrl");
            mockVideoModel.Setup(m => m.HighUrl).Returns(() => "HighUrl");
            mockVideoModel.Setup(m => m.HdUrl).Returns(() => "HdUrl");
            mockVideoModel.Setup(m => m.Url).Returns(() => "Url");
            mockVideoModel.Setup(m => m.LengthSeconds).Returns(() => 2000);
            mockVideoModel.Setup(m => m.PublishDate).Returns(() => new System.DateTime());
            // Related Objects
            mockVideoModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockVideoModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockVideoModel.Setup(m => m.AuthorId).Returns(() => 1);
            mockVideoModel.Setup(m => m.Author).Returns(() => new PersonModel());
            mockVideoModel.Setup(m => m.VideoTypeId).Returns(() => 1);
            mockVideoModel.Setup(m => m.VideoType).Returns(() => new VideoTypeModel());
            // Associated Objects
            // <None>
            // Return
            return mockVideoModel;
        }

        public static Mock<IVideo> DoMockingSetupForVideo(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockVideo = new Mock<IVideo>();
            // Mock Functions
            mockVideo.Setup(m => m.Id).Returns(() => idReturnValue);
            mockVideo.Setup(m => m.Active).Returns(() => true);
            mockVideo.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockVideo.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideo.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideo.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockVideo.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockVideo.Setup(m => m.Name).Returns(() => name);
            //mockVideo.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockVideo.Setup(m => m.Description).Returns(() => "long");
            mockVideo.Setup(m => m.LowUrl).Returns(() => "LowUrl");
            mockVideo.Setup(m => m.HighUrl).Returns(() => "HighUrl");
            mockVideo.Setup(m => m.HdUrl).Returns(() => "HdUrl");
            mockVideo.Setup(m => m.Url).Returns(() => "Url");
            mockVideo.Setup(m => m.LengthSeconds).Returns(() => 2000);
            mockVideo.Setup(m => m.PublishDate).Returns(() => new System.DateTime());
            // Related Objects
            mockVideo.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockVideo.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockVideo.Setup(m => m.AuthorId).Returns(() => 1);
            mockVideo.Setup(m => m.Author).Returns(() => new Person());
            mockVideo.Setup(m => m.VideoTypeId).Returns(() => 1);
            mockVideo.Setup(m => m.VideoType).Returns(() => new VideoType());
            // Associated Objects
            // <None>
            // Return
            return mockVideo;
        }
    }

    public class VideoMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<VideoMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IVideoModel>()));
            var mockModel = VideosMockingSetup.DoMockingSetupForVideoModel(1);
            VideoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IVideoModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<VideoMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IVideoModel>(), ref It.IsAny<IVideo>()));
        //    var mockModel = VideosMockingSetup.DoMockingSetupForVideoModel(1);
        //    var mockEntity = VideosMockingSetup.DoMockingSetupForVideo(1);
        //    VideoMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IVideoModel>(), ref It.IsAny<IVideo>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VideoMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IVideo>()));
            var mockEntity = VideosMockingSetup.DoMockingSetupForVideo(1);
            VideoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IVideo>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VideoMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IVideo>()));
            var mockEntity = VideosMockingSetup.DoMockingSetupForVideo(1);
            VideoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IVideo>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VideoMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IVideo>()));
            var mockEntity = VideosMockingSetup.DoMockingSetupForVideo(1);
            VideoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IVideo>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VideoMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IVideoModel>()));
            var mockModel = VideosMockingSetup.DoMockingSetupForVideoModel(1);
            VideoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IVideoModel>()), Times.Once);
        }

        public static Mock<IVideo> DoMockingSetupForVideo(int idReturnValue = 0)
        {
            var mockVideo = new Mock<IVideo>();
            // Mock Functions
            mockVideo.Setup(m => m.Id).Returns(() => idReturnValue);
            mockVideo.Setup(m => m.Active).Returns(() => true);
            mockVideo.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockVideo.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideo.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVideo.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockVideo.Setup(m => m.UpdatedDate).Returns(() => null);
            mockVideo.Setup(m => m.LowUrl).Returns(() => "LowUrl");
            mockVideo.Setup(m => m.HighUrl).Returns(() => "HighUrl");
            mockVideo.Setup(m => m.HdUrl).Returns(() => "HdUrl");
            mockVideo.Setup(m => m.Url).Returns(() => "Url");
            mockVideo.Setup(m => m.LengthSeconds).Returns(() => 2000);
            mockVideo.Setup(m => m.PublishDate).Returns(() => new System.DateTime());
            // Related Objects
            mockVideo.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockVideo.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockVideo.Setup(m => m.AuthorId).Returns(() => 1);
            mockVideo.Setup(m => m.Author).Returns(() => new Person());
            mockVideo.Setup(m => m.VideoTypeId).Returns(() => 1);
            mockVideo.Setup(m => m.VideoType).Returns(() => new VideoType());
            // Associated Objects
            // <None>
            // Return
            return mockVideo;
        }
    }

    public class VideosMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsVideoProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var model = VideosMockingSetup.DoMockingSetupForVideoModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.LowUrl, entity.LowUrl);
            Assert.Equal(model.Object.HighUrl, entity.HighUrl);
            Assert.Equal(model.Object.HdUrl, entity.HdUrl);
            Assert.Equal(model.Object.Url, entity.Url);
            Assert.Equal(model.Object.LengthSeconds, entity.LengthSeconds);
            Assert.Equal(model.Object.PublishDate, entity.PublishDate);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.AuthorId, entity.AuthorId);
            Assert.Equal(model.Object.VideoTypeId, entity.VideoTypeId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsVideoProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var model = VideosMockingSetup.DoMockingSetupForVideoModel();
            // Act
            IVideo existingEntity = new Video { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.LowUrl, existingEntity.LowUrl);
            Assert.Equal(model.Object.HighUrl, existingEntity.HighUrl);
            Assert.Equal(model.Object.HdUrl, existingEntity.HdUrl);
            Assert.Equal(model.Object.Url, existingEntity.Url);
            Assert.Equal(model.Object.LengthSeconds, existingEntity.LengthSeconds);
            Assert.Equal(model.Object.PublishDate, existingEntity.PublishDate);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.AuthorId, existingEntity.AuthorId);
            Assert.Equal(model.Object.VideoTypeId, existingEntity.VideoTypeId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsVideoProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var entity = VideosMockingSetup.DoMockingSetupForVideo();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.LowUrl, model.LowUrl);
            Assert.Equal(entity.Object.HighUrl, model.HighUrl);
            Assert.Equal(entity.Object.HdUrl, model.HdUrl);
            Assert.Equal(entity.Object.Url, model.Url);
            Assert.Equal(entity.Object.LengthSeconds, model.LengthSeconds);
            Assert.Equal(entity.Object.PublishDate, model.PublishDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.VideoTypeId, model.VideoTypeId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyVideoProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var entity = VideosMockingSetup.DoMockingSetupForVideo();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.LowUrl, model.LowUrl);
            Assert.Equal(entity.Object.HighUrl, model.HighUrl);
            Assert.Equal(entity.Object.HdUrl, model.HdUrl);
            Assert.Equal(entity.Object.Url, model.Url);
            Assert.Equal(entity.Object.LengthSeconds, model.LengthSeconds);
            Assert.Equal(entity.Object.PublishDate, model.PublishDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.VideoTypeId, model.VideoTypeId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyVideoProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var entity = VideosMockingSetup.DoMockingSetupForVideo();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.LowUrl, model.LowUrl);
            Assert.Equal(entity.Object.HighUrl, model.HighUrl);
            Assert.Equal(entity.Object.HdUrl, model.HdUrl);
            Assert.Equal(entity.Object.Url, model.Url);
            Assert.Equal(entity.Object.LengthSeconds, model.LengthSeconds);
            Assert.Equal(entity.Object.PublishDate, model.PublishDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.VideoTypeId, model.VideoTypeId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsVideoSearchProperties()
        {
            // Arrange
            var mapper = new VideoMapper();
            var model = VideosMockingSetup.DoMockingSetupForVideoModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.AuthorId, searchModel.AuthorId);
            Assert.Equal(model.Object.Author?.CustomKey, searchModel.AuthorCustomKey);
            Assert.Equal(model.Object.Author?.ApiDetailUrl, searchModel.AuthorApiDetailUrl);
            Assert.Equal(model.Object.Author?.SiteDetailUrl, searchModel.AuthorSiteDetailUrl);
            Assert.Equal(model.Object.Author?.Name, searchModel.AuthorName);
            Assert.Equal(model.Object.Author?.ShortDescription, searchModel.AuthorShortDescription);
            Assert.Equal(model.Object.Author?.Description, searchModel.AuthorDescription);
            Assert.Equal(model.Object.VideoTypeId, searchModel.VideoTypeId);
            Assert.Equal(model.Object.VideoType?.CustomKey, searchModel.VideoTypeCustomKey);
            Assert.Equal(model.Object.VideoType?.ApiDetailUrl, searchModel.VideoTypeApiDetailUrl);
            Assert.Equal(model.Object.VideoType?.SiteDetailUrl, searchModel.VideoTypeSiteDetailUrl);
            Assert.Equal(model.Object.VideoType?.Name, searchModel.VideoTypeName);
            Assert.Equal(model.Object.VideoType?.ShortDescription, searchModel.VideoTypeShortDescription);
            Assert.Equal(model.Object.VideoType?.Description, searchModel.VideoTypeDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new VideoMapper();
            var model = VideosMockingSetup.DoMockingSetupForVideoModel(1);
            var entity = VideosMockingSetup.DoMockingSetupForVideo(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new VideoMapper();
            var model = VideosMockingSetup.DoMockingSetupForVideoModel(1);
            var entity = VideosMockingSetup.DoMockingSetupForVideo(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
