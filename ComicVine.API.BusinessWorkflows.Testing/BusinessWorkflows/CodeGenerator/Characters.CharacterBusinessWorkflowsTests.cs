// <auto-generated>
// <copyright file="Characters.ICharacterRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharactersRepository Class.</summary>
// <remarks>This file was autogenerated using BusinessWorkflowsTestingFileMaster.tt in ComicVine.API.BusinessWorkflows.Testing\BusinessWorkflows\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.BusinessWorkflows.Characters
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class CharactersMockingSetup
    {
        public static Mock<ICharacterModel> DoMockingSetupForCharacterModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterModel = new Mock<ICharacterModel>();
            // Mock Functions
            mockCharacterModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterModel.Setup(m => m.UpdatedDate).Returns(() => null);
            mockCharacterModel.Setup(m => m.Name).Returns(() => name);
            mockCharacterModel.Setup(m => m.ShortDescription).Returns(() => "short");
            mockCharacterModel.Setup(m => m.Description).Returns(() => "long");
            mockCharacterModel.Setup(m => m.RealName).Returns(() => "RealName");
            mockCharacterModel.Setup(m => m.DateOfBirth).Returns(() => new System.DateTime());
            // Related Objects
            mockCharacterModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockCharacterModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockCharacterModel.Setup(m => m.GenderId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Gender).Returns(() => new GenderModel());
            mockCharacterModel.Setup(m => m.OriginId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Origin).Returns(() => new OriginModel());
            mockCharacterModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            mockCharacterModel.Setup(m => m.CharacterAliases).Returns(() => new List<ICharacterAliasModel>());
            mockCharacterModel.Setup(m => m.CharacterCreators).Returns(() => new List<ICharacterCreatorModel>());
            mockCharacterModel.Setup(m => m.CharacterEnemies).Returns(() => new List<ICharacterEnemyModel>());
            mockCharacterModel.Setup(m => m.CharacterEnemyTeams).Returns(() => new List<ICharacterEnemyTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterFriends).Returns(() => new List<ICharacterFriendModel>());
            mockCharacterModel.Setup(m => m.CharacterFriendlyTeams).Returns(() => new List<ICharacterFriendlyTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterIssuesAppearedIn).Returns(() => new List<ICharacterAppearedInIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterIssuesDiedIn).Returns(() => new List<ICharacterDiedInIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterIssues).Returns(() => new List<ICharacterIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterMovies).Returns(() => new List<ICharacterMovieModel>());
            mockCharacterModel.Setup(m => m.CharacterPowers).Returns(() => new List<ICharacterPowerModel>());
            mockCharacterModel.Setup(m => m.CharacterStoryArcs).Returns(() => new List<ICharacterStoryArcModel>());
            mockCharacterModel.Setup(m => m.CharacterTeams).Returns(() => new List<ICharacterTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterVolumes).Returns(() => new List<ICharacterVolumeModel>());
            // Return
            return mockCharacterModel;
        }

        public static Mock<ICharacter> DoMockingSetupForCharacter(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacter = new Mock<ICharacter>();
            // Mock Functions
            mockCharacter.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacter.Setup(m => m.Active).Returns(() => true);
            mockCharacter.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacter.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacter.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacter.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacter.Setup(m => m.UpdatedDate).Returns(() => null);
            mockCharacter.Setup(m => m.Name).Returns(() => name);
            mockCharacter.Setup(m => m.ShortDescription).Returns(() => "short");
            mockCharacter.Setup(m => m.Description).Returns(() => "long");
            mockCharacter.Setup(m => m.RealName).Returns(() => "RealName");
            mockCharacter.Setup(m => m.DateOfBirth).Returns(() => new System.DateTime());
            // Related Objects
            mockCharacter.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockCharacter.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockCharacter.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockCharacter.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockCharacter.Setup(m => m.GenderId).Returns(() => 1);
            mockCharacter.Setup(m => m.Gender).Returns(() => new Gender());
            mockCharacter.Setup(m => m.OriginId).Returns(() => 1);
            mockCharacter.Setup(m => m.Origin).Returns(() => new Origin());
            mockCharacter.Setup(m => m.PublisherId).Returns(() => 1);
            mockCharacter.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            mockCharacter.Setup(m => m.CharacterAliases).Returns(() => new List<ICharacterAlias>());
            mockCharacter.Setup(m => m.CharacterCreators).Returns(() => new List<ICharacterCreator>());
            mockCharacter.Setup(m => m.CharacterEnemies).Returns(() => new List<ICharacterEnemy>());
            mockCharacter.Setup(m => m.CharacterEnemyTeams).Returns(() => new List<ICharacterEnemyTeam>());
            mockCharacter.Setup(m => m.CharacterFriends).Returns(() => new List<ICharacterFriend>());
            mockCharacter.Setup(m => m.CharacterFriendlyTeams).Returns(() => new List<ICharacterFriendlyTeam>());
            mockCharacter.Setup(m => m.CharacterIssuesAppearedIn).Returns(() => new List<ICharacterAppearedInIssue>());
            mockCharacter.Setup(m => m.CharacterIssuesDiedIn).Returns(() => new List<ICharacterDiedInIssue>());
            mockCharacter.Setup(m => m.CharacterIssues).Returns(() => new List<ICharacterIssue>());
            mockCharacter.Setup(m => m.CharacterMovies).Returns(() => new List<ICharacterMovie>());
            mockCharacter.Setup(m => m.CharacterPowers).Returns(() => new List<ICharacterPower>());
            mockCharacter.Setup(m => m.CharacterStoryArcs).Returns(() => new List<ICharacterStoryArc>());
            mockCharacter.Setup(m => m.CharacterTeams).Returns(() => new List<ICharacterTeam>());
            mockCharacter.Setup(m => m.CharacterVolumes).Returns(() => new List<ICharacterVolume>());
            // Return
            return mockCharacter;
        }

        public static Mock<ICharactersRepository> DoMockingSetupForRepository()
        {
            var mockCharactersRepository = new Mock<ICharactersRepository>();
            // Mock Functions
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<ICharacter>>().Object);
            mockCharactersRepository.Setup(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ICharacter>>().Object);
            mockCharactersRepository.Setup(m => m.Add(It.IsAny<ICharacter>()));
            mockCharactersRepository.Setup(m => m.Remove(It.IsAny<ICharacter>()));
            mockCharactersRepository.Setup(m => m.Deactivate(It.IsAny<ICharacter>()));
            mockCharactersRepository.Setup(m => m.Update(It.IsAny<ICharacter>()));
            // Return
            return mockCharactersRepository;
        }
    }

    public class CharactersBusinessWorkflowsTests
    {
        #region Read
        [Fact]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<CharacterModel>(person);
        }

        [Fact]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<CharacterModel>(person);
        }

        [Fact]
        public void Verify_Search_Should_ReturnAListOfCharacters()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ICharacterSearchModel>();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockCharactersRepository.Verify(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact]
        public void Verify_Search_AsListing_Should_ReturnAListOfCharactersWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ICharacterSearchModel>();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockCharactersRepository.Verify(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ICharacter>>().Object);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockCharactersRepository.Verify(m => m.Add(It.IsAny<ICharacter>()), Times.Once);
        }
        [Fact]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var mockCharacter = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            mockCharactersRepository.Setup(m => m.Search(It.IsAny<ICharacterSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<ICharacter> { mockCharacter.Object } );
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockCharacter.Object);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockCharactersRepository.Verify(m => m.Add(It.IsAny<ICharacter>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockCharacter = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockCharacter.Object);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            var expectedName = "Stephen King (2)";
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockCharacter.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            ICharacterModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("Stephen King", result.Name);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockCharactersRepository.Verify(m => m.Deactivate(It.IsAny<ICharacter>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockCharactersRepository.Verify(m => m.Deactivate(It.IsAny<ICharacter>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockCharactersRepository.Verify(m => m.Remove(It.IsAny<ICharacter>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            var mockCharactersMapper = new Mock<ICharacterMapper>();
            mockCharactersMapper.Setup(m => m.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>())).Returns(() => true);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, mockCharactersMapper.Object);
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ICharacter>().Object);
            mockCharactersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockCharactersRepository.Verify(m => m.Remove(It.IsAny<ICharacter>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockCharactersRepository = CharactersMockingSetup.DoMockingSetupForRepository();
            mockCharactersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new CharactersBusinessWorkflow(mockCharactersRepository.Object, new CharacterMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
