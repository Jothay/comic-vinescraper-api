// <auto-generated>
// <copyright file="Episodes.IEpisodeRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodesRepository Class.</summary>
// <remarks>This file was autogenerated using BusinessWorkflowsTestingFileMaster.tt in ComicVine.API.BusinessWorkflows.Testing\BusinessWorkflows\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.BusinessWorkflows.Episodes
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class EpisodesMockingSetup
    {
        public static Mock<IEpisodeModel> DoMockingSetupForEpisodeModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeModel = new Mock<IEpisodeModel>();
            // Mock Functions
            mockEpisodeModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeModel.Setup(m => m.Active).Returns(() => true);
            mockEpisodeModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeModel.Setup(m => m.UpdatedDate).Returns(() => null);
            mockEpisodeModel.Setup(m => m.Name).Returns(() => name);
            mockEpisodeModel.Setup(m => m.ShortDescription).Returns(() => "short");
            mockEpisodeModel.Setup(m => m.Description).Returns(() => "long");
            mockEpisodeModel.Setup(m => m.HasStaffReview).Returns(() => true);
            mockEpisodeModel.Setup(m => m.AirDate).Returns(() => new System.DateTime());
            mockEpisodeModel.Setup(m => m.EpisodeCode).Returns(() => "EpisodeCode");
            mockEpisodeModel.Setup(m => m.SeasonNumber).Returns(() => 2000);
            mockEpisodeModel.Setup(m => m.EpisodeNumber).Returns(() => 2000);
            // Related Objects
            mockEpisodeModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockEpisodeModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockEpisodeModel.Setup(m => m.SeriesId).Returns(() => 1);
            mockEpisodeModel.Setup(m => m.Series).Returns(() => new SeriesModel());
            // Associated Objects
            mockEpisodeModel.Setup(m => m.EpisodeAliases).Returns(() => new List<IEpisodeAliasModel>());
            mockEpisodeModel.Setup(m => m.EpisodeCharacters).Returns(() => new List<IEpisodeCharacterModel>());
            mockEpisodeModel.Setup(m => m.EpisodeCharactersDied).Returns(() => new List<IEpisodeCharacterDiedModel>());
            mockEpisodeModel.Setup(m => m.EpisodeCharacterFirstAppearances).Returns(() => new List<IEpisodeCharacterFirstAppearanceModel>());
            mockEpisodeModel.Setup(m => m.EpisodeConcepts).Returns(() => new List<IEpisodeConceptModel>());
            mockEpisodeModel.Setup(m => m.EpisodeConceptFirstAppearances).Returns(() => new List<IEpisodeConceptFirstAppearanceModel>());
            mockEpisodeModel.Setup(m => m.EpisodeLocations).Returns(() => new List<IEpisodeLocationModel>());
            mockEpisodeModel.Setup(m => m.EpisodeLocationFirstAppearances).Returns(() => new List<IEpisodeLocationFirstAppearanceModel>());
            mockEpisodeModel.Setup(m => m.EpisodeObjects).Returns(() => new List<IEpisodeObjectModel>());
            mockEpisodeModel.Setup(m => m.EpisodeObjectFirstAppearances).Returns(() => new List<IEpisodeObjectFirstAppearanceModel>());
            mockEpisodeModel.Setup(m => m.EpisodePeople).Returns(() => new List<IEpisodePersonModel>());
            mockEpisodeModel.Setup(m => m.EpisodeStoryArcs).Returns(() => new List<IEpisodeStoryArcModel>());
            mockEpisodeModel.Setup(m => m.EpisodeStoryArcFirstAppearances).Returns(() => new List<IEpisodeStoryArcFirstAppearanceModel>());
            mockEpisodeModel.Setup(m => m.EpisodeTeams).Returns(() => new List<IEpisodeTeamModel>());
            mockEpisodeModel.Setup(m => m.EpisodeTeamFirstAppearances).Returns(() => new List<IEpisodeTeamFirstAppearanceModel>());
            // Return
            return mockEpisodeModel;
        }

        public static Mock<IEpisode> DoMockingSetupForEpisode(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisode = new Mock<IEpisode>();
            // Mock Functions
            mockEpisode.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisode.Setup(m => m.Active).Returns(() => true);
            mockEpisode.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisode.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisode.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisode.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisode.Setup(m => m.UpdatedDate).Returns(() => null);
            mockEpisode.Setup(m => m.Name).Returns(() => name);
            mockEpisode.Setup(m => m.ShortDescription).Returns(() => "short");
            mockEpisode.Setup(m => m.Description).Returns(() => "long");
            mockEpisode.Setup(m => m.HasStaffReview).Returns(() => true);
            mockEpisode.Setup(m => m.AirDate).Returns(() => new System.DateTime());
            mockEpisode.Setup(m => m.EpisodeCode).Returns(() => "EpisodeCode");
            mockEpisode.Setup(m => m.SeasonNumber).Returns(() => 2000);
            mockEpisode.Setup(m => m.EpisodeNumber).Returns(() => 2000);
            // Related Objects
            mockEpisode.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockEpisode.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockEpisode.Setup(m => m.SeriesId).Returns(() => 1);
            mockEpisode.Setup(m => m.Series).Returns(() => new Series());
            // Associated Objects
            mockEpisode.Setup(m => m.EpisodeAliases).Returns(() => new List<IEpisodeAlias>());
            mockEpisode.Setup(m => m.EpisodeCharacters).Returns(() => new List<IEpisodeCharacter>());
            mockEpisode.Setup(m => m.EpisodeCharactersDied).Returns(() => new List<IEpisodeCharacterDied>());
            mockEpisode.Setup(m => m.EpisodeCharacterFirstAppearances).Returns(() => new List<IEpisodeCharacterFirstAppearance>());
            mockEpisode.Setup(m => m.EpisodeConcepts).Returns(() => new List<IEpisodeConcept>());
            mockEpisode.Setup(m => m.EpisodeConceptFirstAppearances).Returns(() => new List<IEpisodeConceptFirstAppearance>());
            mockEpisode.Setup(m => m.EpisodeLocations).Returns(() => new List<IEpisodeLocation>());
            mockEpisode.Setup(m => m.EpisodeLocationFirstAppearances).Returns(() => new List<IEpisodeLocationFirstAppearance>());
            mockEpisode.Setup(m => m.EpisodeObjects).Returns(() => new List<IEpisodeObject>());
            mockEpisode.Setup(m => m.EpisodeObjectFirstAppearances).Returns(() => new List<IEpisodeObjectFirstAppearance>());
            mockEpisode.Setup(m => m.EpisodePeople).Returns(() => new List<IEpisodePerson>());
            mockEpisode.Setup(m => m.EpisodeStoryArcs).Returns(() => new List<IEpisodeStoryArc>());
            mockEpisode.Setup(m => m.EpisodeStoryArcFirstAppearances).Returns(() => new List<IEpisodeStoryArcFirstAppearance>());
            mockEpisode.Setup(m => m.EpisodeTeams).Returns(() => new List<IEpisodeTeam>());
            mockEpisode.Setup(m => m.EpisodeTeamFirstAppearances).Returns(() => new List<IEpisodeTeamFirstAppearance>());
            // Return
            return mockEpisode;
        }

        public static Mock<IEpisodesRepository> DoMockingSetupForRepository()
        {
            var mockEpisodesRepository = new Mock<IEpisodesRepository>();
            // Mock Functions
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<IEpisode>>().Object);
            mockEpisodesRepository.Setup(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IEpisode>>().Object);
            mockEpisodesRepository.Setup(m => m.Add(It.IsAny<IEpisode>()));
            mockEpisodesRepository.Setup(m => m.Remove(It.IsAny<IEpisode>()));
            mockEpisodesRepository.Setup(m => m.Deactivate(It.IsAny<IEpisode>()));
            mockEpisodesRepository.Setup(m => m.Update(It.IsAny<IEpisode>()));
            // Return
            return mockEpisodesRepository;
        }
    }

    public class EpisodesBusinessWorkflowsTests
    {
        #region Read
        [Fact]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<EpisodeModel>(person);
        }

        [Fact]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<EpisodeModel>(person);
        }

        [Fact]
        public void Verify_Search_Should_ReturnAListOfEpisodes()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IEpisodeSearchModel>();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockEpisodesRepository.Verify(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact]
        public void Verify_Search_AsListing_Should_ReturnAListOfEpisodesWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IEpisodeSearchModel>();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockEpisodesRepository.Verify(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IEpisode>>().Object);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            var model = EpisodesMockingSetup.DoMockingSetupForEpisodeModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockEpisodesRepository.Verify(m => m.Add(It.IsAny<IEpisode>()), Times.Once);
        }
        [Fact]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var mockEpisode = EpisodesMockingSetup.DoMockingSetupForEpisode(1);
            mockEpisodesRepository.Setup(m => m.Search(It.IsAny<IEpisodeSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<IEpisode> { mockEpisode.Object } );
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockEpisode.Object);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            var model = EpisodesMockingSetup.DoMockingSetupForEpisodeModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockEpisodesRepository.Verify(m => m.Add(It.IsAny<IEpisode>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockEpisode = EpisodesMockingSetup.DoMockingSetupForEpisode(1);
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockEpisode.Object);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            var expectedName = "Stephen King (2)";
            var model = EpisodesMockingSetup.DoMockingSetupForEpisodeModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockEpisode.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = EpisodesMockingSetup.DoMockingSetupForEpisode(1);
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            var model = EpisodesMockingSetup.DoMockingSetupForEpisodeModel(1);
            IEpisodeModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("Stephen King", result.Name);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockEpisodesRepository.Verify(m => m.Deactivate(It.IsAny<IEpisode>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockEpisodesRepository.Verify(m => m.Deactivate(It.IsAny<IEpisode>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockEpisodesRepository.Verify(m => m.Remove(It.IsAny<IEpisode>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            var mockEpisodesMapper = new Mock<IEpisodeMapper>();
            mockEpisodesMapper.Setup(m => m.AreEqual(It.IsAny<IEpisodeModel>(), It.IsAny<IEpisode>())).Returns(() => true);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, mockEpisodesMapper.Object);
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IEpisode>().Object);
            mockEpisodesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockEpisodesRepository.Verify(m => m.Remove(It.IsAny<IEpisode>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockEpisodesRepository = EpisodesMockingSetup.DoMockingSetupForRepository();
            mockEpisodesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new EpisodesBusinessWorkflow(mockEpisodesRepository.Object, new EpisodeMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
