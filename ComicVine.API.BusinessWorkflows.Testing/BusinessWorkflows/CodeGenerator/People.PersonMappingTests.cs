// <auto-generated>
// <copyright file="People.IPersonRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PeopleRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.People
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class PeopleMockingSetup
    {
        public static Mock<IPersonModel> DoMockingSetupForPersonModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPersonModel = new Mock<IPersonModel>();
            // Mock Functions
            mockPersonModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPersonModel.Setup(m => m.Active).Returns(() => true);
            mockPersonModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPersonModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPersonModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPersonModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPersonModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPersonModel.Setup(m => m.Name).Returns(() => name);
            //mockPersonModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPersonModel.Setup(m => m.Description).Returns(() => "long");
            mockPersonModel.Setup(m => m.Hometown).Returns(() => "Hometown");
            mockPersonModel.Setup(m => m.Country).Returns(() => "Country");
            mockPersonModel.Setup(m => m.Email).Returns(() => "Email");
            mockPersonModel.Setup(m => m.Website).Returns(() => "Website");
            mockPersonModel.Setup(m => m.BirthDate).Returns(() => new System.DateTime());
            mockPersonModel.Setup(m => m.DeathDate).Returns(() => new System.DateTime());
            // Related Objects
            mockPersonModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPersonModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockPersonModel.Setup(m => m.GenderId).Returns(() => 1);
            mockPersonModel.Setup(m => m.Gender).Returns(() => new GenderModel());
            // Associated Objects
            mockPersonModel.Setup(m => m.CharactersCreated).Returns(() => new List<ICreatorCharacterModel>());
            mockPersonModel.Setup(m => m.PersonAliases).Returns(() => new List<IPersonAliasModel>());
            mockPersonModel.Setup(m => m.IssuesWritten).Returns(() => new List<IIssueWriterModel>());
            mockPersonModel.Setup(m => m.MoviesProduced).Returns(() => new List<IMovieProducerModel>());
            mockPersonModel.Setup(m => m.MoviesWritten).Returns(() => new List<IMovieWriterModel>());
            mockPersonModel.Setup(m => m.PromosWritten).Returns(() => new List<IPromoModel>());
            mockPersonModel.Setup(m => m.StoryArcsWritten).Returns(() => new List<IStoryArcWriterModel>());
            mockPersonModel.Setup(m => m.VolumesWritten).Returns(() => new List<IVolumeWriterModel>());
            // Return
            return mockPersonModel;
        }

        public static Mock<IPerson> DoMockingSetupForPerson(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPerson = new Mock<IPerson>();
            // Mock Functions
            mockPerson.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPerson.Setup(m => m.Active).Returns(() => true);
            mockPerson.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPerson.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPerson.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPerson.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPerson.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPerson.Setup(m => m.Name).Returns(() => name);
            //mockPerson.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPerson.Setup(m => m.Description).Returns(() => "long");
            mockPerson.Setup(m => m.Hometown).Returns(() => "Hometown");
            mockPerson.Setup(m => m.Country).Returns(() => "Country");
            mockPerson.Setup(m => m.Email).Returns(() => "Email");
            mockPerson.Setup(m => m.Website).Returns(() => "Website");
            mockPerson.Setup(m => m.BirthDate).Returns(() => new System.DateTime());
            mockPerson.Setup(m => m.DeathDate).Returns(() => new System.DateTime());
            // Related Objects
            mockPerson.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPerson.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockPerson.Setup(m => m.GenderId).Returns(() => 1);
            mockPerson.Setup(m => m.Gender).Returns(() => new Gender());
            // Associated Objects
            mockPerson.Setup(m => m.CharactersCreated).Returns(() => new List<ICreatorCharacter>());
            mockPerson.Setup(m => m.PersonAliases).Returns(() => new List<IPersonAlias>());
            mockPerson.Setup(m => m.IssuesWritten).Returns(() => new List<IIssueWriter>());
            mockPerson.Setup(m => m.MoviesProduced).Returns(() => new List<IMovieProducer>());
            mockPerson.Setup(m => m.MoviesWritten).Returns(() => new List<IMovieWriter>());
            mockPerson.Setup(m => m.PromosWritten).Returns(() => new List<IPromo>());
            mockPerson.Setup(m => m.StoryArcsWritten).Returns(() => new List<IStoryArcWriter>());
            mockPerson.Setup(m => m.VolumesWritten).Returns(() => new List<IVolumeWriter>());
            // Return
            return mockPerson;
        }
    }

    public class PersonMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<PersonMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPersonModel>()));
            var mockModel = PeopleMockingSetup.DoMockingSetupForPersonModel(1);
            PersonMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPersonModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<PersonMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPersonModel>(), ref It.IsAny<IPerson>()));
        //    var mockModel = PeopleMockingSetup.DoMockingSetupForPersonModel(1);
        //    var mockEntity = PeopleMockingSetup.DoMockingSetupForPerson(1);
        //    PersonMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPersonModel>(), ref It.IsAny<IPerson>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PersonMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IPerson>()));
            var mockEntity = PeopleMockingSetup.DoMockingSetupForPerson(1);
            PersonMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IPerson>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PersonMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IPerson>()));
            var mockEntity = PeopleMockingSetup.DoMockingSetupForPerson(1);
            PersonMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IPerson>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PersonMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IPerson>()));
            var mockEntity = PeopleMockingSetup.DoMockingSetupForPerson(1);
            PersonMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IPerson>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PersonMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IPersonModel>()));
            var mockModel = PeopleMockingSetup.DoMockingSetupForPersonModel(1);
            PersonMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IPersonModel>()), Times.Once);
        }

        public static Mock<IPerson> DoMockingSetupForPerson(int idReturnValue = 0)
        {
            var mockPerson = new Mock<IPerson>();
            // Mock Functions
            mockPerson.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPerson.Setup(m => m.Active).Returns(() => true);
            mockPerson.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPerson.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPerson.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPerson.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPerson.Setup(m => m.UpdatedDate).Returns(() => null);
            mockPerson.Setup(m => m.Hometown).Returns(() => "Hometown");
            mockPerson.Setup(m => m.Country).Returns(() => "Country");
            mockPerson.Setup(m => m.Email).Returns(() => "Email");
            mockPerson.Setup(m => m.Website).Returns(() => "Website");
            mockPerson.Setup(m => m.BirthDate).Returns(() => new System.DateTime());
            mockPerson.Setup(m => m.DeathDate).Returns(() => new System.DateTime());
            // Related Objects
            mockPerson.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPerson.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockPerson.Setup(m => m.GenderId).Returns(() => 1);
            mockPerson.Setup(m => m.Gender).Returns(() => new Gender());
            // Associated Objects
            mockPerson.Setup(m => m.CharactersCreated).Returns(() => new List<ICreatorCharacter>());
            mockPerson.Setup(m => m.PersonAliases).Returns(() => new List<IPersonAlias>());
            mockPerson.Setup(m => m.IssuesWritten).Returns(() => new List<IIssueWriter>());
            mockPerson.Setup(m => m.MoviesProduced).Returns(() => new List<IMovieProducer>());
            mockPerson.Setup(m => m.MoviesWritten).Returns(() => new List<IMovieWriter>());
            mockPerson.Setup(m => m.PromosWritten).Returns(() => new List<IPromo>());
            mockPerson.Setup(m => m.StoryArcsWritten).Returns(() => new List<IStoryArcWriter>());
            mockPerson.Setup(m => m.VolumesWritten).Returns(() => new List<IVolumeWriter>());
            // Return
            return mockPerson;
        }
    }

    public class PeopleMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsPersonProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var model = PeopleMockingSetup.DoMockingSetupForPersonModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.Hometown, entity.Hometown);
            Assert.Equal(model.Object.Country, entity.Country);
            Assert.Equal(model.Object.Email, entity.Email);
            Assert.Equal(model.Object.Website, entity.Website);
            Assert.Equal(model.Object.BirthDate, entity.BirthDate);
            Assert.Equal(model.Object.DeathDate, entity.DeathDate);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.GenderId, entity.GenderId);
            // Associated Objects
            //Assert.Equal(model.Object.CharactersCreated?.Count, entity.CharactersCreated?.Count);
            model.VerifyGet(x => x.CharactersCreated, Times.Once);
            //Assert.Equal(model.Object.PersonAliases?.Count, entity.PersonAliases?.Count);
            model.VerifyGet(x => x.PersonAliases, Times.Once);
            //Assert.Equal(model.Object.IssuesWritten?.Count, entity.IssuesWritten?.Count);
            model.VerifyGet(x => x.IssuesWritten, Times.Once);
            //Assert.Equal(model.Object.MoviesProduced?.Count, entity.MoviesProduced?.Count);
            model.VerifyGet(x => x.MoviesProduced, Times.Once);
            //Assert.Equal(model.Object.MoviesWritten?.Count, entity.MoviesWritten?.Count);
            model.VerifyGet(x => x.MoviesWritten, Times.Once);
            //Assert.Equal(model.Object.PromosWritten?.Count, entity.PromosWritten?.Count);
            model.VerifyGet(x => x.PromosWritten, Times.Once);
            //Assert.Equal(model.Object.StoryArcsWritten?.Count, entity.StoryArcsWritten?.Count);
            model.VerifyGet(x => x.StoryArcsWritten, Times.Once);
            //Assert.Equal(model.Object.VolumesWritten?.Count, entity.VolumesWritten?.Count);
            model.VerifyGet(x => x.VolumesWritten, Times.Once);
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsPersonProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var model = PeopleMockingSetup.DoMockingSetupForPersonModel();
            // Act
            IPerson existingEntity = new Person { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.Hometown, existingEntity.Hometown);
            Assert.Equal(model.Object.Country, existingEntity.Country);
            Assert.Equal(model.Object.Email, existingEntity.Email);
            Assert.Equal(model.Object.Website, existingEntity.Website);
            Assert.Equal(model.Object.BirthDate, existingEntity.BirthDate);
            Assert.Equal(model.Object.DeathDate, existingEntity.DeathDate);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.GenderId, existingEntity.GenderId);
            // Associated Objects
            model.VerifyGet(x => x.CharactersCreated, Times.Once);
            //Assert.Equal(model.Object.CharactersCreated?.Count, existingEntity.CharactersCreated?.Count);
            model.VerifyGet(x => x.PersonAliases, Times.Once);
            //Assert.Equal(model.Object.PersonAliases?.Count, existingEntity.PersonAliases?.Count);
            model.VerifyGet(x => x.IssuesWritten, Times.Once);
            //Assert.Equal(model.Object.IssuesWritten?.Count, existingEntity.IssuesWritten?.Count);
            model.VerifyGet(x => x.MoviesProduced, Times.Once);
            //Assert.Equal(model.Object.MoviesProduced?.Count, existingEntity.MoviesProduced?.Count);
            model.VerifyGet(x => x.MoviesWritten, Times.Once);
            //Assert.Equal(model.Object.MoviesWritten?.Count, existingEntity.MoviesWritten?.Count);
            model.VerifyGet(x => x.PromosWritten, Times.Once);
            //Assert.Equal(model.Object.PromosWritten?.Count, existingEntity.PromosWritten?.Count);
            model.VerifyGet(x => x.StoryArcsWritten, Times.Once);
            //Assert.Equal(model.Object.StoryArcsWritten?.Count, existingEntity.StoryArcsWritten?.Count);
            model.VerifyGet(x => x.VolumesWritten, Times.Once);
            //Assert.Equal(model.Object.VolumesWritten?.Count, existingEntity.VolumesWritten?.Count);
        }

        [Fact]
        public void Verify_MapToModel_AssignsPersonProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var entity = PeopleMockingSetup.DoMockingSetupForPerson();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Hometown, model.Hometown);
            Assert.Equal(entity.Object.Country, model.Country);
            Assert.Equal(entity.Object.Email, model.Email);
            Assert.Equal(entity.Object.Website, model.Website);
            Assert.Equal(entity.Object.BirthDate, model.BirthDate);
            Assert.Equal(entity.Object.DeathDate, model.DeathDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
            // Associated Objects
            Assert.Equal(entity.Object.CharactersCreated?.Count, model.CharactersCreated?.Count);
            Assert.Equal(entity.Object.PersonAliases?.Count, model.PersonAliases?.Count);
            Assert.Equal(entity.Object.IssuesWritten?.Count, model.IssuesWritten?.Count);
            Assert.Equal(entity.Object.MoviesProduced?.Count, model.MoviesProduced?.Count);
            Assert.Equal(entity.Object.MoviesWritten?.Count, model.MoviesWritten?.Count);
            Assert.Equal(entity.Object.PromosWritten?.Count, model.PromosWritten?.Count);
            Assert.Equal(entity.Object.StoryArcsWritten?.Count, model.StoryArcsWritten?.Count);
            Assert.Equal(entity.Object.VolumesWritten?.Count, model.VolumesWritten?.Count);
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyPersonProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var entity = PeopleMockingSetup.DoMockingSetupForPerson();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Hometown, model.Hometown);
            Assert.Equal(entity.Object.Country, model.Country);
            Assert.Equal(entity.Object.Email, model.Email);
            Assert.Equal(entity.Object.Website, model.Website);
            Assert.Equal(entity.Object.BirthDate, model.BirthDate);
            Assert.Equal(entity.Object.DeathDate, model.DeathDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyPersonProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var entity = PeopleMockingSetup.DoMockingSetupForPerson();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Hometown, model.Hometown);
            Assert.Equal(entity.Object.Country, model.Country);
            Assert.Equal(entity.Object.Email, model.Email);
            Assert.Equal(entity.Object.Website, model.Website);
            Assert.Equal(entity.Object.BirthDate, model.BirthDate);
            Assert.Equal(entity.Object.DeathDate, model.DeathDate);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsPersonSearchProperties()
        {
            // Arrange
            var mapper = new PersonMapper();
            var model = PeopleMockingSetup.DoMockingSetupForPersonModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.GenderId, searchModel.GenderId);
            Assert.Equal(model.Object.Gender?.CustomKey, searchModel.GenderCustomKey);
            Assert.Equal(model.Object.Gender?.ApiDetailUrl, searchModel.GenderApiDetailUrl);
            Assert.Equal(model.Object.Gender?.SiteDetailUrl, searchModel.GenderSiteDetailUrl);
            Assert.Equal(model.Object.Gender?.Name, searchModel.GenderName);
            Assert.Equal(model.Object.Gender?.ShortDescription, searchModel.GenderShortDescription);
            Assert.Equal(model.Object.Gender?.Description, searchModel.GenderDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new PersonMapper();
            var model = PeopleMockingSetup.DoMockingSetupForPersonModel(1);
            var entity = PeopleMockingSetup.DoMockingSetupForPerson(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new PersonMapper();
            var model = PeopleMockingSetup.DoMockingSetupForPersonModel(1);
            var entity = PeopleMockingSetup.DoMockingSetupForPerson(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
