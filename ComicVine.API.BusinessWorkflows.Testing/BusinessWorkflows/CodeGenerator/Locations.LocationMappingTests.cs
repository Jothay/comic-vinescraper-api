// <auto-generated>
// <copyright file="Locations.ILocationRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Locations
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class LocationsMockingSetup
    {
        public static Mock<ILocationModel> DoMockingSetupForLocationModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocationModel = new Mock<ILocationModel>();
            // Mock Functions
            mockLocationModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationModel.Setup(m => m.Active).Returns(() => true);
            mockLocationModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocationModel.Setup(m => m.Name).Returns(() => name);
            //mockLocationModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocationModel.Setup(m => m.Description).Returns(() => "long");
            mockLocationModel.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockLocationModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockLocationModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockLocationModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockLocationModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            // Associated Objects
            mockLocationModel.Setup(m => m.LocationAliases).Returns(() => new List<ILocationAliasModel>());
            mockLocationModel.Setup(m => m.LocationAppearedInIssues).Returns(() => new List<ILocationAppearedInIssueModel>());
            mockLocationModel.Setup(m => m.LocationIssues).Returns(() => new List<ILocationIssueModel>());
            mockLocationModel.Setup(m => m.LocationMovies).Returns(() => new List<ILocationMovieModel>());
            mockLocationModel.Setup(m => m.LocationStoryArcs).Returns(() => new List<ILocationStoryArcModel>());
            mockLocationModel.Setup(m => m.LocationVolumes).Returns(() => new List<ILocationVolumeModel>());
            // Return
            return mockLocationModel;
        }

        public static Mock<ILocation> DoMockingSetupForLocation(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocation = new Mock<ILocation>();
            // Mock Functions
            mockLocation.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocation.Setup(m => m.Active).Returns(() => true);
            mockLocation.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocation.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocation.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocation.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocation.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocation.Setup(m => m.Name).Returns(() => name);
            //mockLocation.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocation.Setup(m => m.Description).Returns(() => "long");
            mockLocation.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockLocation.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockLocation.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockLocation.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockLocation.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockLocation.Setup(m => m.LocationAliases).Returns(() => new List<ILocationAlias>());
            mockLocation.Setup(m => m.LocationAppearedInIssues).Returns(() => new List<ILocationAppearedInIssue>());
            mockLocation.Setup(m => m.LocationIssues).Returns(() => new List<ILocationIssue>());
            mockLocation.Setup(m => m.LocationMovies).Returns(() => new List<ILocationMovie>());
            mockLocation.Setup(m => m.LocationStoryArcs).Returns(() => new List<ILocationStoryArc>());
            mockLocation.Setup(m => m.LocationVolumes).Returns(() => new List<ILocationVolume>());
            // Return
            return mockLocation;
        }
    }

    public class LocationMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<LocationMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationModel>()));
            var mockModel = LocationsMockingSetup.DoMockingSetupForLocationModel(1);
            LocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<LocationMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationModel>(), ref It.IsAny<ILocation>()));
        //    var mockModel = LocationsMockingSetup.DoMockingSetupForLocationModel(1);
        //    var mockEntity = LocationsMockingSetup.DoMockingSetupForLocation(1);
        //    LocationMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationModel>(), ref It.IsAny<ILocation>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ILocation>()));
            var mockEntity = LocationsMockingSetup.DoMockingSetupForLocation(1);
            LocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ILocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ILocation>()));
            var mockEntity = LocationsMockingSetup.DoMockingSetupForLocation(1);
            LocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ILocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ILocation>()));
            var mockEntity = LocationsMockingSetup.DoMockingSetupForLocation(1);
            LocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ILocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ILocationModel>()));
            var mockModel = LocationsMockingSetup.DoMockingSetupForLocationModel(1);
            LocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ILocationModel>()), Times.Once);
        }

        public static Mock<ILocation> DoMockingSetupForLocation(int idReturnValue = 0)
        {
            var mockLocation = new Mock<ILocation>();
            // Mock Functions
            mockLocation.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocation.Setup(m => m.Active).Returns(() => true);
            mockLocation.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocation.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocation.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocation.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocation.Setup(m => m.UpdatedDate).Returns(() => null);
            mockLocation.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockLocation.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockLocation.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockLocation.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockLocation.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockLocation.Setup(m => m.LocationAliases).Returns(() => new List<ILocationAlias>());
            mockLocation.Setup(m => m.LocationAppearedInIssues).Returns(() => new List<ILocationAppearedInIssue>());
            mockLocation.Setup(m => m.LocationIssues).Returns(() => new List<ILocationIssue>());
            mockLocation.Setup(m => m.LocationMovies).Returns(() => new List<ILocationMovie>());
            mockLocation.Setup(m => m.LocationStoryArcs).Returns(() => new List<ILocationStoryArc>());
            mockLocation.Setup(m => m.LocationVolumes).Returns(() => new List<ILocationVolume>());
            // Return
            return mockLocation;
        }
    }

    public class LocationsMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsLocationProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var model = LocationsMockingSetup.DoMockingSetupForLocationModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.StartYear, entity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            // Associated Objects
            //Assert.Equal(model.Object.LocationAliases?.Count, entity.LocationAliases?.Count);
            model.VerifyGet(x => x.LocationAliases, Times.Once);
            //Assert.Equal(model.Object.LocationAppearedInIssues?.Count, entity.LocationAppearedInIssues?.Count);
            model.VerifyGet(x => x.LocationAppearedInIssues, Times.Once);
            //Assert.Equal(model.Object.LocationIssues?.Count, entity.LocationIssues?.Count);
            model.VerifyGet(x => x.LocationIssues, Times.Once);
            //Assert.Equal(model.Object.LocationMovies?.Count, entity.LocationMovies?.Count);
            model.VerifyGet(x => x.LocationMovies, Times.Once);
            //Assert.Equal(model.Object.LocationStoryArcs?.Count, entity.LocationStoryArcs?.Count);
            model.VerifyGet(x => x.LocationStoryArcs, Times.Once);
            //Assert.Equal(model.Object.LocationVolumes?.Count, entity.LocationVolumes?.Count);
            model.VerifyGet(x => x.LocationVolumes, Times.Once);
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsLocationProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var model = LocationsMockingSetup.DoMockingSetupForLocationModel();
            // Act
            ILocation existingEntity = new Location { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.StartYear, existingEntity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            // Associated Objects
            model.VerifyGet(x => x.LocationAliases, Times.Once);
            //Assert.Equal(model.Object.LocationAliases?.Count, existingEntity.LocationAliases?.Count);
            model.VerifyGet(x => x.LocationAppearedInIssues, Times.Once);
            //Assert.Equal(model.Object.LocationAppearedInIssues?.Count, existingEntity.LocationAppearedInIssues?.Count);
            model.VerifyGet(x => x.LocationIssues, Times.Once);
            //Assert.Equal(model.Object.LocationIssues?.Count, existingEntity.LocationIssues?.Count);
            model.VerifyGet(x => x.LocationMovies, Times.Once);
            //Assert.Equal(model.Object.LocationMovies?.Count, existingEntity.LocationMovies?.Count);
            model.VerifyGet(x => x.LocationStoryArcs, Times.Once);
            //Assert.Equal(model.Object.LocationStoryArcs?.Count, existingEntity.LocationStoryArcs?.Count);
            model.VerifyGet(x => x.LocationVolumes, Times.Once);
            //Assert.Equal(model.Object.LocationVolumes?.Count, existingEntity.LocationVolumes?.Count);
        }

        [Fact]
        public void Verify_MapToModel_AssignsLocationProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var entity = LocationsMockingSetup.DoMockingSetupForLocation();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Associated Objects
            Assert.Equal(entity.Object.LocationAliases?.Count, model.LocationAliases?.Count);
            Assert.Equal(entity.Object.LocationAppearedInIssues?.Count, model.LocationAppearedInIssues?.Count);
            Assert.Equal(entity.Object.LocationIssues?.Count, model.LocationIssues?.Count);
            Assert.Equal(entity.Object.LocationMovies?.Count, model.LocationMovies?.Count);
            Assert.Equal(entity.Object.LocationStoryArcs?.Count, model.LocationStoryArcs?.Count);
            Assert.Equal(entity.Object.LocationVolumes?.Count, model.LocationVolumes?.Count);
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyLocationProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var entity = LocationsMockingSetup.DoMockingSetupForLocation();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyLocationProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var entity = LocationsMockingSetup.DoMockingSetupForLocation();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsLocationSearchProperties()
        {
            // Arrange
            var mapper = new LocationMapper();
            var model = LocationsMockingSetup.DoMockingSetupForLocationModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new LocationMapper();
            var model = LocationsMockingSetup.DoMockingSetupForLocationModel(1);
            var entity = LocationsMockingSetup.DoMockingSetupForLocation(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new LocationMapper();
            var model = LocationsMockingSetup.DoMockingSetupForLocationModel(1);
            var entity = LocationsMockingSetup.DoMockingSetupForLocation(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
