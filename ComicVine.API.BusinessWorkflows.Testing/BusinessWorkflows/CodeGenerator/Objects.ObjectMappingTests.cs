// <auto-generated>
// <copyright file="Objects.IObjectRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Objects
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class ObjectsMockingSetup
    {
        public static Mock<IObjectModel> DoMockingSetupForObjectModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockObjectModel = new Mock<IObjectModel>();
            // Mock Functions
            mockObjectModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockObjectModel.Setup(m => m.Active).Returns(() => true);
            mockObjectModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockObjectModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockObjectModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockObjectModel.Setup(m => m.Name).Returns(() => name);
            //mockObjectModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockObjectModel.Setup(m => m.Description).Returns(() => "long");
            mockObjectModel.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockObjectModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockObjectModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockObjectModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockObjectModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            // Associated Objects
            mockObjectModel.Setup(m => m.ObjectAliases).Returns(() => new List<IObjectAliasModel>());
            mockObjectModel.Setup(m => m.ObjectIssuesAppearedIn).Returns(() => new List<IObjectAppearedInIssueModel>());
            mockObjectModel.Setup(m => m.ObjectIssues).Returns(() => new List<IObjectIssueModel>());
            mockObjectModel.Setup(m => m.ObjectMovies).Returns(() => new List<IObjectMovieModel>());
            mockObjectModel.Setup(m => m.ObjectStoryArcs).Returns(() => new List<IObjectStoryArcModel>());
            mockObjectModel.Setup(m => m.ObjectVolumes).Returns(() => new List<IObjectVolumeModel>());
            // Return
            return mockObjectModel;
        }

        public static Mock<IObject> DoMockingSetupForObject(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockObject = new Mock<IObject>();
            // Mock Functions
            mockObject.Setup(m => m.Id).Returns(() => idReturnValue);
            mockObject.Setup(m => m.Active).Returns(() => true);
            mockObject.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockObject.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObject.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObject.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockObject.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockObject.Setup(m => m.Name).Returns(() => name);
            //mockObject.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockObject.Setup(m => m.Description).Returns(() => "long");
            mockObject.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockObject.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockObject.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockObject.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockObject.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockObject.Setup(m => m.ObjectAliases).Returns(() => new List<IObjectAlias>());
            mockObject.Setup(m => m.ObjectIssuesAppearedIn).Returns(() => new List<IObjectAppearedInIssue>());
            mockObject.Setup(m => m.ObjectIssues).Returns(() => new List<IObjectIssue>());
            mockObject.Setup(m => m.ObjectMovies).Returns(() => new List<IObjectMovie>());
            mockObject.Setup(m => m.ObjectStoryArcs).Returns(() => new List<IObjectStoryArc>());
            mockObject.Setup(m => m.ObjectVolumes).Returns(() => new List<IObjectVolume>());
            // Return
            return mockObject;
        }
    }

    public class ObjectMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<ObjectMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IObjectModel>()));
            var mockModel = ObjectsMockingSetup.DoMockingSetupForObjectModel(1);
            ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IObjectModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<ObjectMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IObjectModel>(), ref It.IsAny<IObject>()));
        //    var mockModel = ObjectsMockingSetup.DoMockingSetupForObjectModel(1);
        //    var mockEntity = ObjectsMockingSetup.DoMockingSetupForObject(1);
        //    ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IObjectModel>(), ref It.IsAny<IObject>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IObject>()));
            var mockEntity = ObjectsMockingSetup.DoMockingSetupForObject(1);
            ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IObject>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IObject>()));
            var mockEntity = ObjectsMockingSetup.DoMockingSetupForObject(1);
            ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IObject>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IObject>()));
            var mockEntity = ObjectsMockingSetup.DoMockingSetupForObject(1);
            ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IObject>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IObjectModel>()));
            var mockModel = ObjectsMockingSetup.DoMockingSetupForObjectModel(1);
            ObjectMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IObjectModel>()), Times.Once);
        }

        public static Mock<IObject> DoMockingSetupForObject(int idReturnValue = 0)
        {
            var mockObject = new Mock<IObject>();
            // Mock Functions
            mockObject.Setup(m => m.Id).Returns(() => idReturnValue);
            mockObject.Setup(m => m.Active).Returns(() => true);
            mockObject.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockObject.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObject.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObject.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockObject.Setup(m => m.UpdatedDate).Returns(() => null);
            mockObject.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockObject.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockObject.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockObject.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockObject.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockObject.Setup(m => m.ObjectAliases).Returns(() => new List<IObjectAlias>());
            mockObject.Setup(m => m.ObjectIssuesAppearedIn).Returns(() => new List<IObjectAppearedInIssue>());
            mockObject.Setup(m => m.ObjectIssues).Returns(() => new List<IObjectIssue>());
            mockObject.Setup(m => m.ObjectMovies).Returns(() => new List<IObjectMovie>());
            mockObject.Setup(m => m.ObjectStoryArcs).Returns(() => new List<IObjectStoryArc>());
            mockObject.Setup(m => m.ObjectVolumes).Returns(() => new List<IObjectVolume>());
            // Return
            return mockObject;
        }
    }

    public class ObjectsMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsObjectProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var model = ObjectsMockingSetup.DoMockingSetupForObjectModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.StartYear, entity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            // Associated Objects
            //Assert.Equal(model.Object.ObjectAliases?.Count, entity.ObjectAliases?.Count);
            model.VerifyGet(x => x.ObjectAliases, Times.Once);
            //Assert.Equal(model.Object.ObjectIssuesAppearedIn?.Count, entity.ObjectIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.ObjectIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.ObjectIssues?.Count, entity.ObjectIssues?.Count);
            model.VerifyGet(x => x.ObjectIssues, Times.Once);
            //Assert.Equal(model.Object.ObjectMovies?.Count, entity.ObjectMovies?.Count);
            model.VerifyGet(x => x.ObjectMovies, Times.Once);
            //Assert.Equal(model.Object.ObjectStoryArcs?.Count, entity.ObjectStoryArcs?.Count);
            model.VerifyGet(x => x.ObjectStoryArcs, Times.Once);
            //Assert.Equal(model.Object.ObjectVolumes?.Count, entity.ObjectVolumes?.Count);
            model.VerifyGet(x => x.ObjectVolumes, Times.Once);
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsObjectProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var model = ObjectsMockingSetup.DoMockingSetupForObjectModel();
            // Act
            IObject existingEntity = new Object { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.StartYear, existingEntity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            // Associated Objects
            model.VerifyGet(x => x.ObjectAliases, Times.Once);
            //Assert.Equal(model.Object.ObjectAliases?.Count, existingEntity.ObjectAliases?.Count);
            model.VerifyGet(x => x.ObjectIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.ObjectIssuesAppearedIn?.Count, existingEntity.ObjectIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.ObjectIssues, Times.Once);
            //Assert.Equal(model.Object.ObjectIssues?.Count, existingEntity.ObjectIssues?.Count);
            model.VerifyGet(x => x.ObjectMovies, Times.Once);
            //Assert.Equal(model.Object.ObjectMovies?.Count, existingEntity.ObjectMovies?.Count);
            model.VerifyGet(x => x.ObjectStoryArcs, Times.Once);
            //Assert.Equal(model.Object.ObjectStoryArcs?.Count, existingEntity.ObjectStoryArcs?.Count);
            model.VerifyGet(x => x.ObjectVolumes, Times.Once);
            //Assert.Equal(model.Object.ObjectVolumes?.Count, existingEntity.ObjectVolumes?.Count);
        }

        [Fact]
        public void Verify_MapToModel_AssignsObjectProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var entity = ObjectsMockingSetup.DoMockingSetupForObject();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Associated Objects
            Assert.Equal(entity.Object.ObjectAliases?.Count, model.ObjectAliases?.Count);
            Assert.Equal(entity.Object.ObjectIssuesAppearedIn?.Count, model.ObjectIssuesAppearedIn?.Count);
            Assert.Equal(entity.Object.ObjectIssues?.Count, model.ObjectIssues?.Count);
            Assert.Equal(entity.Object.ObjectMovies?.Count, model.ObjectMovies?.Count);
            Assert.Equal(entity.Object.ObjectStoryArcs?.Count, model.ObjectStoryArcs?.Count);
            Assert.Equal(entity.Object.ObjectVolumes?.Count, model.ObjectVolumes?.Count);
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyObjectProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var entity = ObjectsMockingSetup.DoMockingSetupForObject();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyObjectProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var entity = ObjectsMockingSetup.DoMockingSetupForObject();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsObjectSearchProperties()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var model = ObjectsMockingSetup.DoMockingSetupForObjectModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var model = ObjectsMockingSetup.DoMockingSetupForObjectModel(1);
            var entity = ObjectsMockingSetup.DoMockingSetupForObject(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new ObjectMapper();
            var model = ObjectsMockingSetup.DoMockingSetupForObjectModel(1);
            var entity = ObjectsMockingSetup.DoMockingSetupForObject(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
