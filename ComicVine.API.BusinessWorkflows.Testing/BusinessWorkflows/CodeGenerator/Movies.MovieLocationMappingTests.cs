// <auto-generated>
// <copyright file="Movies.IMovieLocationRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieLocationsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Movies
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class MovieLocationsMockingSetup
    {
        public static Mock<IMovieLocationModel> DoMockingSetupForMovieLocationModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieLocationModel = new Mock<IMovieLocationModel>();
            // Mock Functions
            mockMovieLocationModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieLocationModel.Setup(m => m.Active).Returns(() => true);
            mockMovieLocationModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieLocationModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocationModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocationModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieLocationModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieLocationModel.Setup(m => m.Name).Returns(() => name);
            //mockMovieLocationModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieLocationModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieLocationModel.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieLocationModel.Setup(m => m.Movie).Returns(() => new MovieModel());
            mockMovieLocationModel.Setup(m => m.LocationId).Returns(() => 1);
            mockMovieLocationModel.Setup(m => m.Location).Returns(() => new LocationModel());
            // Associated Objects
            // <None>
            // Return
            return mockMovieLocationModel;
        }

        public static Mock<IMovieLocation> DoMockingSetupForMovieLocation(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieLocation = new Mock<IMovieLocation>();
            // Mock Functions
            mockMovieLocation.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieLocation.Setup(m => m.Active).Returns(() => true);
            mockMovieLocation.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieLocation.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocation.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocation.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieLocation.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieLocation.Setup(m => m.Name).Returns(() => name);
            //mockMovieLocation.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieLocation.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieLocation.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieLocation.Setup(m => m.Movie).Returns(() => new Movie());
            mockMovieLocation.Setup(m => m.LocationId).Returns(() => 1);
            mockMovieLocation.Setup(m => m.Location).Returns(() => new Location());
            // Associated Objects
            // <None>
            // Return
            return mockMovieLocation;
        }
    }

    public class MovieLocationMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<MovieLocationMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieLocationModel>()));
            var mockModel = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel(1);
            MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieLocationModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<MovieLocationMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieLocationModel>(), ref It.IsAny<IMovieLocation>()));
        //    var mockModel = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel(1);
        //    var mockEntity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(1);
        //    MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieLocationModel>(), ref It.IsAny<IMovieLocation>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieLocationMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IMovieLocation>()));
            var mockEntity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(1);
            MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IMovieLocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieLocationMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IMovieLocation>()));
            var mockEntity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(1);
            MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IMovieLocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieLocationMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IMovieLocation>()));
            var mockEntity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(1);
            MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IMovieLocation>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieLocationMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IMovieLocationModel>()));
            var mockModel = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel(1);
            MovieLocationMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IMovieLocationModel>()), Times.Once);
        }

        public static Mock<IMovieLocation> DoMockingSetupForMovieLocation(int idReturnValue = 0)
        {
            var mockMovieLocation = new Mock<IMovieLocation>();
            // Mock Functions
            mockMovieLocation.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieLocation.Setup(m => m.Active).Returns(() => true);
            mockMovieLocation.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieLocation.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocation.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieLocation.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieLocation.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockMovieLocation.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieLocation.Setup(m => m.Movie).Returns(() => new Movie());
            mockMovieLocation.Setup(m => m.LocationId).Returns(() => 1);
            mockMovieLocation.Setup(m => m.Location).Returns(() => new Location());
            // Associated Objects
            // <None>
            // Return
            return mockMovieLocation;
        }
    }

    public class MovieLocationsMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsMovieLocationProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var model = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, entity.MovieId);
            Assert.Equal(model.Object.LocationId, entity.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsMovieLocationProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var model = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel();
            // Act
            IMovieLocation existingEntity = new MovieLocation { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, existingEntity.MovieId);
            Assert.Equal(model.Object.LocationId, existingEntity.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsMovieLocationProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var entity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyMovieLocationProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var entity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.LocationId, model.LocationId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyMovieLocationProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var entity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsMovieLocationSearchProperties()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var model = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.MovieId, searchModel.MovieId);
            Assert.Equal(model.Object.Movie?.CustomKey, searchModel.MovieCustomKey);
            Assert.Equal(model.Object.Movie?.ApiDetailUrl, searchModel.MovieApiDetailUrl);
            Assert.Equal(model.Object.Movie?.SiteDetailUrl, searchModel.MovieSiteDetailUrl);
            Assert.Equal(model.Object.Movie?.Name, searchModel.MovieName);
            Assert.Equal(model.Object.Movie?.ShortDescription, searchModel.MovieShortDescription);
            Assert.Equal(model.Object.Movie?.Description, searchModel.MovieDescription);
            Assert.Equal(model.Object.LocationId, searchModel.LocationId);
            Assert.Equal(model.Object.Location?.CustomKey, searchModel.LocationCustomKey);
            Assert.Equal(model.Object.Location?.ApiDetailUrl, searchModel.LocationApiDetailUrl);
            Assert.Equal(model.Object.Location?.SiteDetailUrl, searchModel.LocationSiteDetailUrl);
            Assert.Equal(model.Object.Location?.Name, searchModel.LocationName);
            Assert.Equal(model.Object.Location?.ShortDescription, searchModel.LocationShortDescription);
            Assert.Equal(model.Object.Location?.Description, searchModel.LocationDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var model = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel(1);
            var entity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new MovieLocationMapper();
            var model = MovieLocationsMockingSetup.DoMockingSetupForMovieLocationModel(1);
            var entity = MovieLocationsMockingSetup.DoMockingSetupForMovieLocation(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
