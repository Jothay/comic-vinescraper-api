// <auto-generated>
// <copyright file="Teams.ITeamMemberRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamMembersRepository Class.</summary>
// <remarks>This file was autogenerated using BusinessWorkflowsTestingFileMaster.tt in ComicVine.API.BusinessWorkflows.Testing\BusinessWorkflows\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.BusinessWorkflows.Teams
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class TeamMembersMockingSetup
    {
        public static Mock<ITeamMemberModel> DoMockingSetupForTeamMemberModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeamMemberModel = new Mock<ITeamMemberModel>();
            // Mock Functions
            mockTeamMemberModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeamMemberModel.Setup(m => m.Active).Returns(() => true);
            mockTeamMemberModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeamMemberModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamMemberModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamMemberModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeamMemberModel.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockTeamMemberModel.Setup(m => m.TeamId).Returns(() => 1);
            mockTeamMemberModel.Setup(m => m.Team).Returns(() => new TeamModel());
            mockTeamMemberModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockTeamMemberModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            // Associated Objects
            // <None>
            // Return
            return mockTeamMemberModel;
        }

        public static Mock<ITeamMember> DoMockingSetupForTeamMember(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeamMember = new Mock<ITeamMember>();
            // Mock Functions
            mockTeamMember.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeamMember.Setup(m => m.Active).Returns(() => true);
            mockTeamMember.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeamMember.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamMember.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamMember.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeamMember.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockTeamMember.Setup(m => m.TeamId).Returns(() => 1);
            mockTeamMember.Setup(m => m.Team).Returns(() => new Team());
            mockTeamMember.Setup(m => m.CharacterId).Returns(() => 1);
            mockTeamMember.Setup(m => m.Character).Returns(() => new Character());
            // Associated Objects
            // <None>
            // Return
            return mockTeamMember;
        }

        public static Mock<ITeamMembersRepository> DoMockingSetupForRepository()
        {
            var mockTeamMembersRepository = new Mock<ITeamMembersRepository>();
            // Mock Functions
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<ITeamMember>>().Object);
            mockTeamMembersRepository.Setup(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ITeamMember>>().Object);
            mockTeamMembersRepository.Setup(m => m.Add(It.IsAny<ITeamMember>()));
            mockTeamMembersRepository.Setup(m => m.Remove(It.IsAny<ITeamMember>()));
            mockTeamMembersRepository.Setup(m => m.Deactivate(It.IsAny<ITeamMember>()));
            mockTeamMembersRepository.Setup(m => m.Update(It.IsAny<ITeamMember>()));
            // Return
            return mockTeamMembersRepository;
        }
    }

    public class TeamMembersBusinessWorkflowsTests
    {
        #region Read
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<TeamMemberModel>(person);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<TeamMemberModel>(person);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Search_Should_ReturnAListOfTeamMembers()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ITeamMemberSearchModel>();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockTeamMembersRepository.Verify(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Search_AsListing_Should_ReturnAListOfTeamMembersWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<ITeamMemberSearchModel>();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockTeamMembersRepository.Verify(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<ITeamMember>>().Object);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            var model = TeamMembersMockingSetup.DoMockingSetupForTeamMemberModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockTeamMembersRepository.Verify(m => m.Add(It.IsAny<ITeamMember>()), Times.Once);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var mockTeamMember = TeamMembersMockingSetup.DoMockingSetupForTeamMember(1);
            mockTeamMembersRepository.Setup(m => m.Search(It.IsAny<ITeamMemberSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<ITeamMember> { mockTeamMember.Object } );
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockTeamMember.Object);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            var model = TeamMembersMockingSetup.DoMockingSetupForTeamMemberModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockTeamMembersRepository.Verify(m => m.Add(It.IsAny<ITeamMember>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockTeamMember = TeamMembersMockingSetup.DoMockingSetupForTeamMember(1);
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockTeamMember.Object);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            var expectedName = "Stephen King (2)";
            var model = TeamMembersMockingSetup.DoMockingSetupForTeamMemberModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockTeamMember.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = TeamMembersMockingSetup.DoMockingSetupForTeamMember(1);
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            var model = TeamMembersMockingSetup.DoMockingSetupForTeamMemberModel(1);
            ITeamMemberModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockTeamMembersRepository.Verify(m => m.Deactivate(It.IsAny<ITeamMember>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockTeamMembersRepository.Verify(m => m.Deactivate(It.IsAny<ITeamMember>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockTeamMembersRepository.Verify(m => m.Remove(It.IsAny<ITeamMember>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            var mockTeamMembersMapper = new Mock<ITeamMemberMapper>();
            mockTeamMembersMapper.Setup(m => m.AreEqual(It.IsAny<ITeamMemberModel>(), It.IsAny<ITeamMember>())).Returns(() => true);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, mockTeamMembersMapper.Object);
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<ITeamMember>().Object);
            mockTeamMembersRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockTeamMembersRepository.Verify(m => m.Remove(It.IsAny<ITeamMember>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact][Trait("Category", "TeamMembers")]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockTeamMembersRepository = TeamMembersMockingSetup.DoMockingSetupForRepository();
            mockTeamMembersRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new TeamMembersBusinessWorkflow(mockTeamMembersRepository.Object, new TeamMemberMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
