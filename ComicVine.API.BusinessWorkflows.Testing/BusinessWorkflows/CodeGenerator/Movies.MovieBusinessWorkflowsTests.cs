// <auto-generated>
// <copyright file="Movies.IMovieRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MoviesRepository Class.</summary>
// <remarks>This file was autogenerated using BusinessWorkflowsTestingFileMaster.tt in ComicVine.API.BusinessWorkflows.Testing\BusinessWorkflows\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.BusinessWorkflows.Movies
{
    using System.Collections.Generic;
    using API.BusinessWorkflows;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;
    using Models;
    using Moq;
    using Xunit;

    public static class MoviesMockingSetup
    {
        public static Mock<IMovieModel> DoMockingSetupForMovieModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieModel = new Mock<IMovieModel>();
            // Mock Functions
            mockMovieModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieModel.Setup(m => m.Active).Returns(() => true);
            mockMovieModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieModel.Setup(m => m.UpdatedDate).Returns(() => null);
            mockMovieModel.Setup(m => m.Name).Returns(() => name);
            mockMovieModel.Setup(m => m.ShortDescription).Returns(() => "short");
            mockMovieModel.Setup(m => m.Description).Returns(() => "long");
            mockMovieModel.Setup(m => m.HasStaffReview).Returns(() => true);
            mockMovieModel.Setup(m => m.Distributor).Returns(() => "Distributor");
            mockMovieModel.Setup(m => m.BoxOfficeRevenue).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.TotalRevenue).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.Budget).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.Rating).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.ReleaseDate).Returns(() => new System.DateTime());
            mockMovieModel.Setup(m => m.RunTime).Returns(() => 1.25m);
            // Related Objects
            mockMovieModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockMovieModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            // Associated Objects
            mockMovieModel.Setup(m => m.MovieCharacters).Returns(() => new List<IMovieCharacterModel>());
            mockMovieModel.Setup(m => m.MovieConcepts).Returns(() => new List<IMovieConceptModel>());
            mockMovieModel.Setup(m => m.MovieLocations).Returns(() => new List<IMovieLocationModel>());
            mockMovieModel.Setup(m => m.MovieObjects).Returns(() => new List<IMovieObjectModel>());
            mockMovieModel.Setup(m => m.MovieProducers).Returns(() => new List<IMovieProducerModel>());
            mockMovieModel.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArcModel>());
            mockMovieModel.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudioModel>());
            mockMovieModel.Setup(m => m.MovieTeams).Returns(() => new List<IMovieTeamModel>());
            mockMovieModel.Setup(m => m.MovieWriters).Returns(() => new List<IMovieWriterModel>());
            // Return
            return mockMovieModel;
        }

        public static Mock<IMovie> DoMockingSetupForMovie(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovie = new Mock<IMovie>();
            // Mock Functions
            mockMovie.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovie.Setup(m => m.Active).Returns(() => true);
            mockMovie.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovie.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovie.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovie.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovie.Setup(m => m.UpdatedDate).Returns(() => null);
            mockMovie.Setup(m => m.Name).Returns(() => name);
            mockMovie.Setup(m => m.ShortDescription).Returns(() => "short");
            mockMovie.Setup(m => m.Description).Returns(() => "long");
            mockMovie.Setup(m => m.HasStaffReview).Returns(() => true);
            mockMovie.Setup(m => m.Distributor).Returns(() => "Distributor");
            mockMovie.Setup(m => m.BoxOfficeRevenue).Returns(() => 1.25m);
            mockMovie.Setup(m => m.TotalRevenue).Returns(() => 1.25m);
            mockMovie.Setup(m => m.Budget).Returns(() => 1.25m);
            mockMovie.Setup(m => m.Rating).Returns(() => 1.25m);
            mockMovie.Setup(m => m.ReleaseDate).Returns(() => new System.DateTime());
            mockMovie.Setup(m => m.RunTime).Returns(() => 1.25m);
            // Related Objects
            mockMovie.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockMovie.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockMovie.Setup(m => m.MovieCharacters).Returns(() => new List<IMovieCharacter>());
            mockMovie.Setup(m => m.MovieConcepts).Returns(() => new List<IMovieConcept>());
            mockMovie.Setup(m => m.MovieLocations).Returns(() => new List<IMovieLocation>());
            mockMovie.Setup(m => m.MovieObjects).Returns(() => new List<IMovieObject>());
            mockMovie.Setup(m => m.MovieProducers).Returns(() => new List<IMovieProducer>());
            mockMovie.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArc>());
            mockMovie.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudio>());
            mockMovie.Setup(m => m.MovieTeams).Returns(() => new List<IMovieTeam>());
            mockMovie.Setup(m => m.MovieWriters).Returns(() => new List<IMovieWriter>());
            // Return
            return mockMovie;
        }

        public static Mock<IMoviesRepository> DoMockingSetupForRepository()
        {
            var mockMoviesRepository = new Mock<IMoviesRepository>();
            // Mock Functions
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>()))
                .Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<string>()))
                .Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.List)
                .Returns(() => new Mock<List<IMovie>>().Object);
            mockMoviesRepository.Setup(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IMovie>>().Object);
            mockMoviesRepository.Setup(m => m.Add(It.IsAny<IMovie>()));
            mockMoviesRepository.Setup(m => m.Remove(It.IsAny<IMovie>()));
            mockMoviesRepository.Setup(m => m.Deactivate(It.IsAny<IMovie>()));
            mockMoviesRepository.Setup(m => m.Update(It.IsAny<IMovie>()));
            // Return
            return mockMoviesRepository;
        }
    }

    public class MoviesBusinessWorkflowsTests
    {
        #region Read
        [Fact]
        public void Verify_Get_ByID_Should_ReturnTheCorrectObjectType()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            // Act
            var person = businessWorkflow.Get(1);
            // Assert
            Assert.IsType<MovieModel>(person);
        }

        [Fact]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectObject()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            // Act
            var person = businessWorkflow.Get("KING-STEPHEN");
            // Assert
            Assert.IsType<MovieModel>(person);
        }

        [Fact]
        public void Verify_Search_Should_ReturnAListOfMovies()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IMovieSearchModel>();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object);
            // Assert
            mockMoviesRepository.Verify(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>()), Times.Once);
        }

        [Fact]
        public void Verify_Search_AsListing_Should_ReturnAListOfMoviesWithDataMatchingSearchParametersWithListingMapping()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var searchModel = new Mock<IMovieSearchModel>();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            // Act
            businessWorkflow.Search(searchModel.Object, true);
            // Assert
            mockMoviesRepository.Verify(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>()), Times.Once);
        }
        #endregion
        #region Create
        [Fact]
        public void Verify_Create_Should_AddANewEntityObjectToTheDatabase()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new Mock<List<IMovie>>().Object);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel();
            // Act
            try { businessWorkflow.Create(model.Object); } catch { /* Ignored */ }
            // Assert
            mockMoviesRepository.Verify(m => m.Add(It.IsAny<IMovie>()), Times.Once);
        }
        [Fact]
        public void Verify_Create_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var mockMovie = MoviesMockingSetup.DoMockingSetupForMovie(1);
            mockMoviesRepository.Setup(m => m.Search(It.IsAny<IMovieSearchModel>(), It.IsAny<bool>()))
                .Returns(() => new List<IMovie> { mockMovie.Object } );
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockMovie.Object);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel();
            // Act
            try { businessWorkflow.Create(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            mockMoviesRepository.Verify(m => m.Add(It.IsAny<IMovie>()), Times.Never);
        }
        #endregion
        #region Update
        [Fact]
        public void Verify_Update_Should_SetUpdatedDate()
        {
            // Arrange
            var mockMovie = MoviesMockingSetup.DoMockingSetupForMovie(1);
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => mockMovie.Object);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            var expectedName = "Stephen King (2)";
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel(1, expectedName);
            // Act
            businessWorkflow.Update(model.Object);
            // Assert
            mockMovie.Verify(m => m.UpdatedDate, Times.Once);
        }
        [Fact]
        public void Verify_Update_WithDuplicateData_Should_NotAddAndReturnOriginal()
        {
            // Arrange
            var entity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => entity.Object);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            IMovieModel result = null;
            // Act
            try { result = businessWorkflow.Update(model.Object); }
            catch { /* ignored, the Get call at the end doesn't work because don't get a real entity with id on it */ }
            // Assert
            Assert.NotNull(result);
            Assert.Equal("Stephen King", result.Name);
            Assert.Equal("/TEST/KING-STEPHEN", result.ApiDetailUrl);
            Assert.Null(result.UpdatedDate);
        }
        #endregion
        #region Deactivate
        [Fact]
        public void Verify_Deactivate_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate(1);
            // Assert
            mockMoviesRepository.Verify(m => m.Deactivate(It.IsAny<IMovie>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Deactivate("KING-STEPHEN");
            // Assert
            mockMoviesRepository.Verify(m => m.Deactivate(It.IsAny<IMovie>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Deactivate_ByID_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => null);
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate(1));
        }

        [Fact]
        public void Verify_Deactivate_ByKey_ANonExistingEntity_Should_ThrowAnInvalidOperationException()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            // Act/Assert
            Assert.Throws<System.InvalidOperationException>(() => businessWorkflow.Deactivate("TEST"));
        }
        #endregion
        #region Remove
        [Fact]
        public void Verify_Remove_ByID_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<int>())).Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove(1);
            // Assert
            mockMoviesRepository.Verify(m => m.Remove(It.IsAny<IMovie>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ByKey_Should_DeactivateTheObjectAndReturnTrue()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            var mockMoviesMapper = new Mock<IMovieMapper>();
            mockMoviesMapper.Setup(m => m.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>())).Returns(() => true);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, mockMoviesMapper.Object);
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => new Mock<IMovie>().Object);
            mockMoviesRepository.Setup(m => m.SaveChanges()).Returns(() => true);
            // Act
            var result = businessWorkflow.Remove("KING-STEPHEN");
            // Assert
            mockMoviesRepository.Verify(m => m.Remove(It.IsAny<IMovie>()), Times.Once);
            Assert.Equal(true, result);
        }

        [Fact]
        public void Verify_Remove_ANonExistingEntity_Should_ReturnTrue()
        {
            // Arrange
            var mockMoviesRepository = MoviesMockingSetup.DoMockingSetupForRepository();
            mockMoviesRepository.Setup(m => m.Get(It.IsAny<string>())).Returns(() => null);
            var businessWorkflow = new MoviesBusinessWorkflow(mockMoviesRepository.Object, new MovieMapper());
            // Act
            var result = businessWorkflow.Remove("DOESNT-EXIST");
            // Assert
            Assert.Equal(true, result);
        }
        #endregion
    }
}
