// <auto-generated>
// <copyright file="Locations.ILocationAppearedInIssueRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationAppearedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Locations
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class LocationAppearedInIssuesMockingSetup
    {
        public static Mock<ILocationAppearedInIssueModel> DoMockingSetupForLocationAppearedInIssueModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocationAppearedInIssueModel = new Mock<ILocationAppearedInIssueModel>();
            // Mock Functions
            mockLocationAppearedInIssueModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationAppearedInIssueModel.Setup(m => m.Active).Returns(() => true);
            mockLocationAppearedInIssueModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationAppearedInIssueModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssueModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssueModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationAppearedInIssueModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocationAppearedInIssueModel.Setup(m => m.Name).Returns(() => name);
            //mockLocationAppearedInIssueModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocationAppearedInIssueModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockLocationAppearedInIssueModel.Setup(m => m.LocationId).Returns(() => 1);
            mockLocationAppearedInIssueModel.Setup(m => m.Location).Returns(() => new LocationModel());
            mockLocationAppearedInIssueModel.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockLocationAppearedInIssueModel.Setup(m => m.AppearedInIssue).Returns(() => new IssueModel());
            // Associated Objects
            // <None>
            // Return
            return mockLocationAppearedInIssueModel;
        }

        public static Mock<ILocationAppearedInIssue> DoMockingSetupForLocationAppearedInIssue(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocationAppearedInIssue = new Mock<ILocationAppearedInIssue>();
            // Mock Functions
            mockLocationAppearedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationAppearedInIssue.Setup(m => m.Active).Returns(() => true);
            mockLocationAppearedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationAppearedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocationAppearedInIssue.Setup(m => m.Name).Returns(() => name);
            //mockLocationAppearedInIssue.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocationAppearedInIssue.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockLocationAppearedInIssue.Setup(m => m.LocationId).Returns(() => 1);
            mockLocationAppearedInIssue.Setup(m => m.Location).Returns(() => new Location());
            mockLocationAppearedInIssue.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockLocationAppearedInIssue.Setup(m => m.AppearedInIssue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockLocationAppearedInIssue;
        }
    }

    public class LocationAppearedInIssueMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<LocationAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationAppearedInIssueModel>()));
            var mockModel = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel(1);
            LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationAppearedInIssueModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<LocationAppearedInIssueMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationAppearedInIssueModel>(), ref It.IsAny<ILocationAppearedInIssue>()));
        //    var mockModel = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel(1);
        //    var mockEntity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(1);
        //    LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationAppearedInIssueModel>(), ref It.IsAny<ILocationAppearedInIssue>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ILocationAppearedInIssue>()));
            var mockEntity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(1);
            LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ILocationAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ILocationAppearedInIssue>()));
            var mockEntity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(1);
            LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ILocationAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ILocationAppearedInIssue>()));
            var mockEntity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(1);
            LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ILocationAppearedInIssue>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAppearedInIssueMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ILocationAppearedInIssueModel>()));
            var mockModel = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel(1);
            LocationAppearedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ILocationAppearedInIssueModel>()), Times.Once);
        }

        public static Mock<ILocationAppearedInIssue> DoMockingSetupForLocationAppearedInIssue(int idReturnValue = 0)
        {
            var mockLocationAppearedInIssue = new Mock<ILocationAppearedInIssue>();
            // Mock Functions
            mockLocationAppearedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationAppearedInIssue.Setup(m => m.Active).Returns(() => true);
            mockLocationAppearedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAppearedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationAppearedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            // <None>
            // Related Objects
            mockLocationAppearedInIssue.Setup(m => m.LocationId).Returns(() => 1);
            mockLocationAppearedInIssue.Setup(m => m.Location).Returns(() => new Location());
            mockLocationAppearedInIssue.Setup(m => m.AppearedInIssueId).Returns(() => 1);
            mockLocationAppearedInIssue.Setup(m => m.AppearedInIssue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockLocationAppearedInIssue;
        }
    }

    public class LocationAppearedInIssuesMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsLocationAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var model = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.LocationId, entity.LocationId);
            Assert.Equal(model.Object.AppearedInIssueId, entity.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsLocationAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var model = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel();
            // Act
            ILocationAppearedInIssue existingEntity = new LocationAppearedInIssue { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.LocationId, existingEntity.LocationId);
            Assert.Equal(model.Object.AppearedInIssueId, existingEntity.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsLocationAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var entity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyLocationAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var entity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyLocationAppearedInIssueProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var entity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            Assert.Equal(entity.Object.AppearedInIssueId, model.AppearedInIssueId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsLocationAppearedInIssueSearchProperties()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var model = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.LocationId, searchModel.LocationId);
            Assert.Equal(model.Object.Location?.CustomKey, searchModel.LocationCustomKey);
            Assert.Equal(model.Object.Location?.ApiDetailUrl, searchModel.LocationApiDetailUrl);
            Assert.Equal(model.Object.Location?.SiteDetailUrl, searchModel.LocationSiteDetailUrl);
            Assert.Equal(model.Object.Location?.Name, searchModel.LocationName);
            Assert.Equal(model.Object.Location?.ShortDescription, searchModel.LocationShortDescription);
            Assert.Equal(model.Object.Location?.Description, searchModel.LocationDescription);
            Assert.Equal(model.Object.AppearedInIssueId, searchModel.AppearedInIssueId);
            Assert.Equal(model.Object.AppearedInIssue?.CustomKey, searchModel.AppearedInIssueCustomKey);
            Assert.Equal(model.Object.AppearedInIssue?.ApiDetailUrl, searchModel.AppearedInIssueApiDetailUrl);
            Assert.Equal(model.Object.AppearedInIssue?.SiteDetailUrl, searchModel.AppearedInIssueSiteDetailUrl);
            Assert.Equal(model.Object.AppearedInIssue?.Name, searchModel.AppearedInIssueName);
            Assert.Equal(model.Object.AppearedInIssue?.ShortDescription, searchModel.AppearedInIssueShortDescription);
            Assert.Equal(model.Object.AppearedInIssue?.Description, searchModel.AppearedInIssueDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var model = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel(1);
            var entity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new LocationAppearedInIssueMapper();
            var model = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssueModel(1);
            var entity = LocationAppearedInIssuesMockingSetup.DoMockingSetupForLocationAppearedInIssue(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
