<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)ComicVine.API.DataModel\bin\Debug\ComicVine.API.DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ComicVine.API.CodeGenerator" #>
<#@ import namespace="ComicVine.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateRepositoryFile(string nameSpace, classInfo entityClass)
{
	//var hasProperties = false;
	var hasRelatedProperties = false;
	//var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.I<#= thisClassName #>Repository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the <#= thisClassNamePluralized #>Repository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.<#= nameSpace #>
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class <#= thisClassNamePluralized #>Repository : RepositoryBase, I<#= thisClassNamePluralized #>Repository
    {
        public <#= thisClassNamePluralized #>Repository(object context) : base(context) { }

        public void Add(I<#= thisClassName #> entity)
        {
            Context.<#= thisClassNamePluralized #>.Add((<#= thisClassName #>)entity);
        }

        public void Remove(I<#= thisClassName #> entity)
        {
            Context.<#= thisClassNamePluralized #>.Remove((<#= thisClassName #>)entity);
        }

        public void Deactivate(I<#= thisClassName #> entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(I<#= thisClassName #> entity)
        {
            Context.SetModified(entity);
        }

        public I<#= thisClassName #> Get(int id)
        {
            return Context.<#= thisClassNamePluralized #>.FirstOrDefault(r => r.Id == id);
        }

        public I<#= thisClassName #> Get(string key)
        {
            return Context.<#= thisClassNamePluralized #>.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<I<#= thisClassName #>> List => Context.<#= thisClassNamePluralized #>;

        public IEnumerable<dynamic> Search(I<#= thisClassName #>SearchModel searchModel, System.Func<I<#= thisClassName #>, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<I<#= thisClassName #>> Search(I<#= thisClassName #>SearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<I<#= thisClassName #>> SearchCommon(I<#= thisClassName #>SearchModel searchModel, bool requireActive)
        {
            return Context.<#= thisClassNamePluralized #>
                .FilterByBaseFilters(searchModel, requireActive)
<#+	if (baseClassNameNoShared.Contains("Nameable")) { #>
                .FilterByNameableBaseFilters(searchModel)
<#+	} // End If (baseClassNameNoShared.Contains("Nameable")) #>
<#+	if (hasRelatedProperties) { #>
<#+		foreach (var property in entityClass.properties) {
			if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
			if (IsIdentifierProperty(property)) { #>
                .FilterBy<#= property.name #>(searchModel.<#= property.name #>)
<#+				if (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) { #>
                .FilterBy<#= property.name.Replace("Id", "CustomKey").Replace("ID", "CustomKey") #>(searchModel.<#=property.name.Replace("Id", "CustomKey").Replace("ID", "CustomKey")#>)
<#+				} // End If (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) #>
<#+				if (property.name == "RequiredLevelId") { // Create a Min/Max #>
                .FilterByMinLevel(searchModel.MinLevel)
                .FilterByMaxLevel(searchModel.MaxLevel)
<#+				} // End If (property.name == "RequiredLevelId") #>
<#+			} // End If (IsIdentifierProperty(property)) #>
<#+			if (property.isNameable) { #>
                .FilterBy<#= property.name #>ApiDetailUrl(searchModel.<#= property.name #>ApiDetailUrl)
                .FilterBy<#= property.name #>SiteDetailUrl(searchModel.<#= property.name #>SiteDetailUrl)
                .FilterBy<#= property.name #>Name(searchModel.<#= property.name #>Name)
                .FilterBy<#= property.name #>ShortDescription(searchModel.<#= property.name #>ShortDescription)
                .FilterBy<#= property.name #>Description(searchModel.<#= property.name #>Description)
<#+			} // End If (property.isNameable) #>
<#+			if (property.isContactable) { #>
                .FilterBy<#= property.name #>Phone(searchModel.<#= property.name #>Phone)
                .FilterBy<#= property.name #>Fax(searchModel.<#= property.name #>Fax)
                .FilterBy<#= property.name #>Email(searchModel.<#= property.name #>Email)
<#+			} // End If (property.isContactable) #>
<#+		} // End ForEach Loop (var property in entityClass.properties) // Related #>
<#+	} // End If (hasRelatedProperties) #>
<#+	foreach (var property in entityClass.properties) {
		if (!property.isFilterable) { continue; }
		var filterNameTitle = string.IsNullOrWhiteSpace(property.filterName) ? property.name : property.filterName;
		var filterName = string.IsNullOrWhiteSpace(property.filterName) ? property.name.ToLower() : property.filterName.ToLower(); #>
<#+		if (property.type == "string") { #>
                .FilterBy<#= filterNameTitle #>(searchModel.<#= filterNameTitle #>)
<#+		} #>
<#+		if (property.type == "int" || property.type == "int?" || property.type == "bool" || property.type == "bool?" || property.type == "decimal" || property.type == "decimal?") { #>
                .FilterBy<#= filterNameTitle #>(searchModel.<#= filterNameTitle #>)
<#+		} #>
<#+	} // End ForEach Loop (var property in entityClass.properties) // Searchable #>
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class <#= thisClassName #>SearchExtensions
    {
<#+	if (hasRelatedProperties) { #>
<#+		foreach (var property in entityClass.properties) {
			if (!IsRelatedObjectProperty(property, out propertyType)) { continue; }
			if (IsIdentifierProperty(property)) { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>(this IQueryable<<#= thisClassName #>> query, int? id)
        {
            if (!id.HasValue) { return query; }
            return query.Where(sv => sv.<#= property.name #> == id);
        }

<#+				if (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name.Replace("Id", "CustomKey").Replace("ID", "CustomKey") #>(this IQueryable<<#= thisClassName #>> query, string key)
        {
            if (string.IsNullOrWhiteSpace(key)) { return query; }
            var search = key.ToLower();
            return query.Where(i => i.<#= property.name.Replace("Id", "").Replace("ID", "") #> != null && i.<#= property.name.Replace("Id", ".CustomKey").Replace("ID", ".CustomKey") #>.ToLower().Equals(search));
        }

<#+				} // End If (entityClass.properties.Any(p => p.name == property.name.Replace("Id", "").Replace("ID", ""))) #>
<#+				if (property.name == "RequiredLevelId") { // Create a Min/Max #>
        public static IQueryable<<#= thisClassName #>> FilterByMinLevel(this IQueryable<<#= thisClassName #>> query, int? min)
        {
            if (!min.HasValue) { return query; }
            return query.Where(l => l.RequiredLevel != null && l.RequiredLevel.Level1 <= min.Value);
        }

        public static IQueryable<<#= thisClassName #>> FilterByMaxLevel(this IQueryable<<#= thisClassName #>> query, int? max)
        {
            if (!max.HasValue) { return query; }
            return query.Where(l => l.RequiredLevel != null && l.RequiredLevel.Level1 >= max.Value);
        }

<#+				} // End If (property.name == "RequiredLevelId") #>
<#+			} // End If (IsIdentifierProperty(property)) #>
<#+			if (property.isNameable) { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>ApiDetailUrl(this IQueryable<<#= thisClassName #>> query, string url)
        {
            if (string.IsNullOrWhiteSpace(url)) { return query; }
            var search = url.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.ApiDetailUrl.ToLower().Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>SiteDetailUrl(this IQueryable<<#= thisClassName #>> query, string url)
        {
            if (string.IsNullOrWhiteSpace(url)) { return query; }
            var search = url.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.SiteDetailUrl.ToLower().Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>Name(this IQueryable<<#= thisClassName #>> query, string name)
        {
            if (string.IsNullOrWhiteSpace(name)) { return query; }
            var search = name.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.Name.ToLower().Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>ShortDescription(this IQueryable<<#= thisClassName #>> query, string description)
        {
            if (string.IsNullOrWhiteSpace(description)) { return query; }
            var search = description.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.ShortDescription.ToLower().Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>Description(this IQueryable<<#= thisClassName #>> query, string description)
        {
            if (string.IsNullOrWhiteSpace(description)) { return query; }
            var search = description.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.Description.ToLower().Contains(search));
        }

<#+			} // End If (property.isNameable) #>
<#+			if (property.isContactable) { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>Phone(this IQueryable<<#= thisClassName #>> query, string phone)
        {
            if (string.IsNullOrWhiteSpace(phone)) { return query; }
            var search = SharedSearchExtensions.CleanPhoneForComparison(phone);
            return query.Where(i => i.<#= property.name #> != null && SharedSearchExtensions.CleanPhoneForComparison(i.<#= property.name #>.Phone).Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>Fax(this IQueryable<<#= thisClassName #>> query, string fax)
        {
            if (string.IsNullOrWhiteSpace(fax)) { return query; }
            var search = SharedSearchExtensions.CleanPhoneForComparison(fax);
            return query.Where(i => i.<#= property.name #> != null && SharedSearchExtensions.CleanPhoneForComparison(i.<#= property.name #>.Fax).Contains(search));
        }

        public static IQueryable<<#= thisClassName #>> FilterBy<#= property.name #>Email(this IQueryable<<#= thisClassName #>> query, string email)
        {
            if (string.IsNullOrWhiteSpace(email)) { return query; }
            var search = email.ToLower();
            return query.Where(i => i.<#= property.name #> != null && i.<#= property.name #>.Email.ToLower().Contains(search));
        }

<#+			} // End If (property.isContactable) #>
<#+		} // End ForEach Loop (var property in entityClass.properties) // Related #>
<#+	} // End If (hasRelatedProperties) #>
<#+	foreach (var property in entityClass.properties) {
		if (!property.isFilterable) { continue; }
		var filterNameTitle = string.IsNullOrWhiteSpace(property.filterName) ? property.name : property.filterName;
		var filterName = string.IsNullOrWhiteSpace(property.filterName) ? property.name.ToLower() : property.filterName.ToLower(); #>
<#+		if (property.type == "string") { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= filterNameTitle #>(this IQueryable<<#= thisClassName #>> query, string <#= filterName #>)
        {
            if (string.IsNullOrWhiteSpace(<#= filterName #>)) { return query; }
            var search = <#= filterName #>.ToLower();
            return query.Where(i => i.<#= property.name #>.ToLower().Contains(search));
        }

<#+		} #>
<#+		if (property.type == "int" || property.type == "int?" || property.type == "bool" || property.type == "bool?" || property.type == "decimal" || property.type == "decimal?") { #>
        public static IQueryable<<#= thisClassName #>> FilterBy<#= filterNameTitle #>(this IQueryable<<#= thisClassName #>> query, <#= property.type.Replace("?", "")#>? <#= filterName #>)
        {
            if (!<#= filterName #>.HasValue) { return query; }
            return query.Where(i => i.<#= property.name #> == <#= filterName #>);
        }

<#+		} #>
<#+	} // End ForEach Loop (var property in entityClass.properties) // Searchable #>
    } // end <#= thisClassName #>SearchExtensions
}
<#+
} // End Function GenerateInterfaceFile
#>