// <auto-generated>
// <copyright file="Movies.IMovieRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MoviesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class MoviesRepository : RepositoryBase, IMoviesRepository
    {
        public MoviesRepository(object context) : base(context) { }

        public void Add(IMovie entity)
        {
            Context.Movies.Add((Movie)entity);
        }

        public void Remove(IMovie entity)
        {
            Context.Movies.Remove((Movie)entity);
        }

        public void Deactivate(IMovie entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IMovie entity)
        {
            Context.SetModified(entity);
        }

        public IMovie Get(int id)
        {
            return Context.Movies.FirstOrDefault(r => r.Id == id);
        }

        public IMovie Get(string key)
        {
            return Context.Movies.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IMovie> List => Context.Movies;

        public IEnumerable<dynamic> Search(IMovieSearchModel searchModel, System.Func<IMovie, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IMovie> Search(IMovieSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IMovie> SearchCommon(IMovieSearchModel searchModel, bool requireActive)
        {
            return Context.Movies
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByHasStaffReview(searchModel.HasStaffReview)
                .FilterByDistributor(searchModel.Distributor)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class MovieSearchExtensions
    {
        public static IQueryable<Movie> FilterByHasStaffReview(this IQueryable<Movie> query, bool? hasstaffreview)
        {
            if (!hasstaffreview.HasValue) { return query; }
            return query.Where(i => i.HasStaffReview == hasstaffreview);
        }

        public static IQueryable<Movie> FilterByDistributor(this IQueryable<Movie> query, string distributor)
        {
            if (string.IsNullOrWhiteSpace(distributor)) { return query; }
            var search = distributor.ToLower();
            return query.Where(i => i.Distributor.ToLower().Contains(search));
        }

    } // end MovieSearchExtensions
}
