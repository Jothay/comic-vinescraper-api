// <auto-generated>
// <copyright file="Volumes.IVolumeAliasRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumeAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Volumes
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class VolumeAliasesRepository : RepositoryBase, IVolumeAliasesRepository
    {
        public VolumeAliasesRepository(object context) : base(context) { }

        public void Add(IVolumeAlias entity)
        {
            Context.VolumeAliases.Add((VolumeAlias)entity);
        }

        public void Remove(IVolumeAlias entity)
        {
            Context.VolumeAliases.Remove((VolumeAlias)entity);
        }

        public void Deactivate(IVolumeAlias entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IVolumeAlias entity)
        {
            Context.SetModified(entity);
        }

        public IVolumeAlias Get(int id)
        {
            return Context.VolumeAliases.FirstOrDefault(r => r.Id == id);
        }

        public IVolumeAlias Get(string key)
        {
            return Context.VolumeAliases.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IVolumeAlias> List => Context.VolumeAliases;

        public IEnumerable<dynamic> Search(IVolumeAliasSearchModel searchModel, System.Func<IVolumeAlias, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IVolumeAlias> Search(IVolumeAliasSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IVolumeAlias> SearchCommon(IVolumeAliasSearchModel searchModel, bool requireActive)
        {
            return Context.VolumeAliases
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class VolumeAliasSearchExtensions
    {
    } // end VolumeAliasSearchExtensions
}
