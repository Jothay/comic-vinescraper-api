<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)ComicVine.API.DataModel\bin\Debug\ComicVine.API.DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ComicVine.API.CodeGenerator" #>
<#@ import namespace="ComicVine.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateBusinessWorkflowFile(string nameSpace, classInfo entityClass)
{
	//var hasProperties = false;
	//var hasRelatedProperties = false;
	//var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNameLowerFirst = Char.ToLowerInvariant(thisClassName[0]) + thisClassName.Substring(1);
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var thisClassNamePluralizedLowerFirst = Char.ToLowerInvariant(thisClassNamePluralized[0]) + thisClassNamePluralized.Substring(1);
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	//string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.I<#= thisClassName #>Model.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the <#= thisClassName #> model interfaces.</summary>
// <remarks>This file was autogenerated using InterfaceFileMaster.tt in ComicVine.API\Interfaces\00.AutoGenerated</remarks>
// </auto-generated>
namespace ComicVine.API.BusinessWorkflows//.<#= nameSpace #>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Interfaces.BusinessWorkflows;
    using Interfaces.DataModels;
    using Interfaces.Mappers;
    using Interfaces.Models;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class <#= thisClassNamePluralized #>BusinessWorkflow : I<#= thisClassNamePluralized #>BusinessWorkflow
    {
        public <#= thisClassNamePluralized #>BusinessWorkflow(I<#= thisClassNamePluralized #>Repository <#= thisClassNamePluralizedLowerFirst #>Repository, I<#= thisClassName #>Mapper <#= thisClassNameLowerFirst #>Mapper)
        {
            <#= thisClassNamePluralized #>Repository = <#= thisClassNamePluralizedLowerFirst #>Repository;
            <#= thisClassName #>Mapper = <#= thisClassNameLowerFirst #>Mapper;
        }

        #region Private Variables
        private I<#= thisClassName #>Mapper <#= thisClassName #>Mapper { get; }
        private I<#= thisClassNamePluralized #>Repository <#= thisClassNamePluralized #>Repository { get; }
        #endregion
        #region Read
        public I<#= thisClassName #>Model Get(int id)
        {
            BusinessWorkflowBase.ValidateRequiredID(id);
            return <#= thisClassName #>Mapper.MapToModel(<#= thisClassNamePluralized #>Repository.Get(id));
        }

        public I<#= thisClassName #>Model Get(string key)
        {
            BusinessWorkflowBase.ValidateRequiredKey(key);
            return <#= thisClassName #>Mapper.MapToModel(<#= thisClassNamePluralized #>Repository.Get(key));
        }

        public List<I<#= thisClassName #>Model> Search(I<#= thisClassName #>SearchModel searchModel, bool asListing = false)
        {
            var results = <#= thisClassNamePluralized #>Repository.Search(searchModel);
            return asListing
                ? results.Select(<#= thisClassName #>Mapper.MapToModelListing).ToList()
                : results.Select(<#= thisClassName #>Mapper.MapToModelLite).ToList();
        }
        #endregion
        #region Create
        public I<#= thisClassName #>Model Create(I<#= thisClassName #>Model model)
        {
            // Validate model
            BusinessWorkflowBase.ValidateIDIsNull(model.Id);
            //BusinessWorkflowBase.ValidateRequiredString(model.Name, nameof(model.Name));
            // Search for an Existing Record (Don't allow Duplicates
            var results = Search(<#= thisClassName #>Mapper.MapToSearchModel(model));
            if (results.Any()) { return results.First(); } // Return the first that matches
            // Map model to a new entity
            var newEntity = <#= thisClassName #>Mapper.MapToEntity(model);
            newEntity.CreatedDate = BusinessWorkflowBase.GenDateTime;
            newEntity.UpdatedDate = null;
            newEntity.Active = true;
            // Add it
            <#= thisClassNamePluralized #>Repository.Add(newEntity);
            // Try to Save Changes
            <#= thisClassNamePluralized #>Repository.SaveChanges();
            // Return the new value
            return Get(newEntity.Id);
        }
        #endregion
        #region Update
        public I<#= thisClassName #>Model Update(I<#= thisClassName #>Model model)
        {
            // Validate model
            BusinessWorkflowBase.ValidateRequiredNullableID(model.Id);
            //BusinessWorkflowBase.ValidateRequiredString(model.Name, nameof(model.Name));
            // Find existing entity
            // ReSharper disable once PossibleInvalidOperationException
            var existingEntity = <#= thisClassNamePluralized #>Repository.Get(model.Id.Value);
            // Check if we would be applying identical information, if we are, just return the original
            // ReSharper disable once SuspiciousTypeConversion.Global
            if (<#= thisClassName #>Mapper.AreEqual(model, existingEntity))
            {
                return <#= thisClassName #>Mapper.MapToModel(existingEntity);
            }
            // Map model to an existing entity
            <#= thisClassName #>Mapper.MapToEntity(model, ref existingEntity);
            existingEntity.UpdatedDate = BusinessWorkflowBase.GenDateTime;
            // Update it
            <#= thisClassNamePluralized #>Repository.Update(<#= thisClassName #>Mapper.MapToEntity(model));
            // Try to Save Changes
            <#= thisClassNamePluralized #>Repository.SaveChanges();
            // Return the new value
            return Get(existingEntity.Id);
        }
        #endregion
        #region Deactivate
        public bool Deactivate(int id)
        {
            BusinessWorkflowBase.ValidateRequiredID(id);
            // Find existing Entity
            var existingEntity = <#= thisClassNamePluralized #>Repository.Get(id);
            if (existingEntity == null)
            {
                throw new InvalidOperationException($"Could not find an entity with id {id} to deactivate it");
            }
            // Do the Deactivate
            return Deactivate(existingEntity);
        }
        public bool Deactivate(string key)
        {
            BusinessWorkflowBase.ValidateRequiredKey(key);
            // Find existing Entity
            var existingEntity = <#= thisClassNamePluralized #>Repository.Get(key);
            if (existingEntity == null)
            {
                throw new InvalidOperationException($"Could not find an entity with key {key} to deactivate it");
            }
            // Do the Deactivate
            return Deactivate(existingEntity);
        }
        protected bool Deactivate(I<#= thisClassName #> entity)
        {
            // Deactivate it
            <#= thisClassNamePluralized #>Repository.Deactivate(entity);
            // Try to Save Changes
            <#= thisClassNamePluralized #>Repository.SaveChanges();
            // Finished!
            return true;
        }
        #endregion
        #region Remove
        public bool Remove(int id)
        {
            BusinessWorkflowBase.ValidateRequiredID(id);
            // Find existing Entity
            var existingEntity = <#= thisClassNamePluralized #>Repository.Get(id);
            // Do the Remove
            return Remove(existingEntity);
        }
        public bool Remove(string key)
        {
            BusinessWorkflowBase.ValidateRequiredKey(key);
            // Find existing Entity
            var existingEntity = <#= thisClassNamePluralized #>Repository.Get(key);
            // Do the Remove
            return Remove(existingEntity);
        }
        protected bool Remove(I<#= thisClassName #> entity)
        {
            if (entity == null) { return true; } // No entity found to remove, consider it passed
            // Remove it
            <#= thisClassNamePluralized #>Repository.Remove(entity);
            // Try to Save Changes
            <#= thisClassNamePluralized #>Repository.SaveChanges();
            // Finished!
            return true;
        }
        #endregion
    }
}
<#+
} // End Function GenerateInterfaceFile
#>