// <auto-generated>
// <copyright file="Movies.IMovieProducerRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieProducersRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Movies
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class MovieProducersMockingSetup
    {
        public static Mock<IMovieProducerModel> DoMockingSetupForMovieProducerModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieProducerModel = new Mock<IMovieProducerModel>();
            // Mock Functions
            mockMovieProducerModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieProducerModel.Setup(m => m.Active).Returns(() => true);
            mockMovieProducerModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieProducerModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieProducerModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieProducerModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieProducerModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieProducerModel.Setup(m => m.Name).Returns(() => name);
            //mockMovieProducerModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieProducerModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieProducerModel.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieProducerModel.Setup(m => m.Movie).Returns(() => new MovieModel());
            mockMovieProducerModel.Setup(m => m.ProducerId).Returns(() => 1);
            mockMovieProducerModel.Setup(m => m.Producer).Returns(() => new PersonModel());
            // Associated Objects
            // <None>
            // Return
            return mockMovieProducerModel;
        }

        public static Mock<IMovieProducer> DoMockingSetupForMovieProducer(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieProducer = new Mock<IMovieProducer>();
            // Mock Functions
            mockMovieProducer.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieProducer.Setup(m => m.Active).Returns(() => true);
            mockMovieProducer.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieProducer.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieProducer.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieProducer.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieProducer.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieProducer.Setup(m => m.Name).Returns(() => name);
            //mockMovieProducer.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieProducer.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieProducer.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieProducer.Setup(m => m.Movie).Returns(() => new Movie());
            mockMovieProducer.Setup(m => m.ProducerId).Returns(() => 1);
            mockMovieProducer.Setup(m => m.Producer).Returns(() => new Person());
            // Associated Objects
            // <None>
            // Return
            return mockMovieProducer;
        }
    }

    public class MovieProducerMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieProducerModel>()));
            var mockModel = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieProducerModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<MovieProducerMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieProducerModel>(), ref It.IsAny<IMovieProducer>()));
        //    var mockModel = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
        //    var mockEntity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
        //    MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieProducerModel>(), ref It.IsAny<IMovieProducer>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IMovieProducer>()));
            var mockEntity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IMovieProducer>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IMovieProducer>()));
            var mockEntity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IMovieProducer>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IMovieProducer>()));
            var mockEntity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IMovieProducer>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IMovieProducerModel>()));
            var mockModel = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IMovieProducerModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<MovieProducerMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IMovieProducerModel>(), It.IsAny<IMovieProducer>()));
            MovieProducerMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
            var mockEntity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IMovieProducerModel>(), It.IsAny<IMovieProducer>()), Times.Once);
        }
    }

    public class MovieProducersMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsMovieProducerProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var model = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, entity.MovieId);
            Assert.Equal(model.Object.ProducerId, entity.ProducerId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsMovieProducerProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var model = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel();
            // Act
            IMovieProducer existingEntity = new MovieProducer { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, existingEntity.MovieId);
            Assert.Equal(model.Object.ProducerId, existingEntity.ProducerId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsMovieProducerProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var entity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.ProducerId, model.ProducerId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyMovieProducerProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var entity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.ProducerId, model.ProducerId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyMovieProducerProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var entity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.ProducerId, model.ProducerId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsMovieProducerSearchProperties()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var model = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.MovieId, searchModel.MovieId);
            Assert.Equal(model.Object.Movie?.CustomKey, searchModel.MovieCustomKey);
            Assert.Equal(model.Object.Movie?.ApiDetailUrl, searchModel.MovieApiDetailUrl);
            Assert.Equal(model.Object.Movie?.SiteDetailUrl, searchModel.MovieSiteDetailUrl);
            Assert.Equal(model.Object.Movie?.Name, searchModel.MovieName);
            Assert.Equal(model.Object.Movie?.ShortDescription, searchModel.MovieShortDescription);
            Assert.Equal(model.Object.Movie?.Description, searchModel.MovieDescription);
            Assert.Equal(model.Object.ProducerId, searchModel.ProducerId);
            Assert.Equal(model.Object.Producer?.CustomKey, searchModel.ProducerCustomKey);
            Assert.Equal(model.Object.Producer?.ApiDetailUrl, searchModel.ProducerApiDetailUrl);
            Assert.Equal(model.Object.Producer?.SiteDetailUrl, searchModel.ProducerSiteDetailUrl);
            Assert.Equal(model.Object.Producer?.Name, searchModel.ProducerName);
            Assert.Equal(model.Object.Producer?.ShortDescription, searchModel.ProducerShortDescription);
            Assert.Equal(model.Object.Producer?.Description, searchModel.ProducerDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var model = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
            var entity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new MovieProducerMapper();
            var model = MovieProducersMockingSetup.DoMockingSetupForMovieProducerModel(1);
            var entity = MovieProducersMockingSetup.DoMockingSetupForMovieProducer(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
