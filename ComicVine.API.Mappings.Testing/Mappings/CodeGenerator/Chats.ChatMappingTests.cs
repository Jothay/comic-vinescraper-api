// <auto-generated>
// <copyright file="Chats.IChatRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ChatsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Chats
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class ChatsMockingSetup
    {
        public static Mock<IChatModel> DoMockingSetupForChatModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockChatModel = new Mock<IChatModel>();
            // Mock Functions
            mockChatModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockChatModel.Setup(m => m.Active).Returns(() => true);
            mockChatModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockChatModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockChatModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockChatModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockChatModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockChatModel.Setup(m => m.Name).Returns(() => name);
            //mockChatModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockChatModel.Setup(m => m.Description).Returns(() => "long");
            mockChatModel.Setup(m => m.ChannelName).Returns(() => "ChannelName");
            mockChatModel.Setup(m => m.PasswordHash).Returns(() => "PasswordHash");
            // Related Objects
            mockChatModel.Setup(m => m.ImageFileId).Returns(() => 1);
            mockChatModel.Setup(m => m.ImageFile).Returns(() => new ImageFileModel());
            // Associated Objects
            // <None>
            // Return
            return mockChatModel;
        }

        public static Mock<IChat> DoMockingSetupForChat(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockChat = new Mock<IChat>();
            // Mock Functions
            mockChat.Setup(m => m.Id).Returns(() => idReturnValue);
            mockChat.Setup(m => m.Active).Returns(() => true);
            mockChat.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockChat.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockChat.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockChat.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockChat.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockChat.Setup(m => m.Name).Returns(() => name);
            //mockChat.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockChat.Setup(m => m.Description).Returns(() => "long");
            mockChat.Setup(m => m.ChannelName).Returns(() => "ChannelName");
            mockChat.Setup(m => m.PasswordHash).Returns(() => "PasswordHash");
            // Related Objects
            mockChat.Setup(m => m.ImageFileId).Returns(() => 1);
            mockChat.Setup(m => m.ImageFile).Returns(() => new ImageFile());
            // Associated Objects
            // <None>
            // Return
            return mockChat;
        }
    }

    public class ChatMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IChatModel>()));
            var mockModel = ChatsMockingSetup.DoMockingSetupForChatModel(1);
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IChatModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<ChatMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IChatModel>(), ref It.IsAny<IChat>()));
        //    var mockModel = ChatsMockingSetup.DoMockingSetupForChatModel(1);
        //    var mockEntity = ChatsMockingSetup.DoMockingSetupForChat(1);
        //    ChatMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IChatModel>(), ref It.IsAny<IChat>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IChat>()));
            var mockEntity = ChatsMockingSetup.DoMockingSetupForChat(1);
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IChat>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IChat>()));
            var mockEntity = ChatsMockingSetup.DoMockingSetupForChat(1);
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IChat>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IChat>()));
            var mockEntity = ChatsMockingSetup.DoMockingSetupForChat(1);
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IChat>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IChatModel>()));
            var mockModel = ChatsMockingSetup.DoMockingSetupForChatModel(1);
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IChatModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<ChatMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IChatModel>(), It.IsAny<IChat>()));
            ChatMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = ChatsMockingSetup.DoMockingSetupForChatModel(1);
            var mockEntity = ChatsMockingSetup.DoMockingSetupForChat(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IChatModel>(), It.IsAny<IChat>()), Times.Once);
        }
    }

    public class ChatsMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsChatProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var model = ChatsMockingSetup.DoMockingSetupForChatModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.ChannelName, entity.ChannelName);
            Assert.Equal(model.Object.PasswordHash, entity.PasswordHash);
            // Related Objects
            Assert.Equal(model.Object.ImageFileId, entity.ImageFileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsChatProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var model = ChatsMockingSetup.DoMockingSetupForChatModel();
            // Act
            IChat existingEntity = new Chat { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.ChannelName, existingEntity.ChannelName);
            Assert.Equal(model.Object.PasswordHash, existingEntity.PasswordHash);
            // Related Objects
            Assert.Equal(model.Object.ImageFileId, existingEntity.ImageFileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsChatProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var entity = ChatsMockingSetup.DoMockingSetupForChat();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.ChannelName, model.ChannelName);
            Assert.Equal(entity.Object.PasswordHash, model.PasswordHash);
            // Related Objects
            Assert.Equal(entity.Object.ImageFileId, model.ImageFileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyChatProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var entity = ChatsMockingSetup.DoMockingSetupForChat();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.ChannelName, model.ChannelName);
            Assert.Equal(entity.Object.PasswordHash, model.PasswordHash);
            // Related Objects
            Assert.Equal(entity.Object.ImageFileId, model.ImageFileId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyChatProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var entity = ChatsMockingSetup.DoMockingSetupForChat();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.ChannelName, model.ChannelName);
            Assert.Equal(entity.Object.PasswordHash, model.PasswordHash);
            // Related Objects
            Assert.Equal(entity.Object.ImageFileId, model.ImageFileId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsChatSearchProperties()
        {
            // Arrange
            var mapper = new ChatMapper();
            var model = ChatsMockingSetup.DoMockingSetupForChatModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.ImageFileId, searchModel.ImageFileId);
            Assert.Equal(model.Object.ImageFile?.CustomKey, searchModel.ImageFileCustomKey);
            Assert.Equal(model.Object.ImageFile?.ApiDetailUrl, searchModel.ImageFileApiDetailUrl);
            Assert.Equal(model.Object.ImageFile?.SiteDetailUrl, searchModel.ImageFileSiteDetailUrl);
            Assert.Equal(model.Object.ImageFile?.Name, searchModel.ImageFileName);
            Assert.Equal(model.Object.ImageFile?.ShortDescription, searchModel.ImageFileShortDescription);
            Assert.Equal(model.Object.ImageFile?.Description, searchModel.ImageFileDescription);
            Assert.Equal(model.Object.ChannelName, searchModel.ChannelName);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new ChatMapper();
            var model = ChatsMockingSetup.DoMockingSetupForChatModel(1);
            var entity = ChatsMockingSetup.DoMockingSetupForChat(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new ChatMapper();
            var model = ChatsMockingSetup.DoMockingSetupForChatModel(1);
            var entity = ChatsMockingSetup.DoMockingSetupForChat(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
