// <auto-generated>
// <copyright file="Teams.ITeamRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Teams
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class TeamsMockingSetup
    {
        public static Mock<ITeamModel> DoMockingSetupForTeamModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeamModel = new Mock<ITeamModel>();
            // Mock Functions
            mockTeamModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeamModel.Setup(m => m.Active).Returns(() => true);
            mockTeamModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeamModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeamModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockTeamModel.Setup(m => m.Name).Returns(() => name);
            //mockTeamModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockTeamModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockTeamModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockTeamModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockTeamModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockTeamModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockTeamModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockTeamModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            mockTeamModel.Setup(m => m.TeamAliases).Returns(() => new List<ITeamAliasModel>());
            mockTeamModel.Setup(m => m.TeamCharacterEnemies).Returns(() => new List<ITeamCharacterEnemyModel>());
            mockTeamModel.Setup(m => m.TeamCharacterFriends).Returns(() => new List<ITeamCharacterFriendModel>());
            mockTeamModel.Setup(m => m.TeamIssuesAppearedIn).Returns(() => new List<ITeamAppearedInIssueModel>());
            mockTeamModel.Setup(m => m.TeamIssuesDisbandedIn).Returns(() => new List<ITeamDisbandedInIssueModel>());
            mockTeamModel.Setup(m => m.TeamIssues).Returns(() => new List<ITeamIssueModel>());
            mockTeamModel.Setup(m => m.TeamMembers).Returns(() => new List<ITeamMemberModel>());
            mockTeamModel.Setup(m => m.TeamMovies).Returns(() => new List<ITeamMovieModel>());
            mockTeamModel.Setup(m => m.TeamStoryArcs).Returns(() => new List<ITeamStoryArcModel>());
            mockTeamModel.Setup(m => m.TeamVolumes).Returns(() => new List<ITeamVolumeModel>());
            // Return
            return mockTeamModel;
        }

        public static Mock<ITeam> DoMockingSetupForTeam(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeam = new Mock<ITeam>();
            // Mock Functions
            mockTeam.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeam.Setup(m => m.Active).Returns(() => true);
            mockTeam.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeam.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeam.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeam.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeam.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockTeam.Setup(m => m.Name).Returns(() => name);
            //mockTeam.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockTeam.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockTeam.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockTeam.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockTeam.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockTeam.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockTeam.Setup(m => m.PublisherId).Returns(() => 1);
            mockTeam.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            mockTeam.Setup(m => m.TeamAliases).Returns(() => new List<ITeamAlias>());
            mockTeam.Setup(m => m.TeamCharacterEnemies).Returns(() => new List<ITeamCharacterEnemy>());
            mockTeam.Setup(m => m.TeamCharacterFriends).Returns(() => new List<ITeamCharacterFriend>());
            mockTeam.Setup(m => m.TeamIssuesAppearedIn).Returns(() => new List<ITeamAppearedInIssue>());
            mockTeam.Setup(m => m.TeamIssuesDisbandedIn).Returns(() => new List<ITeamDisbandedInIssue>());
            mockTeam.Setup(m => m.TeamIssues).Returns(() => new List<ITeamIssue>());
            mockTeam.Setup(m => m.TeamMembers).Returns(() => new List<ITeamMember>());
            mockTeam.Setup(m => m.TeamMovies).Returns(() => new List<ITeamMovie>());
            mockTeam.Setup(m => m.TeamStoryArcs).Returns(() => new List<ITeamStoryArc>());
            mockTeam.Setup(m => m.TeamVolumes).Returns(() => new List<ITeamVolume>());
            // Return
            return mockTeam;
        }
    }

    public class TeamMappingExtensionsTests
    {
        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ITeamModel>()));
            var mockModel = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ITeamModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "Teams")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<TeamMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ITeamModel>(), ref It.IsAny<ITeam>()));
        //    var mockModel = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
        //    var mockEntity = TeamsMockingSetup.DoMockingSetupForTeam(1);
        //    TeamMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ITeamModel>(), ref It.IsAny<ITeam>()), Times.Once);
        //}

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ITeam>()));
            var mockEntity = TeamsMockingSetup.DoMockingSetupForTeam(1);
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ITeam>()), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ITeam>()));
            var mockEntity = TeamsMockingSetup.DoMockingSetupForTeam(1);
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ITeam>()), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ITeam>()));
            var mockEntity = TeamsMockingSetup.DoMockingSetupForTeam(1);
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ITeam>()), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ITeamModel>()));
            var mockModel = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ITeamModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<TeamMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ITeamModel>(), It.IsAny<ITeam>()));
            TeamMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
            var mockEntity = TeamsMockingSetup.DoMockingSetupForTeam(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ITeamModel>(), It.IsAny<ITeam>()), Times.Once);
        }
    }

    public class TeamsMappingTests
    {
        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToEntity_AssignsTeamProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var model = TeamsMockingSetup.DoMockingSetupForTeamModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PublisherId, entity.PublisherId);
            // Associated Objects
            //Assert.Equal(model.Object.TeamAliases?.Count, entity.TeamAliases?.Count);
            model.VerifyGet(x => x.TeamAliases, Times.Once);
            //Assert.Equal(model.Object.TeamCharacterEnemies?.Count, entity.TeamCharacterEnemies?.Count);
            model.VerifyGet(x => x.TeamCharacterEnemies, Times.Once);
            //Assert.Equal(model.Object.TeamCharacterFriends?.Count, entity.TeamCharacterFriends?.Count);
            model.VerifyGet(x => x.TeamCharacterFriends, Times.Once);
            //Assert.Equal(model.Object.TeamIssuesAppearedIn?.Count, entity.TeamIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.TeamIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.TeamIssuesDisbandedIn?.Count, entity.TeamIssuesDisbandedIn?.Count);
            model.VerifyGet(x => x.TeamIssuesDisbandedIn, Times.Once);
            //Assert.Equal(model.Object.TeamIssues?.Count, entity.TeamIssues?.Count);
            model.VerifyGet(x => x.TeamIssues, Times.Once);
            //Assert.Equal(model.Object.TeamMembers?.Count, entity.TeamMembers?.Count);
            model.VerifyGet(x => x.TeamMembers, Times.Once);
            //Assert.Equal(model.Object.TeamMovies?.Count, entity.TeamMovies?.Count);
            model.VerifyGet(x => x.TeamMovies, Times.Once);
            //Assert.Equal(model.Object.TeamStoryArcs?.Count, entity.TeamStoryArcs?.Count);
            model.VerifyGet(x => x.TeamStoryArcs, Times.Once);
            //Assert.Equal(model.Object.TeamVolumes?.Count, entity.TeamVolumes?.Count);
            model.VerifyGet(x => x.TeamVolumes, Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsTeamProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var model = TeamsMockingSetup.DoMockingSetupForTeamModel();
            // Act
            ITeam existingEntity = new Team { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PublisherId, existingEntity.PublisherId);
            // Associated Objects
            model.VerifyGet(x => x.TeamAliases, Times.Once);
            //Assert.Equal(model.Object.TeamAliases?.Count, existingEntity.TeamAliases?.Count);
            model.VerifyGet(x => x.TeamCharacterEnemies, Times.Once);
            //Assert.Equal(model.Object.TeamCharacterEnemies?.Count, existingEntity.TeamCharacterEnemies?.Count);
            model.VerifyGet(x => x.TeamCharacterFriends, Times.Once);
            //Assert.Equal(model.Object.TeamCharacterFriends?.Count, existingEntity.TeamCharacterFriends?.Count);
            model.VerifyGet(x => x.TeamIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.TeamIssuesAppearedIn?.Count, existingEntity.TeamIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.TeamIssuesDisbandedIn, Times.Once);
            //Assert.Equal(model.Object.TeamIssuesDisbandedIn?.Count, existingEntity.TeamIssuesDisbandedIn?.Count);
            model.VerifyGet(x => x.TeamIssues, Times.Once);
            //Assert.Equal(model.Object.TeamIssues?.Count, existingEntity.TeamIssues?.Count);
            model.VerifyGet(x => x.TeamMembers, Times.Once);
            //Assert.Equal(model.Object.TeamMembers?.Count, existingEntity.TeamMembers?.Count);
            model.VerifyGet(x => x.TeamMovies, Times.Once);
            //Assert.Equal(model.Object.TeamMovies?.Count, existingEntity.TeamMovies?.Count);
            model.VerifyGet(x => x.TeamStoryArcs, Times.Once);
            //Assert.Equal(model.Object.TeamStoryArcs?.Count, existingEntity.TeamStoryArcs?.Count);
            model.VerifyGet(x => x.TeamVolumes, Times.Once);
            //Assert.Equal(model.Object.TeamVolumes?.Count, existingEntity.TeamVolumes?.Count);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModel_AssignsTeamProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var entity = TeamsMockingSetup.DoMockingSetupForTeam();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Associated Objects
            Assert.Equal(entity.Object.TeamAliases?.Count, model.TeamAliases?.Count);
            Assert.Equal(entity.Object.TeamCharacterEnemies?.Count, model.TeamCharacterEnemies?.Count);
            Assert.Equal(entity.Object.TeamCharacterFriends?.Count, model.TeamCharacterFriends?.Count);
            Assert.Equal(entity.Object.TeamIssuesAppearedIn?.Count, model.TeamIssuesAppearedIn?.Count);
            Assert.Equal(entity.Object.TeamIssuesDisbandedIn?.Count, model.TeamIssuesDisbandedIn?.Count);
            Assert.Equal(entity.Object.TeamIssues?.Count, model.TeamIssues?.Count);
            Assert.Equal(entity.Object.TeamMembers?.Count, model.TeamMembers?.Count);
            Assert.Equal(entity.Object.TeamMovies?.Count, model.TeamMovies?.Count);
            Assert.Equal(entity.Object.TeamStoryArcs?.Count, model.TeamStoryArcs?.Count);
            Assert.Equal(entity.Object.TeamVolumes?.Count, model.TeamVolumes?.Count);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModelLite_AssignsLiteOnlyTeamProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var entity = TeamsMockingSetup.DoMockingSetupForTeam();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToModelListing_AssignsListingOnlyTeamProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var entity = TeamsMockingSetup.DoMockingSetupForTeam();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Return Entity
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_MapToSearchModel_AssignsTeamSearchProperties()
        {
            // Arrange
            var mapper = new TeamMapper();
            var model = TeamsMockingSetup.DoMockingSetupForTeamModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
            Assert.Equal(model.Object.PublisherId, searchModel.PublisherId);
            Assert.Equal(model.Object.Publisher?.CustomKey, searchModel.PublisherCustomKey);
            Assert.Equal(model.Object.Publisher?.ApiDetailUrl, searchModel.PublisherApiDetailUrl);
            Assert.Equal(model.Object.Publisher?.SiteDetailUrl, searchModel.PublisherSiteDetailUrl);
            Assert.Equal(model.Object.Publisher?.Name, searchModel.PublisherName);
            Assert.Equal(model.Object.Publisher?.ShortDescription, searchModel.PublisherShortDescription);
            Assert.Equal(model.Object.Publisher?.Description, searchModel.PublisherDescription);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new TeamMapper();
            var model = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
            var entity = TeamsMockingSetup.DoMockingSetupForTeam(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new TeamMapper();
            var model = TeamsMockingSetup.DoMockingSetupForTeamModel(1);
            var entity = TeamsMockingSetup.DoMockingSetupForTeam(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
