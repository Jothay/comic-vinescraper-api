// <auto-generated>
// <copyright file="Volumes.IVolumeRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the VolumesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Volumes
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class VolumesMockingSetup
    {
        public static Mock<IVolumeModel> DoMockingSetupForVolumeModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockVolumeModel = new Mock<IVolumeModel>();
            // Mock Functions
            mockVolumeModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockVolumeModel.Setup(m => m.Active).Returns(() => true);
            mockVolumeModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockVolumeModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVolumeModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVolumeModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockVolumeModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockVolumeModel.Setup(m => m.Name).Returns(() => name);
            //mockVolumeModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockVolumeModel.Setup(m => m.Description).Returns(() => "long");
            mockVolumeModel.Setup(m => m.Startyear).Returns(() => 2000);
            // Related Objects
            mockVolumeModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockVolumeModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockVolumeModel.Setup(m => m.FirstIssueId).Returns(() => 1);
            mockVolumeModel.Setup(m => m.FirstIssue).Returns(() => new IssueModel());
            mockVolumeModel.Setup(m => m.LastIssueId).Returns(() => 1);
            mockVolumeModel.Setup(m => m.LastIssue).Returns(() => new IssueModel());
            mockVolumeModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockVolumeModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            mockVolumeModel.Setup(m => m.Issues).Returns(() => new List<IIssueModel>());
            mockVolumeModel.Setup(m => m.VolumeAliases).Returns(() => new List<IVolumeAliasModel>());
            mockVolumeModel.Setup(m => m.VolumeCharacters).Returns(() => new List<IVolumeCharacterModel>());
            mockVolumeModel.Setup(m => m.VolumeConcepts).Returns(() => new List<IVolumeConceptModel>());
            mockVolumeModel.Setup(m => m.VolumeLocations).Returns(() => new List<IVolumeLocationModel>());
            mockVolumeModel.Setup(m => m.VolumeObjects).Returns(() => new List<IVolumeObjectModel>());
            mockVolumeModel.Setup(m => m.VolumeTeams).Returns(() => new List<IVolumeTeamModel>());
            mockVolumeModel.Setup(m => m.VolumeWriters).Returns(() => new List<IVolumeWriterModel>());
            // Return
            return mockVolumeModel;
        }

        public static Mock<IVolume> DoMockingSetupForVolume(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockVolume = new Mock<IVolume>();
            // Mock Functions
            mockVolume.Setup(m => m.Id).Returns(() => idReturnValue);
            mockVolume.Setup(m => m.Active).Returns(() => true);
            mockVolume.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockVolume.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVolume.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockVolume.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockVolume.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockVolume.Setup(m => m.Name).Returns(() => name);
            //mockVolume.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockVolume.Setup(m => m.Description).Returns(() => "long");
            mockVolume.Setup(m => m.Startyear).Returns(() => 2000);
            // Related Objects
            mockVolume.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockVolume.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockVolume.Setup(m => m.FirstIssueId).Returns(() => 1);
            mockVolume.Setup(m => m.FirstIssue).Returns(() => new Issue());
            mockVolume.Setup(m => m.LastIssueId).Returns(() => 1);
            mockVolume.Setup(m => m.LastIssue).Returns(() => new Issue());
            mockVolume.Setup(m => m.PublisherId).Returns(() => 1);
            mockVolume.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            mockVolume.Setup(m => m.Issues).Returns(() => new List<IIssue>());
            mockVolume.Setup(m => m.VolumeAliases).Returns(() => new List<IVolumeAlias>());
            mockVolume.Setup(m => m.VolumeCharacters).Returns(() => new List<IVolumeCharacter>());
            mockVolume.Setup(m => m.VolumeConcepts).Returns(() => new List<IVolumeConcept>());
            mockVolume.Setup(m => m.VolumeLocations).Returns(() => new List<IVolumeLocation>());
            mockVolume.Setup(m => m.VolumeObjects).Returns(() => new List<IVolumeObject>());
            mockVolume.Setup(m => m.VolumeTeams).Returns(() => new List<IVolumeTeam>());
            mockVolume.Setup(m => m.VolumeWriters).Returns(() => new List<IVolumeWriter>());
            // Return
            return mockVolume;
        }
    }

    public class VolumeMappingExtensionsTests
    {
        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IVolumeModel>()));
            var mockModel = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IVolumeModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "Volumes")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<VolumeMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IVolumeModel>(), ref It.IsAny<IVolume>()));
        //    var mockModel = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
        //    var mockEntity = VolumesMockingSetup.DoMockingSetupForVolume(1);
        //    VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IVolumeModel>(), ref It.IsAny<IVolume>()), Times.Once);
        //}

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IVolume>()));
            var mockEntity = VolumesMockingSetup.DoMockingSetupForVolume(1);
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IVolume>()), Times.Once);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IVolume>()));
            var mockEntity = VolumesMockingSetup.DoMockingSetupForVolume(1);
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IVolume>()), Times.Once);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IVolume>()));
            var mockEntity = VolumesMockingSetup.DoMockingSetupForVolume(1);
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IVolume>()), Times.Once);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IVolumeModel>()));
            var mockModel = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IVolumeModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<VolumeMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IVolumeModel>(), It.IsAny<IVolume>()));
            VolumeMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
            var mockEntity = VolumesMockingSetup.DoMockingSetupForVolume(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IVolumeModel>(), It.IsAny<IVolume>()), Times.Once);
        }
    }

    public class VolumesMappingTests
    {
        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToEntity_AssignsVolumeProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var model = VolumesMockingSetup.DoMockingSetupForVolumeModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.Startyear, entity.Startyear);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueId, entity.FirstIssueId);
            Assert.Equal(model.Object.LastIssueId, entity.LastIssueId);
            Assert.Equal(model.Object.PublisherId, entity.PublisherId);
            // Associated Objects
            //Assert.Equal(model.Object.Issues?.Count, entity.Issues?.Count);
            model.VerifyGet(x => x.Issues, Times.Once);
            //Assert.Equal(model.Object.VolumeAliases?.Count, entity.VolumeAliases?.Count);
            model.VerifyGet(x => x.VolumeAliases, Times.Once);
            //Assert.Equal(model.Object.VolumeCharacters?.Count, entity.VolumeCharacters?.Count);
            model.VerifyGet(x => x.VolumeCharacters, Times.Once);
            //Assert.Equal(model.Object.VolumeConcepts?.Count, entity.VolumeConcepts?.Count);
            model.VerifyGet(x => x.VolumeConcepts, Times.Once);
            //Assert.Equal(model.Object.VolumeLocations?.Count, entity.VolumeLocations?.Count);
            model.VerifyGet(x => x.VolumeLocations, Times.Once);
            //Assert.Equal(model.Object.VolumeObjects?.Count, entity.VolumeObjects?.Count);
            model.VerifyGet(x => x.VolumeObjects, Times.Once);
            //Assert.Equal(model.Object.VolumeTeams?.Count, entity.VolumeTeams?.Count);
            model.VerifyGet(x => x.VolumeTeams, Times.Once);
            //Assert.Equal(model.Object.VolumeWriters?.Count, entity.VolumeWriters?.Count);
            model.VerifyGet(x => x.VolumeWriters, Times.Once);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsVolumeProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var model = VolumesMockingSetup.DoMockingSetupForVolumeModel();
            // Act
            IVolume existingEntity = new Volume { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.Startyear, existingEntity.Startyear);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueId, existingEntity.FirstIssueId);
            Assert.Equal(model.Object.LastIssueId, existingEntity.LastIssueId);
            Assert.Equal(model.Object.PublisherId, existingEntity.PublisherId);
            // Associated Objects
            model.VerifyGet(x => x.Issues, Times.Once);
            //Assert.Equal(model.Object.Issues?.Count, existingEntity.Issues?.Count);
            model.VerifyGet(x => x.VolumeAliases, Times.Once);
            //Assert.Equal(model.Object.VolumeAliases?.Count, existingEntity.VolumeAliases?.Count);
            model.VerifyGet(x => x.VolumeCharacters, Times.Once);
            //Assert.Equal(model.Object.VolumeCharacters?.Count, existingEntity.VolumeCharacters?.Count);
            model.VerifyGet(x => x.VolumeConcepts, Times.Once);
            //Assert.Equal(model.Object.VolumeConcepts?.Count, existingEntity.VolumeConcepts?.Count);
            model.VerifyGet(x => x.VolumeLocations, Times.Once);
            //Assert.Equal(model.Object.VolumeLocations?.Count, existingEntity.VolumeLocations?.Count);
            model.VerifyGet(x => x.VolumeObjects, Times.Once);
            //Assert.Equal(model.Object.VolumeObjects?.Count, existingEntity.VolumeObjects?.Count);
            model.VerifyGet(x => x.VolumeTeams, Times.Once);
            //Assert.Equal(model.Object.VolumeTeams?.Count, existingEntity.VolumeTeams?.Count);
            model.VerifyGet(x => x.VolumeWriters, Times.Once);
            //Assert.Equal(model.Object.VolumeWriters?.Count, existingEntity.VolumeWriters?.Count);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModel_AssignsVolumeProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var entity = VolumesMockingSetup.DoMockingSetupForVolume();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Startyear, model.Startyear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueId, model.FirstIssueId);
            Assert.Equal(entity.Object.LastIssueId, model.LastIssueId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Associated Objects
            Assert.Equal(entity.Object.Issues?.Count, model.Issues?.Count);
            Assert.Equal(entity.Object.VolumeAliases?.Count, model.VolumeAliases?.Count);
            Assert.Equal(entity.Object.VolumeCharacters?.Count, model.VolumeCharacters?.Count);
            Assert.Equal(entity.Object.VolumeConcepts?.Count, model.VolumeConcepts?.Count);
            Assert.Equal(entity.Object.VolumeLocations?.Count, model.VolumeLocations?.Count);
            Assert.Equal(entity.Object.VolumeObjects?.Count, model.VolumeObjects?.Count);
            Assert.Equal(entity.Object.VolumeTeams?.Count, model.VolumeTeams?.Count);
            Assert.Equal(entity.Object.VolumeWriters?.Count, model.VolumeWriters?.Count);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModelLite_AssignsLiteOnlyVolumeProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var entity = VolumesMockingSetup.DoMockingSetupForVolume();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Startyear, model.Startyear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueId, model.FirstIssueId);
            Assert.Equal(entity.Object.LastIssueId, model.LastIssueId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToModelListing_AssignsListingOnlyVolumeProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var entity = VolumesMockingSetup.DoMockingSetupForVolume();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Startyear, model.Startyear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueId, model.FirstIssueId);
            Assert.Equal(entity.Object.LastIssueId, model.LastIssueId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Return Entity
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_MapToSearchModel_AssignsVolumeSearchProperties()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var model = VolumesMockingSetup.DoMockingSetupForVolumeModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.FirstIssueId, searchModel.FirstIssueId);
            Assert.Equal(model.Object.FirstIssue?.CustomKey, searchModel.FirstIssueCustomKey);
            Assert.Equal(model.Object.FirstIssue?.ApiDetailUrl, searchModel.FirstIssueApiDetailUrl);
            Assert.Equal(model.Object.FirstIssue?.SiteDetailUrl, searchModel.FirstIssueSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssue?.Name, searchModel.FirstIssueName);
            Assert.Equal(model.Object.FirstIssue?.ShortDescription, searchModel.FirstIssueShortDescription);
            Assert.Equal(model.Object.FirstIssue?.Description, searchModel.FirstIssueDescription);
            Assert.Equal(model.Object.LastIssueId, searchModel.LastIssueId);
            Assert.Equal(model.Object.LastIssue?.CustomKey, searchModel.LastIssueCustomKey);
            Assert.Equal(model.Object.LastIssue?.ApiDetailUrl, searchModel.LastIssueApiDetailUrl);
            Assert.Equal(model.Object.LastIssue?.SiteDetailUrl, searchModel.LastIssueSiteDetailUrl);
            Assert.Equal(model.Object.LastIssue?.Name, searchModel.LastIssueName);
            Assert.Equal(model.Object.LastIssue?.ShortDescription, searchModel.LastIssueShortDescription);
            Assert.Equal(model.Object.LastIssue?.Description, searchModel.LastIssueDescription);
            Assert.Equal(model.Object.PublisherId, searchModel.PublisherId);
            Assert.Equal(model.Object.Publisher?.CustomKey, searchModel.PublisherCustomKey);
            Assert.Equal(model.Object.Publisher?.ApiDetailUrl, searchModel.PublisherApiDetailUrl);
            Assert.Equal(model.Object.Publisher?.SiteDetailUrl, searchModel.PublisherSiteDetailUrl);
            Assert.Equal(model.Object.Publisher?.Name, searchModel.PublisherName);
            Assert.Equal(model.Object.Publisher?.ShortDescription, searchModel.PublisherShortDescription);
            Assert.Equal(model.Object.Publisher?.Description, searchModel.PublisherDescription);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var model = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
            var entity = VolumesMockingSetup.DoMockingSetupForVolume(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Volumes")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new VolumeMapper();
            var model = VolumesMockingSetup.DoMockingSetupForVolumeModel(1);
            var entity = VolumesMockingSetup.DoMockingSetupForVolume(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
