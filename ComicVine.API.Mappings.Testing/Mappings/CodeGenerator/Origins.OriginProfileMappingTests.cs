// <auto-generated>
// <copyright file="Origins.IOriginProfileRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the OriginProfilesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Origins
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class OriginProfilesMockingSetup
    {
        public static Mock<IOriginProfileModel> DoMockingSetupForOriginProfileModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockOriginProfileModel = new Mock<IOriginProfileModel>();
            // Mock Functions
            mockOriginProfileModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockOriginProfileModel.Setup(m => m.Active).Returns(() => true);
            mockOriginProfileModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockOriginProfileModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockOriginProfileModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockOriginProfileModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockOriginProfileModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockOriginProfileModel.Setup(m => m.Name).Returns(() => name);
            //mockOriginProfileModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockOriginProfileModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockOriginProfileModel.Setup(m => m.OriginId).Returns(() => 1);
            mockOriginProfileModel.Setup(m => m.Origin).Returns(() => new OriginModel());
            mockOriginProfileModel.Setup(m => m.ProfileId).Returns(() => 1);
            mockOriginProfileModel.Setup(m => m.Profile).Returns(() => new ProfileModel());
            // Associated Objects
            // <None>
            // Return
            return mockOriginProfileModel;
        }

        public static Mock<IOriginProfile> DoMockingSetupForOriginProfile(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockOriginProfile = new Mock<IOriginProfile>();
            // Mock Functions
            mockOriginProfile.Setup(m => m.Id).Returns(() => idReturnValue);
            mockOriginProfile.Setup(m => m.Active).Returns(() => true);
            mockOriginProfile.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockOriginProfile.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockOriginProfile.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockOriginProfile.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockOriginProfile.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockOriginProfile.Setup(m => m.Name).Returns(() => name);
            //mockOriginProfile.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockOriginProfile.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockOriginProfile.Setup(m => m.OriginId).Returns(() => 1);
            mockOriginProfile.Setup(m => m.Origin).Returns(() => new Origin());
            mockOriginProfile.Setup(m => m.ProfileId).Returns(() => 1);
            mockOriginProfile.Setup(m => m.Profile).Returns(() => new Profile());
            // Associated Objects
            // <None>
            // Return
            return mockOriginProfile;
        }
    }

    public class OriginProfileMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IOriginProfileModel>()));
            var mockModel = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IOriginProfileModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<OriginProfileMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IOriginProfileModel>(), ref It.IsAny<IOriginProfile>()));
        //    var mockModel = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
        //    var mockEntity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
        //    OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IOriginProfileModel>(), ref It.IsAny<IOriginProfile>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IOriginProfile>()));
            var mockEntity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IOriginProfile>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IOriginProfile>()));
            var mockEntity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IOriginProfile>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IOriginProfile>()));
            var mockEntity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IOriginProfile>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IOriginProfileModel>()));
            var mockModel = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IOriginProfileModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<OriginProfileMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IOriginProfileModel>(), It.IsAny<IOriginProfile>()));
            OriginProfileMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
            var mockEntity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IOriginProfileModel>(), It.IsAny<IOriginProfile>()), Times.Once);
        }
    }

    public class OriginProfilesMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsOriginProfileProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var model = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.OriginId, entity.OriginId);
            Assert.Equal(model.Object.ProfileId, entity.ProfileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsOriginProfileProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var model = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel();
            // Act
            IOriginProfile existingEntity = new OriginProfile { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.OriginId, existingEntity.OriginId);
            Assert.Equal(model.Object.ProfileId, existingEntity.ProfileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsOriginProfileProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var entity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.ProfileId, model.ProfileId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyOriginProfileProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var entity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.ProfileId, model.ProfileId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyOriginProfileProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var entity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.ProfileId, model.ProfileId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsOriginProfileSearchProperties()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var model = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.OriginId, searchModel.OriginId);
            Assert.Equal(model.Object.Origin?.CustomKey, searchModel.OriginCustomKey);
            Assert.Equal(model.Object.Origin?.ApiDetailUrl, searchModel.OriginApiDetailUrl);
            Assert.Equal(model.Object.Origin?.SiteDetailUrl, searchModel.OriginSiteDetailUrl);
            Assert.Equal(model.Object.Origin?.Name, searchModel.OriginName);
            Assert.Equal(model.Object.Origin?.ShortDescription, searchModel.OriginShortDescription);
            Assert.Equal(model.Object.Origin?.Description, searchModel.OriginDescription);
            Assert.Equal(model.Object.ProfileId, searchModel.ProfileId);
            Assert.Equal(model.Object.Profile?.CustomKey, searchModel.ProfileCustomKey);
            Assert.Equal(model.Object.Profile?.ApiDetailUrl, searchModel.ProfileApiDetailUrl);
            Assert.Equal(model.Object.Profile?.SiteDetailUrl, searchModel.ProfileSiteDetailUrl);
            Assert.Equal(model.Object.Profile?.Name, searchModel.ProfileName);
            Assert.Equal(model.Object.Profile?.ShortDescription, searchModel.ProfileShortDescription);
            Assert.Equal(model.Object.Profile?.Description, searchModel.ProfileDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var model = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
            var entity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new OriginProfileMapper();
            var model = OriginProfilesMockingSetup.DoMockingSetupForOriginProfileModel(1);
            var entity = OriginProfilesMockingSetup.DoMockingSetupForOriginProfile(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
