// <auto-generated>
// <copyright file="StoryArcs.IStoryArcRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the StoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.StoryArcs
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class StoryArcsMockingSetup
    {
        public static Mock<IStoryArcModel> DoMockingSetupForStoryArcModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockStoryArcModel = new Mock<IStoryArcModel>();
            // Mock Functions
            mockStoryArcModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockStoryArcModel.Setup(m => m.Active).Returns(() => true);
            mockStoryArcModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockStoryArcModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStoryArcModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStoryArcModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockStoryArcModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockStoryArcModel.Setup(m => m.Name).Returns(() => name);
            //mockStoryArcModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockStoryArcModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockStoryArcModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockStoryArcModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockStoryArcModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockStoryArcModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockStoryArcModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockStoryArcModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            mockStoryArcModel.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArcModel>());
            mockStoryArcModel.Setup(m => m.StoryArcAliases).Returns(() => new List<IStoryArcAliasModel>());
            mockStoryArcModel.Setup(m => m.StoryArcIssues).Returns(() => new List<IStoryArcIssueModel>());
            mockStoryArcModel.Setup(m => m.StoryArcsWritten).Returns(() => new List<IStoryArcWriterModel>());
            // Return
            return mockStoryArcModel;
        }

        public static Mock<IStoryArc> DoMockingSetupForStoryArc(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockStoryArc = new Mock<IStoryArc>();
            // Mock Functions
            mockStoryArc.Setup(m => m.Id).Returns(() => idReturnValue);
            mockStoryArc.Setup(m => m.Active).Returns(() => true);
            mockStoryArc.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockStoryArc.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStoryArc.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStoryArc.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockStoryArc.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockStoryArc.Setup(m => m.Name).Returns(() => name);
            //mockStoryArc.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockStoryArc.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockStoryArc.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockStoryArc.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockStoryArc.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockStoryArc.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockStoryArc.Setup(m => m.PublisherId).Returns(() => 1);
            mockStoryArc.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            mockStoryArc.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArc>());
            mockStoryArc.Setup(m => m.StoryArcAliases).Returns(() => new List<IStoryArcAlias>());
            mockStoryArc.Setup(m => m.StoryArcIssues).Returns(() => new List<IStoryArcIssue>());
            mockStoryArc.Setup(m => m.StoryArcsWritten).Returns(() => new List<IStoryArcWriter>());
            // Return
            return mockStoryArc;
        }
    }

    public class StoryArcMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IStoryArcModel>()));
            var mockModel = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IStoryArcModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<StoryArcMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IStoryArcModel>(), ref It.IsAny<IStoryArc>()));
        //    var mockModel = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
        //    var mockEntity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
        //    StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IStoryArcModel>(), ref It.IsAny<IStoryArc>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IStoryArc>()));
            var mockEntity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IStoryArc>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IStoryArc>()));
            var mockEntity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IStoryArc>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IStoryArc>()));
            var mockEntity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IStoryArc>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IStoryArcModel>()));
            var mockModel = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IStoryArcModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<StoryArcMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IStoryArcModel>(), It.IsAny<IStoryArc>()));
            StoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
            var mockEntity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IStoryArcModel>(), It.IsAny<IStoryArc>()), Times.Once);
        }
    }

    public class StoryArcsMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsStoryArcProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var model = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PublisherId, entity.PublisherId);
            // Associated Objects
            //Assert.Equal(model.Object.MovieStoryArcs?.Count, entity.MovieStoryArcs?.Count);
            model.VerifyGet(x => x.MovieStoryArcs, Times.Once);
            //Assert.Equal(model.Object.StoryArcAliases?.Count, entity.StoryArcAliases?.Count);
            model.VerifyGet(x => x.StoryArcAliases, Times.Once);
            //Assert.Equal(model.Object.StoryArcIssues?.Count, entity.StoryArcIssues?.Count);
            model.VerifyGet(x => x.StoryArcIssues, Times.Once);
            //Assert.Equal(model.Object.StoryArcsWritten?.Count, entity.StoryArcsWritten?.Count);
            model.VerifyGet(x => x.StoryArcsWritten, Times.Once);
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsStoryArcProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var model = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel();
            // Act
            IStoryArc existingEntity = new StoryArc { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.PublisherId, existingEntity.PublisherId);
            // Associated Objects
            model.VerifyGet(x => x.MovieStoryArcs, Times.Once);
            //Assert.Equal(model.Object.MovieStoryArcs?.Count, existingEntity.MovieStoryArcs?.Count);
            model.VerifyGet(x => x.StoryArcAliases, Times.Once);
            //Assert.Equal(model.Object.StoryArcAliases?.Count, existingEntity.StoryArcAliases?.Count);
            model.VerifyGet(x => x.StoryArcIssues, Times.Once);
            //Assert.Equal(model.Object.StoryArcIssues?.Count, existingEntity.StoryArcIssues?.Count);
            model.VerifyGet(x => x.StoryArcsWritten, Times.Once);
            //Assert.Equal(model.Object.StoryArcsWritten?.Count, existingEntity.StoryArcsWritten?.Count);
        }

        [Fact]
        public void Verify_MapToModel_AssignsStoryArcProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var entity = StoryArcsMockingSetup.DoMockingSetupForStoryArc();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Associated Objects
            Assert.Equal(entity.Object.MovieStoryArcs?.Count, model.MovieStoryArcs?.Count);
            Assert.Equal(entity.Object.StoryArcAliases?.Count, model.StoryArcAliases?.Count);
            Assert.Equal(entity.Object.StoryArcIssues?.Count, model.StoryArcIssues?.Count);
            Assert.Equal(entity.Object.StoryArcsWritten?.Count, model.StoryArcsWritten?.Count);
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyStoryArcProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var entity = StoryArcsMockingSetup.DoMockingSetupForStoryArc();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyStoryArcProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var entity = StoryArcsMockingSetup.DoMockingSetupForStoryArc();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsStoryArcSearchProperties()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var model = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
            Assert.Equal(model.Object.PublisherId, searchModel.PublisherId);
            Assert.Equal(model.Object.Publisher?.CustomKey, searchModel.PublisherCustomKey);
            Assert.Equal(model.Object.Publisher?.ApiDetailUrl, searchModel.PublisherApiDetailUrl);
            Assert.Equal(model.Object.Publisher?.SiteDetailUrl, searchModel.PublisherSiteDetailUrl);
            Assert.Equal(model.Object.Publisher?.Name, searchModel.PublisherName);
            Assert.Equal(model.Object.Publisher?.ShortDescription, searchModel.PublisherShortDescription);
            Assert.Equal(model.Object.Publisher?.Description, searchModel.PublisherDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var model = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
            var entity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new StoryArcMapper();
            var model = StoryArcsMockingSetup.DoMockingSetupForStoryArcModel(1);
            var entity = StoryArcsMockingSetup.DoMockingSetupForStoryArc(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
