// <auto-generated>
// <copyright file="Characters.ICharacterStoryArcRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Characters
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class CharacterStoryArcsMockingSetup
    {
        public static Mock<ICharacterStoryArcModel> DoMockingSetupForCharacterStoryArcModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterStoryArcModel = new Mock<ICharacterStoryArcModel>();
            // Mock Functions
            mockCharacterStoryArcModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterStoryArcModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterStoryArcModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterStoryArcModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterStoryArcModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterStoryArcModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterStoryArcModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterStoryArcModel.Setup(m => m.Name).Returns(() => name);
            //mockCharacterStoryArcModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterStoryArcModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterStoryArcModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterStoryArcModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            mockCharacterStoryArcModel.Setup(m => m.StoryArcId).Returns(() => 1);
            mockCharacterStoryArcModel.Setup(m => m.StoryArc).Returns(() => new StoryArcModel());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterStoryArcModel;
        }

        public static Mock<ICharacterStoryArc> DoMockingSetupForCharacterStoryArc(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterStoryArc = new Mock<ICharacterStoryArc>();
            // Mock Functions
            mockCharacterStoryArc.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterStoryArc.Setup(m => m.Active).Returns(() => true);
            mockCharacterStoryArc.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterStoryArc.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterStoryArc.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterStoryArc.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterStoryArc.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterStoryArc.Setup(m => m.Name).Returns(() => name);
            //mockCharacterStoryArc.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterStoryArc.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterStoryArc.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterStoryArc.Setup(m => m.Character).Returns(() => new Character());
            mockCharacterStoryArc.Setup(m => m.StoryArcId).Returns(() => 1);
            mockCharacterStoryArc.Setup(m => m.StoryArc).Returns(() => new StoryArc());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterStoryArc;
        }
    }

    public class CharacterStoryArcMappingExtensionsTests
    {
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterStoryArcModel>(), It.IsAny<int>()));
            var mockModel = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterStoryArcModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "CharacterStoryArcs")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<CharacterStoryArcMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterStoryArcModel>(), ref It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()));
        //    var mockModel = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
        //    var mockEntity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
        //    CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterStoryArcModel>(), ref It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()));
            var mockEntity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()));
            var mockEntity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()));
            var mockEntity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ICharacterStoryArc>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ICharacterStoryArcModel>()));
            var mockModel = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ICharacterStoryArcModel>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<CharacterStoryArcMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ICharacterStoryArcModel>(), It.IsAny<ICharacterStoryArc>()));
            CharacterStoryArcMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
            var mockEntity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ICharacterStoryArcModel>(), It.IsAny<ICharacterStoryArc>()), Times.Once);
        }
    }

    public class CharacterStoryArcsMappingTests
    {
        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToEntity_AssignsCharacterStoryArcProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var model = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            Assert.Equal(model.Object.StoryArcId, entity.StoryArcId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsCharacterStoryArcProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var model = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel();
            // Act
            ICharacterStoryArc existingEntity = new CharacterStoryArc { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            Assert.Equal(model.Object.StoryArcId, existingEntity.StoryArcId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModel_AssignsCharacterStoryArcProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var entity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.StoryArcId, model.StoryArcId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModelLite_AssignsLiteOnlyCharacterStoryArcProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var entity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.StoryArcId, model.StoryArcId);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToModelListing_AssignsListingOnlyCharacterStoryArcProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var entity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.StoryArcId, model.StoryArcId);
            // Return Entity
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_MapToSearchModel_AssignsCharacterStoryArcSearchProperties()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var model = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
            Assert.Equal(model.Object.StoryArcId, searchModel.StoryArcId);
            Assert.Equal(model.Object.StoryArc?.CustomKey, searchModel.StoryArcCustomKey);
            Assert.Equal(model.Object.StoryArc?.ApiDetailUrl, searchModel.StoryArcApiDetailUrl);
            Assert.Equal(model.Object.StoryArc?.SiteDetailUrl, searchModel.StoryArcSiteDetailUrl);
            Assert.Equal(model.Object.StoryArc?.Name, searchModel.StoryArcName);
            Assert.Equal(model.Object.StoryArc?.ShortDescription, searchModel.StoryArcShortDescription);
            Assert.Equal(model.Object.StoryArc?.Description, searchModel.StoryArcDescription);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var model = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
            var entity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "CharacterStoryArcs")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new CharacterStoryArcMapper();
            var model = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArcModel(1);
            var entity = CharacterStoryArcsMockingSetup.DoMockingSetupForCharacterStoryArc(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
