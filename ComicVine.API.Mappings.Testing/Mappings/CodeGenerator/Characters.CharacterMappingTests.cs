// <auto-generated>
// <copyright file="Characters.ICharacterRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharactersRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Characters
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class CharactersMockingSetup
    {
        public static Mock<ICharacterModel> DoMockingSetupForCharacterModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterModel = new Mock<ICharacterModel>();
            // Mock Functions
            mockCharacterModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterModel.Setup(m => m.Name).Returns(() => name);
            //mockCharacterModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterModel.Setup(m => m.Description).Returns(() => "long");
            mockCharacterModel.Setup(m => m.RealName).Returns(() => "RealName");
            mockCharacterModel.Setup(m => m.DateOfBirth).Returns(() => new System.DateTime());
            // Related Objects
            mockCharacterModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockCharacterModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            mockCharacterModel.Setup(m => m.GenderId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Gender).Returns(() => new GenderModel());
            mockCharacterModel.Setup(m => m.OriginId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Origin).Returns(() => new OriginModel());
            mockCharacterModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockCharacterModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            mockCharacterModel.Setup(m => m.CharacterAliases).Returns(() => new List<ICharacterAliasModel>());
            mockCharacterModel.Setup(m => m.CharacterCreators).Returns(() => new List<ICharacterCreatorModel>());
            mockCharacterModel.Setup(m => m.CharacterEnemies).Returns(() => new List<ICharacterEnemyModel>());
            mockCharacterModel.Setup(m => m.CharacterEnemyTeams).Returns(() => new List<ICharacterEnemyTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterFriends).Returns(() => new List<ICharacterFriendModel>());
            mockCharacterModel.Setup(m => m.CharacterFriendlyTeams).Returns(() => new List<ICharacterFriendlyTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterIssuesAppearedIn).Returns(() => new List<ICharacterAppearedInIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterIssuesDiedIn).Returns(() => new List<ICharacterDiedInIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterIssues).Returns(() => new List<ICharacterIssueModel>());
            mockCharacterModel.Setup(m => m.CharacterMovies).Returns(() => new List<ICharacterMovieModel>());
            mockCharacterModel.Setup(m => m.CharacterPowers).Returns(() => new List<ICharacterPowerModel>());
            mockCharacterModel.Setup(m => m.CharacterStoryArcs).Returns(() => new List<ICharacterStoryArcModel>());
            mockCharacterModel.Setup(m => m.CharacterTeams).Returns(() => new List<ICharacterTeamModel>());
            mockCharacterModel.Setup(m => m.CharacterVolumes).Returns(() => new List<ICharacterVolumeModel>());
            // Return
            return mockCharacterModel;
        }

        public static Mock<ICharacter> DoMockingSetupForCharacter(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacter = new Mock<ICharacter>();
            // Mock Functions
            mockCharacter.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacter.Setup(m => m.Active).Returns(() => true);
            mockCharacter.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacter.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacter.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacter.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacter.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacter.Setup(m => m.Name).Returns(() => name);
            //mockCharacter.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacter.Setup(m => m.Description).Returns(() => "long");
            mockCharacter.Setup(m => m.RealName).Returns(() => "RealName");
            mockCharacter.Setup(m => m.DateOfBirth).Returns(() => new System.DateTime());
            // Related Objects
            mockCharacter.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockCharacter.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockCharacter.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockCharacter.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            mockCharacter.Setup(m => m.GenderId).Returns(() => 1);
            mockCharacter.Setup(m => m.Gender).Returns(() => new Gender());
            mockCharacter.Setup(m => m.OriginId).Returns(() => 1);
            mockCharacter.Setup(m => m.Origin).Returns(() => new Origin());
            mockCharacter.Setup(m => m.PublisherId).Returns(() => 1);
            mockCharacter.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            mockCharacter.Setup(m => m.CharacterAliases).Returns(() => new List<ICharacterAlias>());
            mockCharacter.Setup(m => m.CharacterCreators).Returns(() => new List<ICharacterCreator>());
            mockCharacter.Setup(m => m.CharacterEnemies).Returns(() => new List<ICharacterEnemy>());
            mockCharacter.Setup(m => m.CharacterEnemyTeams).Returns(() => new List<ICharacterEnemyTeam>());
            mockCharacter.Setup(m => m.CharacterFriends).Returns(() => new List<ICharacterFriend>());
            mockCharacter.Setup(m => m.CharacterFriendlyTeams).Returns(() => new List<ICharacterFriendlyTeam>());
            mockCharacter.Setup(m => m.CharacterIssuesAppearedIn).Returns(() => new List<ICharacterAppearedInIssue>());
            mockCharacter.Setup(m => m.CharacterIssuesDiedIn).Returns(() => new List<ICharacterDiedInIssue>());
            mockCharacter.Setup(m => m.CharacterIssues).Returns(() => new List<ICharacterIssue>());
            mockCharacter.Setup(m => m.CharacterMovies).Returns(() => new List<ICharacterMovie>());
            mockCharacter.Setup(m => m.CharacterPowers).Returns(() => new List<ICharacterPower>());
            mockCharacter.Setup(m => m.CharacterStoryArcs).Returns(() => new List<ICharacterStoryArc>());
            mockCharacter.Setup(m => m.CharacterTeams).Returns(() => new List<ICharacterTeam>());
            mockCharacter.Setup(m => m.CharacterVolumes).Returns(() => new List<ICharacterVolume>());
            // Return
            return mockCharacter;
        }
    }

    public class CharacterMappingExtensionsTests
    {
        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterModel>()));
            var mockModel = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "Characters")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<CharacterMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterModel>(), ref It.IsAny<ICharacter>()));
        //    var mockModel = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
        //    var mockEntity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
        //    CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterModel>(), ref It.IsAny<ICharacter>()), Times.Once);
        //}

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ICharacter>()));
            var mockEntity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ICharacter>()), Times.Once);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ICharacter>()));
            var mockEntity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ICharacter>()), Times.Once);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ICharacter>()));
            var mockEntity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ICharacter>()), Times.Once);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ICharacterModel>()));
            var mockModel = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ICharacterModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<CharacterMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>()));
            CharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            var mockEntity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ICharacterModel>(), It.IsAny<ICharacter>()), Times.Once);
        }
    }

    public class CharactersMappingTests
    {
        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToEntity_AssignsCharacterProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.RealName, entity.RealName);
            Assert.Equal(model.Object.DateOfBirth, entity.DateOfBirth);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.GenderId, entity.GenderId);
            Assert.Equal(model.Object.OriginId, entity.OriginId);
            Assert.Equal(model.Object.PublisherId, entity.PublisherId);
            // Associated Objects
            //Assert.Equal(model.Object.CharacterAliases?.Count, entity.CharacterAliases?.Count);
            model.VerifyGet(x => x.CharacterAliases, Times.Once);
            //Assert.Equal(model.Object.CharacterCreators?.Count, entity.CharacterCreators?.Count);
            model.VerifyGet(x => x.CharacterCreators, Times.Once);
            //Assert.Equal(model.Object.CharacterEnemies?.Count, entity.CharacterEnemies?.Count);
            model.VerifyGet(x => x.CharacterEnemies, Times.Once);
            //Assert.Equal(model.Object.CharacterEnemyTeams?.Count, entity.CharacterEnemyTeams?.Count);
            model.VerifyGet(x => x.CharacterEnemyTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterFriends?.Count, entity.CharacterFriends?.Count);
            model.VerifyGet(x => x.CharacterFriends, Times.Once);
            //Assert.Equal(model.Object.CharacterFriendlyTeams?.Count, entity.CharacterFriendlyTeams?.Count);
            model.VerifyGet(x => x.CharacterFriendlyTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterIssuesAppearedIn?.Count, entity.CharacterIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.CharacterIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.CharacterIssuesDiedIn?.Count, entity.CharacterIssuesDiedIn?.Count);
            model.VerifyGet(x => x.CharacterIssuesDiedIn, Times.Once);
            //Assert.Equal(model.Object.CharacterIssues?.Count, entity.CharacterIssues?.Count);
            model.VerifyGet(x => x.CharacterIssues, Times.Once);
            //Assert.Equal(model.Object.CharacterMovies?.Count, entity.CharacterMovies?.Count);
            model.VerifyGet(x => x.CharacterMovies, Times.Once);
            //Assert.Equal(model.Object.CharacterPowers?.Count, entity.CharacterPowers?.Count);
            model.VerifyGet(x => x.CharacterPowers, Times.Once);
            //Assert.Equal(model.Object.CharacterStoryArcs?.Count, entity.CharacterStoryArcs?.Count);
            model.VerifyGet(x => x.CharacterStoryArcs, Times.Once);
            //Assert.Equal(model.Object.CharacterTeams?.Count, entity.CharacterTeams?.Count);
            model.VerifyGet(x => x.CharacterTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterVolumes?.Count, entity.CharacterVolumes?.Count);
            model.VerifyGet(x => x.CharacterVolumes, Times.Once);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsCharacterProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel();
            // Act
            ICharacter existingEntity = new Character { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.RealName, existingEntity.RealName);
            Assert.Equal(model.Object.DateOfBirth, existingEntity.DateOfBirth);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            Assert.Equal(model.Object.GenderId, existingEntity.GenderId);
            Assert.Equal(model.Object.OriginId, existingEntity.OriginId);
            Assert.Equal(model.Object.PublisherId, existingEntity.PublisherId);
            // Associated Objects
            model.VerifyGet(x => x.CharacterAliases, Times.Once);
            //Assert.Equal(model.Object.CharacterAliases?.Count, existingEntity.CharacterAliases?.Count);
            model.VerifyGet(x => x.CharacterCreators, Times.Once);
            //Assert.Equal(model.Object.CharacterCreators?.Count, existingEntity.CharacterCreators?.Count);
            model.VerifyGet(x => x.CharacterEnemies, Times.Once);
            //Assert.Equal(model.Object.CharacterEnemies?.Count, existingEntity.CharacterEnemies?.Count);
            model.VerifyGet(x => x.CharacterEnemyTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterEnemyTeams?.Count, existingEntity.CharacterEnemyTeams?.Count);
            model.VerifyGet(x => x.CharacterFriends, Times.Once);
            //Assert.Equal(model.Object.CharacterFriends?.Count, existingEntity.CharacterFriends?.Count);
            model.VerifyGet(x => x.CharacterFriendlyTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterFriendlyTeams?.Count, existingEntity.CharacterFriendlyTeams?.Count);
            model.VerifyGet(x => x.CharacterIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.CharacterIssuesAppearedIn?.Count, existingEntity.CharacterIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.CharacterIssuesDiedIn, Times.Once);
            //Assert.Equal(model.Object.CharacterIssuesDiedIn?.Count, existingEntity.CharacterIssuesDiedIn?.Count);
            model.VerifyGet(x => x.CharacterIssues, Times.Once);
            //Assert.Equal(model.Object.CharacterIssues?.Count, existingEntity.CharacterIssues?.Count);
            model.VerifyGet(x => x.CharacterMovies, Times.Once);
            //Assert.Equal(model.Object.CharacterMovies?.Count, existingEntity.CharacterMovies?.Count);
            model.VerifyGet(x => x.CharacterPowers, Times.Once);
            //Assert.Equal(model.Object.CharacterPowers?.Count, existingEntity.CharacterPowers?.Count);
            model.VerifyGet(x => x.CharacterStoryArcs, Times.Once);
            //Assert.Equal(model.Object.CharacterStoryArcs?.Count, existingEntity.CharacterStoryArcs?.Count);
            model.VerifyGet(x => x.CharacterTeams, Times.Once);
            //Assert.Equal(model.Object.CharacterTeams?.Count, existingEntity.CharacterTeams?.Count);
            model.VerifyGet(x => x.CharacterVolumes, Times.Once);
            //Assert.Equal(model.Object.CharacterVolumes?.Count, existingEntity.CharacterVolumes?.Count);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModel_AssignsCharacterProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.RealName, model.RealName);
            Assert.Equal(entity.Object.DateOfBirth, model.DateOfBirth);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Associated Objects
            Assert.Equal(entity.Object.CharacterAliases?.Count, model.CharacterAliases?.Count);
            Assert.Equal(entity.Object.CharacterCreators?.Count, model.CharacterCreators?.Count);
            Assert.Equal(entity.Object.CharacterEnemies?.Count, model.CharacterEnemies?.Count);
            Assert.Equal(entity.Object.CharacterEnemyTeams?.Count, model.CharacterEnemyTeams?.Count);
            Assert.Equal(entity.Object.CharacterFriends?.Count, model.CharacterFriends?.Count);
            Assert.Equal(entity.Object.CharacterFriendlyTeams?.Count, model.CharacterFriendlyTeams?.Count);
            Assert.Equal(entity.Object.CharacterIssuesAppearedIn?.Count, model.CharacterIssuesAppearedIn?.Count);
            Assert.Equal(entity.Object.CharacterIssuesDiedIn?.Count, model.CharacterIssuesDiedIn?.Count);
            Assert.Equal(entity.Object.CharacterIssues?.Count, model.CharacterIssues?.Count);
            Assert.Equal(entity.Object.CharacterMovies?.Count, model.CharacterMovies?.Count);
            Assert.Equal(entity.Object.CharacterPowers?.Count, model.CharacterPowers?.Count);
            Assert.Equal(entity.Object.CharacterStoryArcs?.Count, model.CharacterStoryArcs?.Count);
            Assert.Equal(entity.Object.CharacterTeams?.Count, model.CharacterTeams?.Count);
            Assert.Equal(entity.Object.CharacterVolumes?.Count, model.CharacterVolumes?.Count);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModelLite_AssignsLiteOnlyCharacterProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.RealName, model.RealName);
            Assert.Equal(entity.Object.DateOfBirth, model.DateOfBirth);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToModelListing_AssignsListingOnlyCharacterProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.RealName, model.RealName);
            Assert.Equal(entity.Object.DateOfBirth, model.DateOfBirth);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            Assert.Equal(entity.Object.GenderId, model.GenderId);
            Assert.Equal(entity.Object.OriginId, model.OriginId);
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Return Entity
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_MapToSearchModel_AssignsCharacterSearchProperties()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
            Assert.Equal(model.Object.GenderId, searchModel.GenderId);
            Assert.Equal(model.Object.Gender?.CustomKey, searchModel.GenderCustomKey);
            Assert.Equal(model.Object.Gender?.ApiDetailUrl, searchModel.GenderApiDetailUrl);
            Assert.Equal(model.Object.Gender?.SiteDetailUrl, searchModel.GenderSiteDetailUrl);
            Assert.Equal(model.Object.Gender?.Name, searchModel.GenderName);
            Assert.Equal(model.Object.Gender?.ShortDescription, searchModel.GenderShortDescription);
            Assert.Equal(model.Object.Gender?.Description, searchModel.GenderDescription);
            Assert.Equal(model.Object.OriginId, searchModel.OriginId);
            Assert.Equal(model.Object.Origin?.CustomKey, searchModel.OriginCustomKey);
            Assert.Equal(model.Object.Origin?.ApiDetailUrl, searchModel.OriginApiDetailUrl);
            Assert.Equal(model.Object.Origin?.SiteDetailUrl, searchModel.OriginSiteDetailUrl);
            Assert.Equal(model.Object.Origin?.Name, searchModel.OriginName);
            Assert.Equal(model.Object.Origin?.ShortDescription, searchModel.OriginShortDescription);
            Assert.Equal(model.Object.Origin?.Description, searchModel.OriginDescription);
            Assert.Equal(model.Object.PublisherId, searchModel.PublisherId);
            Assert.Equal(model.Object.Publisher?.CustomKey, searchModel.PublisherCustomKey);
            Assert.Equal(model.Object.Publisher?.ApiDetailUrl, searchModel.PublisherApiDetailUrl);
            Assert.Equal(model.Object.Publisher?.SiteDetailUrl, searchModel.PublisherSiteDetailUrl);
            Assert.Equal(model.Object.Publisher?.Name, searchModel.PublisherName);
            Assert.Equal(model.Object.Publisher?.ShortDescription, searchModel.PublisherShortDescription);
            Assert.Equal(model.Object.Publisher?.Description, searchModel.PublisherDescription);
            Assert.Equal(model.Object.RealName, searchModel.RealName);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Characters")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new CharacterMapper();
            var model = CharactersMockingSetup.DoMockingSetupForCharacterModel(1);
            var entity = CharactersMockingSetup.DoMockingSetupForCharacter(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
