// <auto-generated>
// <copyright file="Teams.ITeamDisbandedInIssueRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamDisbandedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Teams
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class TeamDisbandedInIssuesMockingSetup
    {
        public static Mock<ITeamDisbandedInIssueModel> DoMockingSetupForTeamDisbandedInIssueModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeamDisbandedInIssueModel = new Mock<ITeamDisbandedInIssueModel>();
            // Mock Functions
            mockTeamDisbandedInIssueModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeamDisbandedInIssueModel.Setup(m => m.Active).Returns(() => true);
            mockTeamDisbandedInIssueModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeamDisbandedInIssueModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamDisbandedInIssueModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamDisbandedInIssueModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeamDisbandedInIssueModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockTeamDisbandedInIssueModel.Setup(m => m.Name).Returns(() => name);
            //mockTeamDisbandedInIssueModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockTeamDisbandedInIssueModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockTeamDisbandedInIssueModel.Setup(m => m.TeamId).Returns(() => 1);
            mockTeamDisbandedInIssueModel.Setup(m => m.Team).Returns(() => new TeamModel());
            mockTeamDisbandedInIssueModel.Setup(m => m.IssueId).Returns(() => 1);
            mockTeamDisbandedInIssueModel.Setup(m => m.Issue).Returns(() => new IssueModel());
            // Associated Objects
            // <None>
            // Return
            return mockTeamDisbandedInIssueModel;
        }

        public static Mock<ITeamDisbandedInIssue> DoMockingSetupForTeamDisbandedInIssue(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockTeamDisbandedInIssue = new Mock<ITeamDisbandedInIssue>();
            // Mock Functions
            mockTeamDisbandedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockTeamDisbandedInIssue.Setup(m => m.Active).Returns(() => true);
            mockTeamDisbandedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockTeamDisbandedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamDisbandedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockTeamDisbandedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockTeamDisbandedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockTeamDisbandedInIssue.Setup(m => m.Name).Returns(() => name);
            //mockTeamDisbandedInIssue.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockTeamDisbandedInIssue.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockTeamDisbandedInIssue.Setup(m => m.TeamId).Returns(() => 1);
            mockTeamDisbandedInIssue.Setup(m => m.Team).Returns(() => new Team());
            mockTeamDisbandedInIssue.Setup(m => m.IssueId).Returns(() => 1);
            mockTeamDisbandedInIssue.Setup(m => m.Issue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockTeamDisbandedInIssue;
        }
    }

    public class TeamDisbandedInIssueMappingExtensionsTests
    {
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ITeamDisbandedInIssueModel>()));
            var mockModel = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ITeamDisbandedInIssueModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "TeamDisbandedInIssues")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ITeamDisbandedInIssueModel>(), ref It.IsAny<ITeamDisbandedInIssue>()));
        //    var mockModel = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
        //    var mockEntity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
        //    TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ITeamDisbandedInIssueModel>(), ref It.IsAny<ITeamDisbandedInIssue>()), Times.Once);
        //}

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ITeamDisbandedInIssue>()));
            var mockEntity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ITeamDisbandedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ITeamDisbandedInIssue>()));
            var mockEntity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ITeamDisbandedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ITeamDisbandedInIssue>()));
            var mockEntity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ITeamDisbandedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ITeamDisbandedInIssueModel>()));
            var mockModel = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ITeamDisbandedInIssueModel>()), Times.Once);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<TeamDisbandedInIssueMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ITeamDisbandedInIssueModel>(), It.IsAny<ITeamDisbandedInIssue>()));
            TeamDisbandedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
            var mockEntity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ITeamDisbandedInIssueModel>(), It.IsAny<ITeamDisbandedInIssue>()), Times.Once);
        }
    }

    public class TeamDisbandedInIssuesMappingTests
    {
        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToEntity_AssignsTeamDisbandedInIssueProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var model = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.TeamId, entity.TeamId);
            Assert.Equal(model.Object.IssueId, entity.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsTeamDisbandedInIssueProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var model = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel();
            // Act
            ITeamDisbandedInIssue existingEntity = new TeamDisbandedInIssue { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.TeamId, existingEntity.TeamId);
            Assert.Equal(model.Object.IssueId, existingEntity.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModel_AssignsTeamDisbandedInIssueProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var entity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModelLite_AssignsLiteOnlyTeamDisbandedInIssueProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var entity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToModelListing_AssignsListingOnlyTeamDisbandedInIssueProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var entity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
            // Return Entity
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_MapToSearchModel_AssignsTeamDisbandedInIssueSearchProperties()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var model = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.TeamId, searchModel.TeamId);
            Assert.Equal(model.Object.Team?.CustomKey, searchModel.TeamCustomKey);
            Assert.Equal(model.Object.Team?.ApiDetailUrl, searchModel.TeamApiDetailUrl);
            Assert.Equal(model.Object.Team?.SiteDetailUrl, searchModel.TeamSiteDetailUrl);
            Assert.Equal(model.Object.Team?.Name, searchModel.TeamName);
            Assert.Equal(model.Object.Team?.ShortDescription, searchModel.TeamShortDescription);
            Assert.Equal(model.Object.Team?.Description, searchModel.TeamDescription);
            Assert.Equal(model.Object.IssueId, searchModel.IssueId);
            Assert.Equal(model.Object.Issue?.CustomKey, searchModel.IssueCustomKey);
            Assert.Equal(model.Object.Issue?.ApiDetailUrl, searchModel.IssueApiDetailUrl);
            Assert.Equal(model.Object.Issue?.SiteDetailUrl, searchModel.IssueSiteDetailUrl);
            Assert.Equal(model.Object.Issue?.Name, searchModel.IssueName);
            Assert.Equal(model.Object.Issue?.ShortDescription, searchModel.IssueShortDescription);
            Assert.Equal(model.Object.Issue?.Description, searchModel.IssueDescription);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var model = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
            var entity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "TeamDisbandedInIssues")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new TeamDisbandedInIssueMapper();
            var model = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssueModel(1);
            var entity = TeamDisbandedInIssuesMockingSetup.DoMockingSetupForTeamDisbandedInIssue(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
