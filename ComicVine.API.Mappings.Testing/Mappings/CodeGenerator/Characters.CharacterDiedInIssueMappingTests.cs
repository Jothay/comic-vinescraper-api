// <auto-generated>
// <copyright file="Characters.ICharacterDiedInIssueRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterDiedInIssuesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Characters
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class CharacterDiedInIssuesMockingSetup
    {
        public static Mock<ICharacterDiedInIssueModel> DoMockingSetupForCharacterDiedInIssueModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterDiedInIssueModel = new Mock<ICharacterDiedInIssueModel>();
            // Mock Functions
            mockCharacterDiedInIssueModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterDiedInIssueModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterDiedInIssueModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterDiedInIssueModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterDiedInIssueModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterDiedInIssueModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterDiedInIssueModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterDiedInIssueModel.Setup(m => m.Name).Returns(() => name);
            //mockCharacterDiedInIssueModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterDiedInIssueModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterDiedInIssueModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterDiedInIssueModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            mockCharacterDiedInIssueModel.Setup(m => m.DiedInIssueId).Returns(() => 1);
            mockCharacterDiedInIssueModel.Setup(m => m.DiedInIssue).Returns(() => new IssueModel());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterDiedInIssueModel;
        }

        public static Mock<ICharacterDiedInIssue> DoMockingSetupForCharacterDiedInIssue(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterDiedInIssue = new Mock<ICharacterDiedInIssue>();
            // Mock Functions
            mockCharacterDiedInIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterDiedInIssue.Setup(m => m.Active).Returns(() => true);
            mockCharacterDiedInIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterDiedInIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterDiedInIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterDiedInIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterDiedInIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterDiedInIssue.Setup(m => m.Name).Returns(() => name);
            //mockCharacterDiedInIssue.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterDiedInIssue.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterDiedInIssue.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterDiedInIssue.Setup(m => m.Character).Returns(() => new Character());
            mockCharacterDiedInIssue.Setup(m => m.DiedInIssueId).Returns(() => 1);
            mockCharacterDiedInIssue.Setup(m => m.DiedInIssue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterDiedInIssue;
        }
    }

    public class CharacterDiedInIssueMappingExtensionsTests
    {
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterDiedInIssueModel>()));
            var mockModel = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterDiedInIssueModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "CharacterDiedInIssues")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<CharacterDiedInIssueMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterDiedInIssueModel>(), ref It.IsAny<ICharacterDiedInIssue>()));
        //    var mockModel = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
        //    var mockEntity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
        //    CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterDiedInIssueModel>(), ref It.IsAny<ICharacterDiedInIssue>()), Times.Once);
        //}

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ICharacterDiedInIssue>()));
            var mockEntity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ICharacterDiedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ICharacterDiedInIssue>()));
            var mockEntity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ICharacterDiedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ICharacterDiedInIssue>()));
            var mockEntity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ICharacterDiedInIssue>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ICharacterDiedInIssueModel>()));
            var mockModel = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ICharacterDiedInIssueModel>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<CharacterDiedInIssueMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ICharacterDiedInIssueModel>(), It.IsAny<ICharacterDiedInIssue>()));
            CharacterDiedInIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
            var mockEntity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ICharacterDiedInIssueModel>(), It.IsAny<ICharacterDiedInIssue>()), Times.Once);
        }
    }

    public class CharacterDiedInIssuesMappingTests
    {
        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToEntity_AssignsCharacterDiedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var model = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            Assert.Equal(model.Object.DiedInIssueId, entity.DiedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsCharacterDiedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var model = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel();
            // Act
            ICharacterDiedInIssue existingEntity = new CharacterDiedInIssue { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            Assert.Equal(model.Object.DiedInIssueId, existingEntity.DiedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModel_AssignsCharacterDiedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var entity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.DiedInIssueId, model.DiedInIssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModelLite_AssignsLiteOnlyCharacterDiedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var entity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.DiedInIssueId, model.DiedInIssueId);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToModelListing_AssignsListingOnlyCharacterDiedInIssueProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var entity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.DiedInIssueId, model.DiedInIssueId);
            // Return Entity
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_MapToSearchModel_AssignsCharacterDiedInIssueSearchProperties()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var model = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
            Assert.Equal(model.Object.DiedInIssueId, searchModel.DiedInIssueId);
            Assert.Equal(model.Object.DiedInIssue?.CustomKey, searchModel.DiedInIssueCustomKey);
            Assert.Equal(model.Object.DiedInIssue?.ApiDetailUrl, searchModel.DiedInIssueApiDetailUrl);
            Assert.Equal(model.Object.DiedInIssue?.SiteDetailUrl, searchModel.DiedInIssueSiteDetailUrl);
            Assert.Equal(model.Object.DiedInIssue?.Name, searchModel.DiedInIssueName);
            Assert.Equal(model.Object.DiedInIssue?.ShortDescription, searchModel.DiedInIssueShortDescription);
            Assert.Equal(model.Object.DiedInIssue?.Description, searchModel.DiedInIssueDescription);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var model = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
            var entity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "CharacterDiedInIssues")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new CharacterDiedInIssueMapper();
            var model = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssueModel(1);
            var entity = CharacterDiedInIssuesMockingSetup.DoMockingSetupForCharacterDiedInIssue(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
