// <auto-generated>
// <copyright file="Episodes.IEpisodeCharacterRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeCharactersRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Episodes
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class EpisodeCharactersMockingSetup
    {
        public static Mock<IEpisodeCharacterModel> DoMockingSetupForEpisodeCharacterModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeCharacterModel = new Mock<IEpisodeCharacterModel>();
            // Mock Functions
            mockEpisodeCharacterModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeCharacterModel.Setup(m => m.Active).Returns(() => true);
            mockEpisodeCharacterModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeCharacterModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeCharacterModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeCharacterModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeCharacterModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeCharacterModel.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeCharacterModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeCharacterModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeCharacterModel.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeCharacterModel.Setup(m => m.Episode).Returns(() => new EpisodeModel());
            mockEpisodeCharacterModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockEpisodeCharacterModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeCharacterModel;
        }

        public static Mock<IEpisodeCharacter> DoMockingSetupForEpisodeCharacter(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeCharacter = new Mock<IEpisodeCharacter>();
            // Mock Functions
            mockEpisodeCharacter.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeCharacter.Setup(m => m.Active).Returns(() => true);
            mockEpisodeCharacter.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeCharacter.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeCharacter.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeCharacter.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeCharacter.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeCharacter.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeCharacter.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeCharacter.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeCharacter.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeCharacter.Setup(m => m.Episode).Returns(() => new Episode());
            mockEpisodeCharacter.Setup(m => m.CharacterId).Returns(() => 1);
            mockEpisodeCharacter.Setup(m => m.Character).Returns(() => new Character());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeCharacter;
        }
    }

    public class EpisodeCharacterMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeCharacterModel>()));
            var mockModel = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeCharacterModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<EpisodeCharacterMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeCharacterModel>(), ref It.IsAny<IEpisodeCharacter>()));
        //    var mockModel = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
        //    var mockEntity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
        //    EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeCharacterModel>(), ref It.IsAny<IEpisodeCharacter>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IEpisodeCharacter>()));
            var mockEntity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IEpisodeCharacter>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IEpisodeCharacter>()));
            var mockEntity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IEpisodeCharacter>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IEpisodeCharacter>()));
            var mockEntity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IEpisodeCharacter>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IEpisodeCharacterModel>()));
            var mockModel = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IEpisodeCharacterModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeCharacterMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IEpisodeCharacterModel>(), It.IsAny<IEpisodeCharacter>()));
            EpisodeCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
            var mockEntity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IEpisodeCharacterModel>(), It.IsAny<IEpisodeCharacter>()), Times.Once);
        }
    }

    public class EpisodeCharactersMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsEpisodeCharacterProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var model = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, entity.EpisodeId);
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsEpisodeCharacterProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var model = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel();
            // Act
            IEpisodeCharacter existingEntity = new EpisodeCharacter { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, existingEntity.EpisodeId);
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsEpisodeCharacterProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var entity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyEpisodeCharacterProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var entity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyEpisodeCharacterProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var entity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsEpisodeCharacterSearchProperties()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var model = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.EpisodeId, searchModel.EpisodeId);
            Assert.Equal(model.Object.Episode?.CustomKey, searchModel.EpisodeCustomKey);
            Assert.Equal(model.Object.Episode?.ApiDetailUrl, searchModel.EpisodeApiDetailUrl);
            Assert.Equal(model.Object.Episode?.SiteDetailUrl, searchModel.EpisodeSiteDetailUrl);
            Assert.Equal(model.Object.Episode?.Name, searchModel.EpisodeName);
            Assert.Equal(model.Object.Episode?.ShortDescription, searchModel.EpisodeShortDescription);
            Assert.Equal(model.Object.Episode?.Description, searchModel.EpisodeDescription);
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var model = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
            var entity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new EpisodeCharacterMapper();
            var model = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacterModel(1);
            var entity = EpisodeCharactersMockingSetup.DoMockingSetupForEpisodeCharacter(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
