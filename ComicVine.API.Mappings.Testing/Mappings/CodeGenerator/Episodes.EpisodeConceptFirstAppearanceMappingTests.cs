// <auto-generated>
// <copyright file="Episodes.IEpisodeConceptFirstAppearanceRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the EpisodeConceptFirstAppearancesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Episodes
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class EpisodeConceptFirstAppearancesMockingSetup
    {
        public static Mock<IEpisodeConceptFirstAppearanceModel> DoMockingSetupForEpisodeConceptFirstAppearanceModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeConceptFirstAppearanceModel = new Mock<IEpisodeConceptFirstAppearanceModel>();
            // Mock Functions
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Active).Returns(() => true);
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeConceptFirstAppearanceModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Episode).Returns(() => new EpisodeModel());
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.ConceptId).Returns(() => 1);
            mockEpisodeConceptFirstAppearanceModel.Setup(m => m.Concept).Returns(() => new ConceptModel());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeConceptFirstAppearanceModel;
        }

        public static Mock<IEpisodeConceptFirstAppearance> DoMockingSetupForEpisodeConceptFirstAppearance(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockEpisodeConceptFirstAppearance = new Mock<IEpisodeConceptFirstAppearance>();
            // Mock Functions
            mockEpisodeConceptFirstAppearance.Setup(m => m.Id).Returns(() => idReturnValue);
            mockEpisodeConceptFirstAppearance.Setup(m => m.Active).Returns(() => true);
            mockEpisodeConceptFirstAppearance.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockEpisodeConceptFirstAppearance.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeConceptFirstAppearance.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockEpisodeConceptFirstAppearance.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockEpisodeConceptFirstAppearance.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockEpisodeConceptFirstAppearance.Setup(m => m.Name).Returns(() => name);
            //mockEpisodeConceptFirstAppearance.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockEpisodeConceptFirstAppearance.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockEpisodeConceptFirstAppearance.Setup(m => m.EpisodeId).Returns(() => 1);
            mockEpisodeConceptFirstAppearance.Setup(m => m.Episode).Returns(() => new Episode());
            mockEpisodeConceptFirstAppearance.Setup(m => m.ConceptId).Returns(() => 1);
            mockEpisodeConceptFirstAppearance.Setup(m => m.Concept).Returns(() => new Concept());
            // Associated Objects
            // <None>
            // Return
            return mockEpisodeConceptFirstAppearance;
        }
    }

    public class EpisodeConceptFirstAppearanceMappingExtensionsTests
    {
        [Fact]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeConceptFirstAppearanceModel>()));
            var mockModel = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeConceptFirstAppearanceModel>()), Times.Once);
        }

        //[Fact]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IEpisodeConceptFirstAppearanceModel>(), ref It.IsAny<IEpisodeConceptFirstAppearance>()));
        //    var mockModel = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
        //    var mockEntity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
        //    EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IEpisodeConceptFirstAppearanceModel>(), ref It.IsAny<IEpisodeConceptFirstAppearance>()), Times.Once);
        //}

        [Fact]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IEpisodeConceptFirstAppearance>()));
            var mockEntity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IEpisodeConceptFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IEpisodeConceptFirstAppearance>()));
            var mockEntity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IEpisodeConceptFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IEpisodeConceptFirstAppearance>()));
            var mockEntity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IEpisodeConceptFirstAppearance>()), Times.Once);
        }

        [Fact]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IEpisodeConceptFirstAppearanceModel>()));
            var mockModel = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IEpisodeConceptFirstAppearanceModel>()), Times.Once);
        }

        [Fact]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<EpisodeConceptFirstAppearanceMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IEpisodeConceptFirstAppearanceModel>(), It.IsAny<IEpisodeConceptFirstAppearance>()));
            EpisodeConceptFirstAppearanceMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
            var mockEntity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IEpisodeConceptFirstAppearanceModel>(), It.IsAny<IEpisodeConceptFirstAppearance>()), Times.Once);
        }
    }

    public class EpisodeConceptFirstAppearancesMappingTests
    {
        [Fact]
        public void Verify_MapToEntity_AssignsEpisodeConceptFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var model = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, entity.EpisodeId);
            Assert.Equal(model.Object.ConceptId, entity.ConceptId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToEntity_WithExistingEntity_AssignsEpisodeConceptFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var model = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel();
            // Act
            IEpisodeConceptFirstAppearance existingEntity = new EpisodeConceptFirstAppearance { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.EpisodeId, existingEntity.EpisodeId);
            Assert.Equal(model.Object.ConceptId, existingEntity.ConceptId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModel_AssignsEpisodeConceptFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var entity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.ConceptId, model.ConceptId);
            // Associated Objects
            // <None>
        }

        [Fact]
        public void Verify_MapToModelLite_AssignsLiteOnlyEpisodeConceptFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var entity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.ConceptId, model.ConceptId);
        }

        [Fact]
        public void Verify_MapToModelListing_AssignsListingOnlyEpisodeConceptFirstAppearanceProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var entity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.EpisodeId, model.EpisodeId);
            Assert.Equal(entity.Object.ConceptId, model.ConceptId);
            // Return Entity
        }

        [Fact]
        public void Verify_MapToSearchModel_AssignsEpisodeConceptFirstAppearanceSearchProperties()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var model = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.EpisodeId, searchModel.EpisodeId);
            Assert.Equal(model.Object.Episode?.CustomKey, searchModel.EpisodeCustomKey);
            Assert.Equal(model.Object.Episode?.ApiDetailUrl, searchModel.EpisodeApiDetailUrl);
            Assert.Equal(model.Object.Episode?.SiteDetailUrl, searchModel.EpisodeSiteDetailUrl);
            Assert.Equal(model.Object.Episode?.Name, searchModel.EpisodeName);
            Assert.Equal(model.Object.Episode?.ShortDescription, searchModel.EpisodeShortDescription);
            Assert.Equal(model.Object.Episode?.Description, searchModel.EpisodeDescription);
            Assert.Equal(model.Object.ConceptId, searchModel.ConceptId);
            Assert.Equal(model.Object.Concept?.CustomKey, searchModel.ConceptCustomKey);
            Assert.Equal(model.Object.Concept?.ApiDetailUrl, searchModel.ConceptApiDetailUrl);
            Assert.Equal(model.Object.Concept?.SiteDetailUrl, searchModel.ConceptSiteDetailUrl);
            Assert.Equal(model.Object.Concept?.Name, searchModel.ConceptName);
            Assert.Equal(model.Object.Concept?.ShortDescription, searchModel.ConceptShortDescription);
            Assert.Equal(model.Object.Concept?.Description, searchModel.ConceptDescription);
        }

        [Fact]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var model = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
            var entity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new EpisodeConceptFirstAppearanceMapper();
            var model = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearanceModel(1);
            var entity = EpisodeConceptFirstAppearancesMockingSetup.DoMockingSetupForEpisodeConceptFirstAppearance(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
