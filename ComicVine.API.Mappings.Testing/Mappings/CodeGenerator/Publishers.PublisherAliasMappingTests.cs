// <auto-generated>
// <copyright file="Publishers.IPublisherAliasRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PublisherAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Publishers
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class PublisherAliasesMockingSetup
    {
        public static Mock<IPublisherAliasModel> DoMockingSetupForPublisherAliasModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPublisherAliasModel = new Mock<IPublisherAliasModel>();
            // Mock Functions
            mockPublisherAliasModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPublisherAliasModel.Setup(m => m.Active).Returns(() => true);
            mockPublisherAliasModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPublisherAliasModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPublisherAliasModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPublisherAliasModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPublisherAliasModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPublisherAliasModel.Setup(m => m.Name).Returns(() => name);
            //mockPublisherAliasModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPublisherAliasModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockPublisherAliasModel.Setup(m => m.PublisherId).Returns(() => 1);
            mockPublisherAliasModel.Setup(m => m.Publisher).Returns(() => new PublisherModel());
            // Associated Objects
            // <None>
            // Return
            return mockPublisherAliasModel;
        }

        public static Mock<IPublisherAlias> DoMockingSetupForPublisherAlias(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPublisherAlias = new Mock<IPublisherAlias>();
            // Mock Functions
            mockPublisherAlias.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPublisherAlias.Setup(m => m.Active).Returns(() => true);
            mockPublisherAlias.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPublisherAlias.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPublisherAlias.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPublisherAlias.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPublisherAlias.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPublisherAlias.Setup(m => m.Name).Returns(() => name);
            //mockPublisherAlias.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPublisherAlias.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockPublisherAlias.Setup(m => m.PublisherId).Returns(() => 1);
            mockPublisherAlias.Setup(m => m.Publisher).Returns(() => new Publisher());
            // Associated Objects
            // <None>
            // Return
            return mockPublisherAlias;
        }
    }

    public class PublisherAliasMappingExtensionsTests
    {
        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPublisherAliasModel>()));
            var mockModel = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPublisherAliasModel>()), Times.Once);
        }

        //[Fact][Trait("Category", "PublisherAliases")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<PublisherAliasMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPublisherAliasModel>(), ref It.IsAny<IPublisherAlias>()));
        //    var mockModel = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
        //    var mockEntity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
        //    PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPublisherAliasModel>(), ref It.IsAny<IPublisherAlias>()), Times.Once);
        //}

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IPublisherAlias>()));
            var mockEntity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IPublisherAlias>()), Times.Once);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IPublisherAlias>()));
            var mockEntity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IPublisherAlias>()), Times.Once);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IPublisherAlias>()));
            var mockEntity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IPublisherAlias>()), Times.Once);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IPublisherAliasModel>()));
            var mockModel = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IPublisherAliasModel>()), Times.Once);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<PublisherAliasMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IPublisherAliasModel>(), It.IsAny<IPublisherAlias>()));
            PublisherAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
            var mockEntity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IPublisherAliasModel>(), It.IsAny<IPublisherAlias>()), Times.Once);
        }
    }

    public class PublisherAliasesMappingTests
    {
        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToEntity_AssignsPublisherAliasProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var model = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PublisherId, entity.PublisherId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsPublisherAliasProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var model = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel();
            // Act
            IPublisherAlias existingEntity = new PublisherAlias { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.PublisherId, existingEntity.PublisherId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModel_AssignsPublisherAliasProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var entity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModelLite_AssignsLiteOnlyPublisherAliasProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var entity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToModelListing_AssignsListingOnlyPublisherAliasProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var entity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.PublisherId, model.PublisherId);
            // Return Entity
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_MapToSearchModel_AssignsPublisherAliasSearchProperties()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var model = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PublisherId, searchModel.PublisherId);
            Assert.Equal(model.Object.Publisher?.CustomKey, searchModel.PublisherCustomKey);
            Assert.Equal(model.Object.Publisher?.ApiDetailUrl, searchModel.PublisherApiDetailUrl);
            Assert.Equal(model.Object.Publisher?.SiteDetailUrl, searchModel.PublisherSiteDetailUrl);
            Assert.Equal(model.Object.Publisher?.Name, searchModel.PublisherName);
            Assert.Equal(model.Object.Publisher?.ShortDescription, searchModel.PublisherShortDescription);
            Assert.Equal(model.Object.Publisher?.Description, searchModel.PublisherDescription);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var model = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
            var entity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "PublisherAliases")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new PublisherAliasMapper();
            var model = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAliasModel(1);
            var entity = PublisherAliasesMockingSetup.DoMockingSetupForPublisherAlias(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
