// <auto-generated>
// <copyright file="Teams.ITeamRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the TeamsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Repositories.Teams
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using API.Repositories;
    using DataModel.Schema;
    using Interfaces.SearchModels;
    using Moq;
    using SearchModels;
    using Xunit;

    public static class TeamsMockingSetup
    {
        public static Mock<DataModel.ModelEntities> DoMockingSetupForContext(bool includeTeamsData, out Mock<IDbSet<Team>> mockSetTeams, bool markATeamInactive = false)
        {
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00);
            var mockContext = new Mock<DataModel.ModelEntities>();
            // Apply Data and set up IQueryable
            mockSetTeams = new Mock<IDbSet<Team>>();
            var personData = (!includeTeamsData ? new List<Team>() : new List<Team>
            {
                new Team { Id = 1, Active = !markATeamInactive, CreatedDate = createDate, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", Name = "Stephen King", Description = "a famous novelist" },
                new Team { Id = 2, Active = true, CreatedDate = createDate.AddDays(1), CustomKey = "NIVEN-LARRY", ApiDetailUrl = "/TEST/NIVEN-LARRY", Name = "Larry Niven", Description = "a novelist" }
            }).AsQueryable();
            mockSetTeams.As<IQueryable<Team>>().Setup(m => m.Provider).Returns(personData.Provider);
            mockSetTeams.As<IQueryable<Team>>().Setup(m => m.Expression).Returns(personData.Expression);
            mockSetTeams.As<IQueryable<Team>>().Setup(m => m.ElementType).Returns(personData.ElementType);
            mockSetTeams.As<IQueryable<Team>>().Setup(m => m.GetEnumerator()).Returns(personData.GetEnumerator());
            mockContext.Setup(m => m.Teams).Returns(mockSetTeams.Object);
            mockContext.Setup(m => m.SetModified(It.IsAny<object>())).Callback(() => { });
            // Return
            return mockContext;
        }
    }

    public class TeamsRepositoryTests
    {
        [Fact][Trait("Category", "Teams")]
        public void Verify_Add_Should_AddTheEntityToTheContext()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(false, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            var teams = new Team { Active = true, CustomKey = "SALVATORE-RAA", Name = "R.A.A Salvatore", Description = "a novelist" };
            // Act
            repository.Add(teams);
            // Assert
            mockSetTeams.Verify(x => x.Add(teams), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Remove_Should_RemoveTheEntityFromTheContext()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            var teams = repository.Get(1);
            // Act
            repository.Remove(teams);
            // Assert
            mockSetTeams.Verify(x => x.Remove((Team)teams), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Deactivate_Should_SetTheActivePropertyToFalseOnTheEntity()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            var teams = repository.Get(1);
            // Act
            repository.Deactivate(teams);
            // Assert
            Assert.Equal(false, teams.Active);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Update_Should_SetTheEntityStateToModified()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            var teams = repository.Get(1);
            teams.ApiDetailUrl = "/TEST";
            // Act
            repository.Update(teams);
            // Assert
            mockContext.Verify(x => x.SetModified(It.IsAny<object>()), Times.Once);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Get_ByID_Should_ReturnTheCorrectTeam()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            // Act
            var teams = repository.Get(1);
            // Assert
            Assert.Equal("Stephen King", teams.Name);            Assert.Equal("/TEST/KING-STEPHEN", teams.ApiDetailUrl);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectTeam()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            // Act
            var teams = repository.Get("KING-STEPHEN");
            // Assert
            Assert.Equal("Stephen King", teams.Name);            Assert.Equal("/TEST/KING-STEPHEN", teams.ApiDetailUrl);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_List_Should_ReturnAListOfTeamsWithData()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            // Act
            var teams = repository.List.ToArray();
            // Assert
            Assert.Equal(2, teams.Length);
            Assert.Equal(1, teams[0].Id);
            Assert.Equal("Stephen King", teams[0].Name);            Assert.Equal("/TEST/KING-STEPHEN", teams[0].ApiDetailUrl);
            Assert.Equal(2, teams[1].Id);
            Assert.Equal("Larry Niven", teams[1].Name);            Assert.Equal("/TEST/NIVEN-LARRY", teams[1].ApiDetailUrl);
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Search_Should_ReturnAListOfTeamsWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams, true);
            var repository = new TeamsRepository(mockContext.Object);
            var searchModel = new Mock<ITeamSearchModel>();
            // Act
            var teams = repository.Search(searchModel.Object).ToArray();
            // Assert
            Assert.Equal(1, teams.Length);
            Assert.Equal(2, teams[0].Id);
            Assert.Equal("Larry Niven", teams[0].Name);            Assert.Equal("/TEST/NIVEN-LARRY", teams[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Search_WithSelectStatement_Should_ReturnAListOfDynamicObjects()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams, true);
            var repository = new TeamsRepository(mockContext.Object);
            var searchModel = new Mock<ITeamSearchModel>();
            // Act
            var teams = repository.Search(searchModel.Object, i => new { i.Id, MyApiDetailUrl = i.ApiDetailUrl, MyName = i.Name }).ToArray();
            // Assert
            Assert.Equal(1, teams.Length);
            Assert.Equal(2, teams[0].Id);
            Assert.Equal("Larry Niven", teams[0].MyName);            Assert.Equal("/TEST/NIVEN-LARRY", teams[0].MyApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Search_WithModifiedSince_Should_ReturnAListOfTeamsWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams, true);
            var repository = new TeamsRepository(mockContext.Object);
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00).AddDays(1).AddMinutes(-1);
            //var searchModel = new Mock<ITeamSearchModel>();
            //searchModel.Setup(m => m.ModifiedSince).Returns(() => createDate);
            var searchModel = new TeamSearchModel { ModifiedSince = createDate };
            // Act
            var teams = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, teams.Length);
            Assert.Equal(2, teams[0].Id);
            Assert.Equal("Larry Niven", teams[0].Name);            Assert.Equal("/TEST/NIVEN-LARRY", teams[0].ApiDetailUrl);
            // Stephen King was filtered out because he was created before the modified since date
        }

        [Fact][Trait("Category", "Teams")]
        public void Verify_Search_WithPaging_Should_ReturnAListOfTeamsWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<Team>> mockSetTeams;
            var mockContext = TeamsMockingSetup.DoMockingSetupForContext(true, out mockSetTeams);
            var repository = new TeamsRepository(mockContext.Object);
            var searchModel = new TeamSearchModel { Paging = new Paging { Skip = 1, Take = 1 } };
            // Act
            var teams = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, teams.Length);
            Assert.Equal(2, teams[0].Id);
            Assert.Equal("Larry Niven", teams[0].Name);            Assert.Equal("/TEST/NIVEN-LARRY", teams[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Skipped
        }
    }
}
