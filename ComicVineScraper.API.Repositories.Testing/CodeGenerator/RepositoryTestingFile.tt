<#@ assembly name="System" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.ComponentModel.Composition" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)CodeGenerator\bin\Debug\CodeGenerator.dll" #>
<#@ assembly name="$(SolutionDir)$(SolutionName).DataModel\bin\Debug\$(SolutionName).DataModel.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="CodeGenerator" #>
<#@ import namespace="ComicVineScraper.API.DataModel" #>
<#+
string CleanType(string typeName) {
	if (typeName.Contains("DataModel.")) {
		typeName = typeName.Replace("DataModel.", "");
		typeName += "Model";
		typeName = typeName.Replace(">Model", "Model>");
	}
	return typeName;
}
bool IsClassProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (IsIdentifierProperty(property)) { return false; }
	if (originalPropertyType != propertyType) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsRelatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (originalPropertyType == propertyType && !IsIdentifierProperty(property)) { return false; }
	if (propertyType.StartsWith("List<")) { return false; }
	if (propertyType == "Guid?") { return false; }
	if (propertyType == "string") { return false; }
	if (property.name == "ID" || property.name == "Id") { return false; }
	return true;
}
bool IsAssociatedObjectProperty(propertyInfo property, out string propertyType) {
	var originalPropertyType = property.type;
	propertyType = CleanType(property.type);
	if (!propertyType.StartsWith("List<")) { return false; }
	return true;
}
bool IsIdentifierProperty(propertyInfo property) {
	return (property.name.EndsWith("Id") || property.name.EndsWith("ID")) && property.type.Replace("?", "") != "Guid";
}
string PluralizeName(string original) {
	if (original.Equals("EpisodeCharacterDied")) { return "EpisodeCharactersDied"; }
	if (original.EndsWith("Person")) { return original.Replace("Person", "People"); }
	if (original.EndsWith("Series")) { return original; }
	if (original.EndsWith("Address")
		|| original.EndsWith("Hash")
		|| original.EndsWith("Alias")
		|| original.EndsWith("Status"))
	{
		return original + "es";
	}
	if (original.EndsWith("y"))
	{
		return original.Substring(0, original.Length - 1) + "ies";
	}
	var retVal = original + "s";
	return retVal;
}
void GenerateRepositoryTestingFile(string root, string nameSpace, classInfo entityClass, string company, string copyright)
{
	//var hasProperties = false;
	//var hasRelatedProperties = false;
	//var hasAssociatedProperties = false;
	var thisClassName = entityClass.name.Replace("Schema.", "");
	var thisClassNameLowerFirst = Char.ToLowerInvariant(thisClassName[0]) + thisClassName.Substring(1);
	var thisClassNamePluralized = PluralizeName(thisClassName);
	var thisClassNamePluralizedLowerFirst = Char.ToLowerInvariant(thisClassNamePluralized[0]) + thisClassNamePluralized.Substring(1);
	var baseClassName = entityClass.baseClassName;
	var baseClassNameNoShared = baseClassName.Replace("Schema.Shared.", "");
	var isRelationalTable = baseClassNameNoShared != "NameableEntityBase";
	//string propertyType; #>
// <auto-generated>
// <copyright file="<#= nameSpace #>.<#= thisClassName #>RepositoryTests.cs" company="<#= company #>">
// Copyright (c) <#= System.DateTime.Now.Year #> <#= copyright #> All rights reserved.
// </copyright>
// <summary>Declares the <#= thisClassNamePluralized #>RepositoryTests class.</summary>
// <remarks>This file was auto-generated using RepositoryTestingFileMaster.tt in
// <#= root #>.Repositories.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace <#= root #>.Testing.Repositories.<#= nameSpace #>
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using API.Repositories;
    using DataModel.Schema;
    using Interfaces.SearchModels;
    using Moq;
    using SearchModels;
    using Xunit;

    public static class <#= thisClassNamePluralized #>MockingSetup
    {
        public static Mock<DataModel.ModelEntities> DoMockingSetupForContext(bool include<#= thisClassNamePluralized #>Data, out Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>, bool markA<#= thisClassName #>Inactive = false)
        {
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00);
            var mockContext = new Mock<DataModel.ModelEntities>();
            // Apply Data and set up IQueryable
            mockSet<#= thisClassNamePluralized #> = new Mock<IDbSet<<#= thisClassName #>>>();
            var personData = (!include<#= thisClassNamePluralized #>Data ? new List<<#= thisClassName #>>() : new List<<#= thisClassName #>>
            {
                new <#= thisClassName #> { Id = 1, Active = !markA<#= thisClassName #>Inactive, CreatedDate = createDate, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", <#+ if (!isRelationalTable) { #>Name = "Stephen King", Description = "a famous novelist" <#+ } #>},
                new <#= thisClassName #> { Id = 2, Active = true, CreatedDate = createDate.AddDays(1), CustomKey = "NIVEN-LARRY", ApiDetailUrl = "/TEST/NIVEN-LARRY", <#+ if (!isRelationalTable) { #>Name = "Larry Niven", Description = "a novelist" <#+ } #>}
            }).AsQueryable();
            mockSet<#= thisClassNamePluralized #>.As<IQueryable<<#= thisClassName #>>>().Setup(m => m.Provider).Returns(personData.Provider);
            mockSet<#= thisClassNamePluralized #>.As<IQueryable<<#= thisClassName #>>>().Setup(m => m.Expression).Returns(personData.Expression);
            mockSet<#= thisClassNamePluralized #>.As<IQueryable<<#= thisClassName #>>>().Setup(m => m.ElementType).Returns(personData.ElementType);
            mockSet<#= thisClassNamePluralized #>.As<IQueryable<<#= thisClassName #>>>().Setup(m => m.GetEnumerator()).Returns(personData.GetEnumerator());
            mockContext.Setup(m => m.<#= thisClassNamePluralized #>).Returns(mockSet<#= thisClassNamePluralized #>.Object);
            mockContext.Setup(m => m.SetModified(It.IsAny<object>())).Callback(() => { });
            // Return
            return mockContext;
        }
    }

    public class <#= thisClassNamePluralized #>RepositoryTests
    {
        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Add_Should_AddTheEntityToTheContext()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(false, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var <#= thisClassNamePluralizedLowerFirst #> = new <#= thisClassName #> { Active = true, CustomKey = "SALVATORE-RAA", <#+ if (!isRelationalTable) { #>Name = "R.A.A Salvatore", Description = "a novelist" <#+ } #>};
            // Act
            repository.Add(<#= thisClassNamePluralizedLowerFirst #>);
            // Assert
            mockSet<#= thisClassNamePluralized #>.Verify(x => x.Add(<#= thisClassNamePluralizedLowerFirst #>), Times.Once);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Remove_Should_RemoveTheEntityFromTheContext()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Get(1);
            // Act
            repository.Remove(<#= thisClassNamePluralizedLowerFirst #>);
            // Assert
            mockSet<#= thisClassNamePluralized #>.Verify(x => x.Remove((<#= thisClassName #>)<#= thisClassNamePluralizedLowerFirst #>), Times.Once);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Deactivate_Should_SetTheActivePropertyToFalseOnTheEntity()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Get(1);
            // Act
            repository.Deactivate(<#= thisClassNamePluralizedLowerFirst #>);
            // Assert
            Assert.Equal(false, <#= thisClassNamePluralizedLowerFirst #>.Active);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Update_Should_SetTheEntityStateToModified()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Get(1);
            <#= thisClassNamePluralizedLowerFirst #>.ApiDetailUrl = "/TEST";
            // Act
            repository.Update(<#= thisClassNamePluralizedLowerFirst #>);
            // Assert
            mockContext.Verify(x => x.SetModified(It.IsAny<object>()), Times.Once);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get_ByID_Should_ReturnTheCorrect<#= thisClassName #>()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Get(1);
            // Assert
            <#+ if (!isRelationalTable) { #>Assert.Equal("Stephen King", <#= thisClassNamePluralizedLowerFirst #>.Name);<#+ } #>
            Assert.Equal("/TEST/KING-STEPHEN", <#= thisClassNamePluralizedLowerFirst #>.ApiDetailUrl);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrect<#= thisClassName #>()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Get("KING-STEPHEN");
            // Assert
            <#+ if (!isRelationalTable) { #>Assert.Equal("Stephen King", <#= thisClassNamePluralizedLowerFirst #>.Name);<#+ } #>
            Assert.Equal("/TEST/KING-STEPHEN", <#= thisClassNamePluralizedLowerFirst #>.ApiDetailUrl);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_List_Should_ReturnAListOf<#= thisClassNamePluralized #>WithData()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.List.ToArray();
            // Assert
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>.Length);
            Assert.Equal(1, <#= thisClassNamePluralizedLowerFirst #>[0].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Stephen King", <#= thisClassNamePluralizedLowerFirst #>[0].Name);<#+ } #>
            Assert.Equal("/TEST/KING-STEPHEN", <#= thisClassNamePluralizedLowerFirst #>[0].ApiDetailUrl);
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>[1].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Larry Niven", <#= thisClassNamePluralizedLowerFirst #>[1].Name);<#+ } #>
            Assert.Equal("/TEST/NIVEN-LARRY", <#= thisClassNamePluralizedLowerFirst #>[1].ApiDetailUrl);
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Search_Should_ReturnAListOf<#= thisClassNamePluralized #>WithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>, true);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var searchModel = new Mock<I<#= thisClassName #>SearchModel>();
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Search(searchModel.Object).ToArray();
            // Assert
            Assert.Equal(1, <#= thisClassNamePluralizedLowerFirst #>.Length);
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>[0].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Larry Niven", <#= thisClassNamePluralizedLowerFirst #>[0].Name);<#+ } #>
            Assert.Equal("/TEST/NIVEN-LARRY", <#= thisClassNamePluralizedLowerFirst #>[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Search_WithSelectStatement_Should_ReturnAListOfDynamicObjects()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>, true);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var searchModel = new Mock<I<#= thisClassName #>SearchModel>();
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Search(searchModel.Object, i => new { i.Id, MyApiDetailUrl = i.ApiDetailUrl<#+ if (!isRelationalTable) { #>, MyName = i.Name<#+ } #> }).ToArray();
            // Assert
            Assert.Equal(1, <#= thisClassNamePluralizedLowerFirst #>.Length);
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>[0].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Larry Niven", <#= thisClassNamePluralizedLowerFirst #>[0].MyName);<#+ } #>
            Assert.Equal("/TEST/NIVEN-LARRY", <#= thisClassNamePluralizedLowerFirst #>[0].MyApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Search_WithModifiedSince_Should_ReturnAListOf<#= thisClassNamePluralized #>WithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>, true);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00).AddDays(1).AddMinutes(-1);
            //var searchModel = new Mock<I<#= thisClassName #>SearchModel>();
            //searchModel.Setup(m => m.ModifiedSince).Returns(() => createDate);
            var searchModel = new <#= thisClassName #>SearchModel { ModifiedSince = createDate };
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, <#= thisClassNamePluralizedLowerFirst #>.Length);
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>[0].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Larry Niven", <#= thisClassNamePluralizedLowerFirst #>[0].Name);<#+ } #>
            Assert.Equal("/TEST/NIVEN-LARRY", <#= thisClassNamePluralizedLowerFirst #>[0].ApiDetailUrl);
            // Stephen King was filtered out because he was created before the modified since date
        }

        [Fact][Trait("Category", "<#= thisClassNamePluralized #>")]
        public void Verify_Search_WithPaging_Should_ReturnAListOf<#= thisClassNamePluralized #>WithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<<#= thisClassName #>>> mockSet<#= thisClassNamePluralized #>;
            var mockContext = <#= thisClassNamePluralized #>MockingSetup.DoMockingSetupForContext(true, out mockSet<#= thisClassNamePluralized #>);
            var repository = new <#= thisClassNamePluralized #>Repository(mockContext.Object);
            var searchModel = new <#= thisClassName #>SearchModel { Paging = new Paging { Skip = 1, Take = 1 } };
            // Act
            var <#= thisClassNamePluralizedLowerFirst #> = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, <#= thisClassNamePluralizedLowerFirst #>.Length);
            Assert.Equal(2, <#= thisClassNamePluralizedLowerFirst #>[0].Id);
<#+ if (!isRelationalTable) { #>            Assert.Equal("Larry Niven", <#= thisClassNamePluralizedLowerFirst #>[0].Name);<#+ } #>
            Assert.Equal("/TEST/NIVEN-LARRY", <#= thisClassNamePluralizedLowerFirst #>[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Skipped
        }
    }
}
<#+
} // End Function GenerateInterfaceFile
#>