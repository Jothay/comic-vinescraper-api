// <auto-generated>
// <copyright file="StoryArcs.StoryArcIssueRepositoryTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the StoryArcIssuesRepositoryTests class.</summary>
// <remarks>This file was auto-generated using RepositoryTestingFileMaster.tt in
// ComicVineScraper.API.Repositories.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Repositories.StoryArcs
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using API.Repositories;
    using DataModel.Schema;
    using Interfaces.SearchModels;
    using Moq;
    using SearchModels;
    using Xunit;

    public static class StoryArcIssuesMockingSetup
    {
        public static Mock<DataModel.ModelEntities> DoMockingSetupForContext(bool includeStoryArcIssuesData, out Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues, bool markAStoryArcIssueInactive = false)
        {
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00);
            var mockContext = new Mock<DataModel.ModelEntities>();
            // Apply Data and set up IQueryable
            mockSetStoryArcIssues = new Mock<IDbSet<StoryArcIssue>>();
            var personData = (!includeStoryArcIssuesData ? new List<StoryArcIssue>() : new List<StoryArcIssue>
            {
                new StoryArcIssue { Id = 1, Active = !markAStoryArcIssueInactive, CreatedDate = createDate, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", },
                new StoryArcIssue { Id = 2, Active = true, CreatedDate = createDate.AddDays(1), CustomKey = "NIVEN-LARRY", ApiDetailUrl = "/TEST/NIVEN-LARRY", }
            }).AsQueryable();
            mockSetStoryArcIssues.As<IQueryable<StoryArcIssue>>().Setup(m => m.Provider).Returns(personData.Provider);
            mockSetStoryArcIssues.As<IQueryable<StoryArcIssue>>().Setup(m => m.Expression).Returns(personData.Expression);
            mockSetStoryArcIssues.As<IQueryable<StoryArcIssue>>().Setup(m => m.ElementType).Returns(personData.ElementType);
            mockSetStoryArcIssues.As<IQueryable<StoryArcIssue>>().Setup(m => m.GetEnumerator()).Returns(personData.GetEnumerator());
            mockContext.Setup(m => m.StoryArcIssues).Returns(mockSetStoryArcIssues.Object);
            mockContext.Setup(m => m.SetModified(It.IsAny<object>())).Callback(() => { });
            // Return
            return mockContext;
        }
    }

    public class StoryArcIssuesRepositoryTests
    {
        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Add_Should_AddTheEntityToTheContext()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(false, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var storyArcIssues = new StoryArcIssue { Active = true, CustomKey = "SALVATORE-RAA", };
            // Act
            repository.Add(storyArcIssues);
            // Assert
            mockSetStoryArcIssues.Verify(x => x.Add(storyArcIssues), Times.Once);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Remove_Should_RemoveTheEntityFromTheContext()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var storyArcIssues = repository.Get(1);
            // Act
            repository.Remove(storyArcIssues);
            // Assert
            mockSetStoryArcIssues.Verify(x => x.Remove((StoryArcIssue)storyArcIssues), Times.Once);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Deactivate_Should_SetTheActivePropertyToFalseOnTheEntity()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var storyArcIssues = repository.Get(1);
            // Act
            repository.Deactivate(storyArcIssues);
            // Assert
            Assert.Equal(false, storyArcIssues.Active);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Update_Should_SetTheEntityStateToModified()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var storyArcIssues = repository.Get(1);
            storyArcIssues.ApiDetailUrl = "/TEST";
            // Act
            repository.Update(storyArcIssues);
            // Assert
            mockContext.Verify(x => x.SetModified(It.IsAny<object>()), Times.Once);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Get_ByID_Should_ReturnTheCorrectStoryArcIssue()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            // Act
            var storyArcIssues = repository.Get(1);
            // Assert
                        Assert.Equal("/TEST/KING-STEPHEN", storyArcIssues.ApiDetailUrl);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectStoryArcIssue()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            // Act
            var storyArcIssues = repository.Get("KING-STEPHEN");
            // Assert
                        Assert.Equal("/TEST/KING-STEPHEN", storyArcIssues.ApiDetailUrl);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_List_Should_ReturnAListOfStoryArcIssuesWithData()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            // Act
            var storyArcIssues = repository.List.ToArray();
            // Assert
            Assert.Equal(2, storyArcIssues.Length);
            Assert.Equal(1, storyArcIssues[0].Id);
            Assert.Equal("/TEST/KING-STEPHEN", storyArcIssues[0].ApiDetailUrl);
            Assert.Equal(2, storyArcIssues[1].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", storyArcIssues[1].ApiDetailUrl);
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Search_Should_ReturnAListOfStoryArcIssuesWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues, true);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var searchModel = new Mock<IStoryArcIssueSearchModel>();
            // Act
            var storyArcIssues = repository.Search(searchModel.Object).ToArray();
            // Assert
            Assert.Equal(1, storyArcIssues.Length);
            Assert.Equal(2, storyArcIssues[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", storyArcIssues[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Search_WithSelectStatement_Should_ReturnAListOfDynamicObjects()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues, true);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var searchModel = new Mock<IStoryArcIssueSearchModel>();
            // Act
            var storyArcIssues = repository.Search(searchModel.Object, i => new { i.Id, MyApiDetailUrl = i.ApiDetailUrl }).ToArray();
            // Assert
            Assert.Equal(1, storyArcIssues.Length);
            Assert.Equal(2, storyArcIssues[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", storyArcIssues[0].MyApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Search_WithModifiedSince_Should_ReturnAListOfStoryArcIssuesWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues, true);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00).AddDays(1).AddMinutes(-1);
            //var searchModel = new Mock<IStoryArcIssueSearchModel>();
            //searchModel.Setup(m => m.ModifiedSince).Returns(() => createDate);
            var searchModel = new StoryArcIssueSearchModel { ModifiedSince = createDate };
            // Act
            var storyArcIssues = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, storyArcIssues.Length);
            Assert.Equal(2, storyArcIssues[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", storyArcIssues[0].ApiDetailUrl);
            // Stephen King was filtered out because he was created before the modified since date
        }

        [Fact][Trait("Category", "StoryArcIssues")]
        public void Verify_Search_WithPaging_Should_ReturnAListOfStoryArcIssuesWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<StoryArcIssue>> mockSetStoryArcIssues;
            var mockContext = StoryArcIssuesMockingSetup.DoMockingSetupForContext(true, out mockSetStoryArcIssues);
            var repository = new StoryArcIssuesRepository(mockContext.Object);
            var searchModel = new StoryArcIssueSearchModel { Paging = new Paging { Skip = 1, Take = 1 } };
            // Act
            var storyArcIssues = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, storyArcIssues.Length);
            Assert.Equal(2, storyArcIssues[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", storyArcIssues[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Skipped
        }
    }
}
