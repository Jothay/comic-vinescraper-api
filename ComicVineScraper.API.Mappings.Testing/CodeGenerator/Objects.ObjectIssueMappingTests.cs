// <auto-generated>
// <copyright file="Objects.IObjectIssueMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectIssuesMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Objects
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class ObjectIssuesMockingSetup
    {
        public static Mock<IObjectIssueModel> DoMockingSetupForObjectIssueModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockObjectIssueModel = new Mock<IObjectIssueModel>();
            // Mock Functions
            mockObjectIssueModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockObjectIssueModel.Setup(m => m.Active).Returns(() => true);
            mockObjectIssueModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockObjectIssueModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectIssueModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectIssueModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockObjectIssueModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockObjectIssueModel.Setup(m => m.Name).Returns(() => name);
            //mockObjectIssueModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockObjectIssueModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockObjectIssueModel.Setup(m => m.ObjectId).Returns(() => 1);
            mockObjectIssueModel.Setup(m => m.Object).Returns(() => new ObjectModel());
            mockObjectIssueModel.Setup(m => m.IssueId).Returns(() => 1);
            mockObjectIssueModel.Setup(m => m.Issue).Returns(() => new IssueModel());
            // Associated Objects
            // <None>
            // Return
            return mockObjectIssueModel;
        }

        public static Mock<IObjectIssue> DoMockingSetupForObjectIssue(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockObjectIssue = new Mock<IObjectIssue>();
            // Mock Functions
            mockObjectIssue.Setup(m => m.Id).Returns(() => idReturnValue);
            mockObjectIssue.Setup(m => m.Active).Returns(() => true);
            mockObjectIssue.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockObjectIssue.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectIssue.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockObjectIssue.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockObjectIssue.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockObjectIssue.Setup(m => m.Name).Returns(() => name);
            //mockObjectIssue.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockObjectIssue.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockObjectIssue.Setup(m => m.ObjectId).Returns(() => 1);
            mockObjectIssue.Setup(m => m.Object).Returns(() => new Object());
            mockObjectIssue.Setup(m => m.IssueId).Returns(() => 1);
            mockObjectIssue.Setup(m => m.Issue).Returns(() => new Issue());
            // Associated Objects
            // <None>
            // Return
            return mockObjectIssue;
        }
    }

    public class ObjectIssueMappingExtensionsTests
    {
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IObjectIssueModel>(), It.IsAny<int>()));
            var mockModel = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IObjectIssueModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "ObjectIssues")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<ObjectIssueMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IObjectIssueModel>(), ref It.IsAny<IObjectIssue>(), It.IsAny<int>()));
        //    var mockModel = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
        //    var mockEntity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
        //    ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IObjectIssueModel>(), ref It.IsAny<IObjectIssue>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IObjectIssue>(), It.IsAny<int>()));
            var mockEntity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IObjectIssue>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IObjectIssue>(), It.IsAny<int>()));
            var mockEntity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IObjectIssue>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IObjectIssue>(), It.IsAny<int>()));
            var mockEntity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IObjectIssue>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IObjectIssueModel>()));
            var mockModel = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IObjectIssueModel>()), Times.Once);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<ObjectIssueMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IObjectIssueModel>(), It.IsAny<IObjectIssue>()));
            ObjectIssueMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
            var mockEntity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IObjectIssueModel>(), It.IsAny<IObjectIssue>()), Times.Once);
        }
    }

    public class ObjectIssuesMappingTests
    {
        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToEntity_AssignsObjectIssueProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var model = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.ObjectId, entity.ObjectId);
            Assert.Equal(model.Object.IssueId, entity.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsObjectIssueProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var model = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel();
            // Act
            IObjectIssue existingEntity = new ObjectIssue { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.ObjectId, existingEntity.ObjectId);
            Assert.Equal(model.Object.IssueId, existingEntity.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModel_AssignsObjectIssueProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var entity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.ObjectId, model.ObjectId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModelLite_AssignsLiteOnlyObjectIssueProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var entity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.ObjectId, model.ObjectId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToModelListing_AssignsListingOnlyObjectIssueProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var entity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.ObjectId, model.ObjectId);
            Assert.Equal(entity.Object.IssueId, model.IssueId);
            // Return Entity
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_MapToSearchModel_AssignsObjectIssueSearchProperties()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var model = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.ObjectId, searchModel.ObjectId);
            Assert.Equal(model.Object.Object?.CustomKey, searchModel.ObjectCustomKey);
            Assert.Equal(model.Object.Object?.ApiDetailUrl, searchModel.ObjectApiDetailUrl);
            Assert.Equal(model.Object.Object?.SiteDetailUrl, searchModel.ObjectSiteDetailUrl);
            Assert.Equal(model.Object.Object?.Name, searchModel.ObjectName);
            Assert.Equal(model.Object.Object?.ShortDescription, searchModel.ObjectShortDescription);
            Assert.Equal(model.Object.Object?.Description, searchModel.ObjectDescription);
            Assert.Equal(model.Object.IssueId, searchModel.IssueId);
            Assert.Equal(model.Object.Issue?.CustomKey, searchModel.IssueCustomKey);
            Assert.Equal(model.Object.Issue?.ApiDetailUrl, searchModel.IssueApiDetailUrl);
            Assert.Equal(model.Object.Issue?.SiteDetailUrl, searchModel.IssueSiteDetailUrl);
            Assert.Equal(model.Object.Issue?.Name, searchModel.IssueName);
            Assert.Equal(model.Object.Issue?.ShortDescription, searchModel.IssueShortDescription);
            Assert.Equal(model.Object.Issue?.Description, searchModel.IssueDescription);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var model = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
            var entity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "ObjectIssues")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new ObjectIssueMapper();
            var model = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssueModel(1);
            var entity = ObjectIssuesMockingSetup.DoMockingSetupForObjectIssue(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
