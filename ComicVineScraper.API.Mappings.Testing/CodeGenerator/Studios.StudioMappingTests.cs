// <auto-generated>
// <copyright file="Studios.IStudioMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the StudiosMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Studios
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class StudiosMockingSetup
    {
        public static Mock<IStudioModel> DoMockingSetupForStudioModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockStudioModel = new Mock<IStudioModel>();
            // Mock Functions
            mockStudioModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockStudioModel.Setup(m => m.Active).Returns(() => true);
            mockStudioModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockStudioModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStudioModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStudioModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockStudioModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockStudioModel.Setup(m => m.Name).Returns(() => name);
            //mockStudioModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockStudioModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            mockStudioModel.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudioModel>());
            // Return
            return mockStudioModel;
        }

        public static Mock<IStudio> DoMockingSetupForStudio(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockStudio = new Mock<IStudio>();
            // Mock Functions
            mockStudio.Setup(m => m.Id).Returns(() => idReturnValue);
            mockStudio.Setup(m => m.Active).Returns(() => true);
            mockStudio.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockStudio.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStudio.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockStudio.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockStudio.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockStudio.Setup(m => m.Name).Returns(() => name);
            //mockStudio.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockStudio.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            mockStudio.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudio>());
            // Return
            return mockStudio;
        }
    }

    public class StudioMappingExtensionsTests
    {
        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IStudioModel>(), It.IsAny<int>()));
            var mockModel = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IStudioModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "Studios")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<StudioMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IStudioModel>(), ref It.IsAny<IStudio>(), It.IsAny<int>()));
        //    var mockModel = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
        //    var mockEntity = StudiosMockingSetup.DoMockingSetupForStudio(1);
        //    StudioMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IStudioModel>(), ref It.IsAny<IStudio>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IStudio>(), It.IsAny<int>()));
            var mockEntity = StudiosMockingSetup.DoMockingSetupForStudio(1);
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IStudio>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IStudio>(), It.IsAny<int>()));
            var mockEntity = StudiosMockingSetup.DoMockingSetupForStudio(1);
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IStudio>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IStudio>(), It.IsAny<int>()));
            var mockEntity = StudiosMockingSetup.DoMockingSetupForStudio(1);
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IStudio>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IStudioModel>()));
            var mockModel = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IStudioModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<StudioMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IStudioModel>(), It.IsAny<IStudio>()));
            StudioMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
            var mockEntity = StudiosMockingSetup.DoMockingSetupForStudio(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IStudioModel>(), It.IsAny<IStudio>()), Times.Once);
        }
    }

    public class StudiosMappingTests
    {
        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToEntity_AssignsStudioProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var model = StudiosMockingSetup.DoMockingSetupForStudioModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            //Assert.Equal(model.Object.MovieStudios?.Count, entity.MovieStudios?.Count);
            model.VerifyGet(x => x.MovieStudios, Times.Once);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsStudioProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var model = StudiosMockingSetup.DoMockingSetupForStudioModel();
            // Act
            IStudio existingEntity = new Studio { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            model.VerifyGet(x => x.MovieStudios, Times.Once);
            //Assert.Equal(model.Object.MovieStudios?.Count, existingEntity.MovieStudios?.Count);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModel_AssignsStudioProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var entity = StudiosMockingSetup.DoMockingSetupForStudio();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            // <None>
            // Associated Objects
            Assert.Equal(entity.Object.MovieStudios?.Count, model.MovieStudios?.Count);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModelLite_AssignsLiteOnlyStudioProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var entity = StudiosMockingSetup.DoMockingSetupForStudio();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            // <None>
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToModelListing_AssignsListingOnlyStudioProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var entity = StudiosMockingSetup.DoMockingSetupForStudio();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            // <None>
            // Return Entity
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_MapToSearchModel_AssignsStudioSearchProperties()
        {
            // Arrange
            var mapper = new StudioMapper();
            var model = StudiosMockingSetup.DoMockingSetupForStudioModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new StudioMapper();
            var model = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
            var entity = StudiosMockingSetup.DoMockingSetupForStudio(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Studios")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new StudioMapper();
            var model = StudiosMockingSetup.DoMockingSetupForStudioModel(1);
            var entity = StudiosMockingSetup.DoMockingSetupForStudio(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
