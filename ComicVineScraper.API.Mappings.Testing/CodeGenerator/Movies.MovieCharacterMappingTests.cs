// <auto-generated>
// <copyright file="Movies.IMovieCharacterMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieCharactersMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Movies
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class MovieCharactersMockingSetup
    {
        public static Mock<IMovieCharacterModel> DoMockingSetupForMovieCharacterModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieCharacterModel = new Mock<IMovieCharacterModel>();
            // Mock Functions
            mockMovieCharacterModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieCharacterModel.Setup(m => m.Active).Returns(() => true);
            mockMovieCharacterModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieCharacterModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieCharacterModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieCharacterModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieCharacterModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieCharacterModel.Setup(m => m.Name).Returns(() => name);
            //mockMovieCharacterModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieCharacterModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieCharacterModel.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieCharacterModel.Setup(m => m.Movie).Returns(() => new MovieModel());
            mockMovieCharacterModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockMovieCharacterModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            // Associated Objects
            // <None>
            // Return
            return mockMovieCharacterModel;
        }

        public static Mock<IMovieCharacter> DoMockingSetupForMovieCharacter(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieCharacter = new Mock<IMovieCharacter>();
            // Mock Functions
            mockMovieCharacter.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieCharacter.Setup(m => m.Active).Returns(() => true);
            mockMovieCharacter.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieCharacter.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieCharacter.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieCharacter.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieCharacter.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieCharacter.Setup(m => m.Name).Returns(() => name);
            //mockMovieCharacter.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieCharacter.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockMovieCharacter.Setup(m => m.MovieId).Returns(() => 1);
            mockMovieCharacter.Setup(m => m.Movie).Returns(() => new Movie());
            mockMovieCharacter.Setup(m => m.CharacterId).Returns(() => 1);
            mockMovieCharacter.Setup(m => m.Character).Returns(() => new Character());
            // Associated Objects
            // <None>
            // Return
            return mockMovieCharacter;
        }
    }

    public class MovieCharacterMappingExtensionsTests
    {
        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieCharacterModel>(), It.IsAny<int>()));
            var mockModel = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieCharacterModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "MovieCharacters")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<MovieCharacterMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieCharacterModel>(), ref It.IsAny<IMovieCharacter>(), It.IsAny<int>()));
        //    var mockModel = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
        //    var mockEntity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
        //    MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieCharacterModel>(), ref It.IsAny<IMovieCharacter>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IMovieCharacter>(), It.IsAny<int>()));
            var mockEntity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IMovieCharacter>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IMovieCharacter>(), It.IsAny<int>()));
            var mockEntity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IMovieCharacter>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IMovieCharacter>(), It.IsAny<int>()));
            var mockEntity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IMovieCharacter>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IMovieCharacterModel>()));
            var mockModel = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IMovieCharacterModel>()), Times.Once);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<MovieCharacterMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IMovieCharacterModel>(), It.IsAny<IMovieCharacter>()));
            MovieCharacterMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
            var mockEntity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IMovieCharacterModel>(), It.IsAny<IMovieCharacter>()), Times.Once);
        }
    }

    public class MovieCharactersMappingTests
    {
        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToEntity_AssignsMovieCharacterProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var model = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, entity.MovieId);
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsMovieCharacterProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var model = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel();
            // Act
            IMovieCharacter existingEntity = new MovieCharacter { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.MovieId, existingEntity.MovieId);
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModel_AssignsMovieCharacterProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var entity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModelLite_AssignsLiteOnlyMovieCharacterProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var entity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToModelListing_AssignsListingOnlyMovieCharacterProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var entity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.MovieId, model.MovieId);
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            // Return Entity
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_MapToSearchModel_AssignsMovieCharacterSearchProperties()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var model = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.MovieId, searchModel.MovieId);
            Assert.Equal(model.Object.Movie?.CustomKey, searchModel.MovieCustomKey);
            Assert.Equal(model.Object.Movie?.ApiDetailUrl, searchModel.MovieApiDetailUrl);
            Assert.Equal(model.Object.Movie?.SiteDetailUrl, searchModel.MovieSiteDetailUrl);
            Assert.Equal(model.Object.Movie?.Name, searchModel.MovieName);
            Assert.Equal(model.Object.Movie?.ShortDescription, searchModel.MovieShortDescription);
            Assert.Equal(model.Object.Movie?.Description, searchModel.MovieDescription);
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var model = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
            var entity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "MovieCharacters")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new MovieCharacterMapper();
            var model = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacterModel(1);
            var entity = MovieCharactersMockingSetup.DoMockingSetupForMovieCharacter(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
