// <auto-generated>
// <copyright file="Concepts.IConceptMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ConceptsMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Concepts
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class ConceptsMockingSetup
    {
        public static Mock<IConceptModel> DoMockingSetupForConceptModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockConceptModel = new Mock<IConceptModel>();
            // Mock Functions
            mockConceptModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockConceptModel.Setup(m => m.Active).Returns(() => true);
            mockConceptModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockConceptModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockConceptModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockConceptModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockConceptModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockConceptModel.Setup(m => m.Name).Returns(() => name);
            //mockConceptModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockConceptModel.Setup(m => m.Description).Returns(() => "long");
            mockConceptModel.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockConceptModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockConceptModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockConceptModel.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockConceptModel.Setup(m => m.FirstIssueAppearance).Returns(() => new IssueModel());
            // Associated Objects
            mockConceptModel.Setup(m => m.ConceptAliases).Returns(() => new List<IConceptAliasModel>());
            mockConceptModel.Setup(m => m.ConceptIssuesAppearedIn).Returns(() => new List<IConceptAppearedInIssueModel>());
            mockConceptModel.Setup(m => m.ConceptIssues).Returns(() => new List<IConceptIssueModel>());
            mockConceptModel.Setup(m => m.ConceptMovies).Returns(() => new List<IConceptMovieModel>());
            mockConceptModel.Setup(m => m.ConceptVolumes).Returns(() => new List<IConceptVolumeModel>());
            // Return
            return mockConceptModel;
        }

        public static Mock<IConcept> DoMockingSetupForConcept(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockConcept = new Mock<IConcept>();
            // Mock Functions
            mockConcept.Setup(m => m.Id).Returns(() => idReturnValue);
            mockConcept.Setup(m => m.Active).Returns(() => true);
            mockConcept.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockConcept.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockConcept.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockConcept.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockConcept.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockConcept.Setup(m => m.Name).Returns(() => name);
            //mockConcept.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockConcept.Setup(m => m.Description).Returns(() => "long");
            mockConcept.Setup(m => m.StartYear).Returns(() => 2000);
            // Related Objects
            mockConcept.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockConcept.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockConcept.Setup(m => m.FirstIssueAppearanceId).Returns(() => 1);
            mockConcept.Setup(m => m.FirstIssueAppearance).Returns(() => new Issue());
            // Associated Objects
            mockConcept.Setup(m => m.ConceptAliases).Returns(() => new List<IConceptAlias>());
            mockConcept.Setup(m => m.ConceptIssuesAppearedIn).Returns(() => new List<IConceptAppearedInIssue>());
            mockConcept.Setup(m => m.ConceptIssues).Returns(() => new List<IConceptIssue>());
            mockConcept.Setup(m => m.ConceptMovies).Returns(() => new List<IConceptMovie>());
            mockConcept.Setup(m => m.ConceptVolumes).Returns(() => new List<IConceptVolume>());
            // Return
            return mockConcept;
        }
    }

    public class ConceptMappingExtensionsTests
    {
        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IConceptModel>(), It.IsAny<int>()));
            var mockModel = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IConceptModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "Concepts")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<ConceptMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IConceptModel>(), ref It.IsAny<IConcept>(), It.IsAny<int>()));
        //    var mockModel = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
        //    var mockEntity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
        //    ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IConceptModel>(), ref It.IsAny<IConcept>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IConcept>(), It.IsAny<int>()));
            var mockEntity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IConcept>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IConcept>(), It.IsAny<int>()));
            var mockEntity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IConcept>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IConcept>(), It.IsAny<int>()));
            var mockEntity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IConcept>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IConceptModel>()));
            var mockModel = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IConceptModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<ConceptMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IConceptModel>(), It.IsAny<IConcept>()));
            ConceptMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
            var mockEntity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IConceptModel>(), It.IsAny<IConcept>()), Times.Once);
        }
    }

    public class ConceptsMappingTests
    {
        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToEntity_AssignsConceptProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var model = ConceptsMockingSetup.DoMockingSetupForConceptModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.StartYear, entity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, entity.FirstIssueAppearanceId);
            // Associated Objects
            //Assert.Equal(model.Object.ConceptAliases?.Count, entity.ConceptAliases?.Count);
            model.VerifyGet(x => x.ConceptAliases, Times.Once);
            //Assert.Equal(model.Object.ConceptIssuesAppearedIn?.Count, entity.ConceptIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.ConceptIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.ConceptIssues?.Count, entity.ConceptIssues?.Count);
            model.VerifyGet(x => x.ConceptIssues, Times.Once);
            //Assert.Equal(model.Object.ConceptMovies?.Count, entity.ConceptMovies?.Count);
            model.VerifyGet(x => x.ConceptMovies, Times.Once);
            //Assert.Equal(model.Object.ConceptVolumes?.Count, entity.ConceptVolumes?.Count);
            model.VerifyGet(x => x.ConceptVolumes, Times.Once);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsConceptProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var model = ConceptsMockingSetup.DoMockingSetupForConceptModel();
            // Act
            IConcept existingEntity = new Concept { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.StartYear, existingEntity.StartYear);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.FirstIssueAppearanceId, existingEntity.FirstIssueAppearanceId);
            // Associated Objects
            model.VerifyGet(x => x.ConceptAliases, Times.Once);
            //Assert.Equal(model.Object.ConceptAliases?.Count, existingEntity.ConceptAliases?.Count);
            model.VerifyGet(x => x.ConceptIssuesAppearedIn, Times.Once);
            //Assert.Equal(model.Object.ConceptIssuesAppearedIn?.Count, existingEntity.ConceptIssuesAppearedIn?.Count);
            model.VerifyGet(x => x.ConceptIssues, Times.Once);
            //Assert.Equal(model.Object.ConceptIssues?.Count, existingEntity.ConceptIssues?.Count);
            model.VerifyGet(x => x.ConceptMovies, Times.Once);
            //Assert.Equal(model.Object.ConceptMovies?.Count, existingEntity.ConceptMovies?.Count);
            model.VerifyGet(x => x.ConceptVolumes, Times.Once);
            //Assert.Equal(model.Object.ConceptVolumes?.Count, existingEntity.ConceptVolumes?.Count);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModel_AssignsConceptProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var entity = ConceptsMockingSetup.DoMockingSetupForConcept();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            // Associated Objects
            Assert.Equal(entity.Object.ConceptAliases?.Count, model.ConceptAliases?.Count);
            Assert.Equal(entity.Object.ConceptIssuesAppearedIn?.Count, model.ConceptIssuesAppearedIn?.Count);
            Assert.Equal(entity.Object.ConceptIssues?.Count, model.ConceptIssues?.Count);
            Assert.Equal(entity.Object.ConceptMovies?.Count, model.ConceptMovies?.Count);
            Assert.Equal(entity.Object.ConceptVolumes?.Count, model.ConceptVolumes?.Count);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModelLite_AssignsLiteOnlyConceptProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var entity = ConceptsMockingSetup.DoMockingSetupForConcept();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToModelListing_AssignsListingOnlyConceptProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var entity = ConceptsMockingSetup.DoMockingSetupForConcept();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.StartYear, model.StartYear);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.FirstIssueAppearanceId, model.FirstIssueAppearanceId);
            // Return Entity
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_MapToSearchModel_AssignsConceptSearchProperties()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var model = ConceptsMockingSetup.DoMockingSetupForConceptModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.FirstIssueAppearanceId, searchModel.FirstIssueAppearanceId);
            Assert.Equal(model.Object.FirstIssueAppearance?.CustomKey, searchModel.FirstIssueAppearanceCustomKey);
            Assert.Equal(model.Object.FirstIssueAppearance?.ApiDetailUrl, searchModel.FirstIssueAppearanceApiDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.SiteDetailUrl, searchModel.FirstIssueAppearanceSiteDetailUrl);
            Assert.Equal(model.Object.FirstIssueAppearance?.Name, searchModel.FirstIssueAppearanceName);
            Assert.Equal(model.Object.FirstIssueAppearance?.ShortDescription, searchModel.FirstIssueAppearanceShortDescription);
            Assert.Equal(model.Object.FirstIssueAppearance?.Description, searchModel.FirstIssueAppearanceDescription);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var model = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
            var entity = ConceptsMockingSetup.DoMockingSetupForConcept(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Concepts")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new ConceptMapper();
            var model = ConceptsMockingSetup.DoMockingSetupForConceptModel(1);
            var entity = ConceptsMockingSetup.DoMockingSetupForConcept(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
