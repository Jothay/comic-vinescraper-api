// <auto-generated>
// <copyright file="Characters.ICharacterTeamMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the CharacterTeamsMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Characters
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class CharacterTeamsMockingSetup
    {
        public static Mock<ICharacterTeamModel> DoMockingSetupForCharacterTeamModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterTeamModel = new Mock<ICharacterTeamModel>();
            // Mock Functions
            mockCharacterTeamModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterTeamModel.Setup(m => m.Active).Returns(() => true);
            mockCharacterTeamModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterTeamModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterTeamModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterTeamModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterTeamModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterTeamModel.Setup(m => m.Name).Returns(() => name);
            //mockCharacterTeamModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterTeamModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterTeamModel.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterTeamModel.Setup(m => m.Character).Returns(() => new CharacterModel());
            mockCharacterTeamModel.Setup(m => m.TeamId).Returns(() => 1);
            mockCharacterTeamModel.Setup(m => m.Team).Returns(() => new TeamModel());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterTeamModel;
        }

        public static Mock<ICharacterTeam> DoMockingSetupForCharacterTeam(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockCharacterTeam = new Mock<ICharacterTeam>();
            // Mock Functions
            mockCharacterTeam.Setup(m => m.Id).Returns(() => idReturnValue);
            mockCharacterTeam.Setup(m => m.Active).Returns(() => true);
            mockCharacterTeam.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockCharacterTeam.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterTeam.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockCharacterTeam.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockCharacterTeam.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockCharacterTeam.Setup(m => m.Name).Returns(() => name);
            //mockCharacterTeam.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockCharacterTeam.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockCharacterTeam.Setup(m => m.CharacterId).Returns(() => 1);
            mockCharacterTeam.Setup(m => m.Character).Returns(() => new Character());
            mockCharacterTeam.Setup(m => m.TeamId).Returns(() => 1);
            mockCharacterTeam.Setup(m => m.Team).Returns(() => new Team());
            // Associated Objects
            // <None>
            // Return
            return mockCharacterTeam;
        }
    }

    public class CharacterTeamMappingExtensionsTests
    {
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterTeamModel>(), It.IsAny<int>()));
            var mockModel = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterTeamModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "CharacterTeams")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<CharacterTeamMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ICharacterTeamModel>(), ref It.IsAny<ICharacterTeam>(), It.IsAny<int>()));
        //    var mockModel = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
        //    var mockEntity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
        //    CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ICharacterTeamModel>(), ref It.IsAny<ICharacterTeam>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ICharacterTeam>(), It.IsAny<int>()));
            var mockEntity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ICharacterTeam>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ICharacterTeam>(), It.IsAny<int>()));
            var mockEntity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ICharacterTeam>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ICharacterTeam>(), It.IsAny<int>()));
            var mockEntity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ICharacterTeam>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ICharacterTeamModel>()));
            var mockModel = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ICharacterTeamModel>()), Times.Once);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<CharacterTeamMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ICharacterTeamModel>(), It.IsAny<ICharacterTeam>()));
            CharacterTeamMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
            var mockEntity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ICharacterTeamModel>(), It.IsAny<ICharacterTeam>()), Times.Once);
        }
    }

    public class CharacterTeamsMappingTests
    {
        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToEntity_AssignsCharacterTeamProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var model = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, entity.CharacterId);
            Assert.Equal(model.Object.TeamId, entity.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsCharacterTeamProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var model = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel();
            // Act
            ICharacterTeam existingEntity = new CharacterTeam { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.CharacterId, existingEntity.CharacterId);
            Assert.Equal(model.Object.TeamId, existingEntity.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModel_AssignsCharacterTeamProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var entity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModelLite_AssignsLiteOnlyCharacterTeamProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var entity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToModelListing_AssignsListingOnlyCharacterTeamProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var entity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.CharacterId, model.CharacterId);
            Assert.Equal(entity.Object.TeamId, model.TeamId);
            // Return Entity
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_MapToSearchModel_AssignsCharacterTeamSearchProperties()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var model = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.CharacterId, searchModel.CharacterId);
            Assert.Equal(model.Object.Character?.CustomKey, searchModel.CharacterCustomKey);
            Assert.Equal(model.Object.Character?.ApiDetailUrl, searchModel.CharacterApiDetailUrl);
            Assert.Equal(model.Object.Character?.SiteDetailUrl, searchModel.CharacterSiteDetailUrl);
            Assert.Equal(model.Object.Character?.Name, searchModel.CharacterName);
            Assert.Equal(model.Object.Character?.ShortDescription, searchModel.CharacterShortDescription);
            Assert.Equal(model.Object.Character?.Description, searchModel.CharacterDescription);
            Assert.Equal(model.Object.TeamId, searchModel.TeamId);
            Assert.Equal(model.Object.Team?.CustomKey, searchModel.TeamCustomKey);
            Assert.Equal(model.Object.Team?.ApiDetailUrl, searchModel.TeamApiDetailUrl);
            Assert.Equal(model.Object.Team?.SiteDetailUrl, searchModel.TeamSiteDetailUrl);
            Assert.Equal(model.Object.Team?.Name, searchModel.TeamName);
            Assert.Equal(model.Object.Team?.ShortDescription, searchModel.TeamShortDescription);
            Assert.Equal(model.Object.Team?.Description, searchModel.TeamDescription);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var model = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
            var entity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "CharacterTeams")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new CharacterTeamMapper();
            var model = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeamModel(1);
            var entity = CharacterTeamsMockingSetup.DoMockingSetupForCharacterTeam(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
