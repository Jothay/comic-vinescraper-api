// <auto-generated>
// <copyright file="Promos.IPromoMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the PromosMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Promos
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class PromosMockingSetup
    {
        public static Mock<IPromoModel> DoMockingSetupForPromoModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPromoModel = new Mock<IPromoModel>();
            // Mock Functions
            mockPromoModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPromoModel.Setup(m => m.Active).Returns(() => true);
            mockPromoModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPromoModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromoModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromoModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPromoModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPromoModel.Setup(m => m.Name).Returns(() => name);
            //mockPromoModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPromoModel.Setup(m => m.Description).Returns(() => "long");
            mockPromoModel.Setup(m => m.Link).Returns(() => "Link");
            // Related Objects
            mockPromoModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPromoModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            mockPromoModel.Setup(m => m.AuthorId).Returns(() => 1);
            mockPromoModel.Setup(m => m.Author).Returns(() => new PersonModel());
            mockPromoModel.Setup(m => m.ResourceTypeId).Returns(() => 1);
            mockPromoModel.Setup(m => m.ResourceType).Returns(() => new ResourceTypeModel());
            // Associated Objects
            // <None>
            // Return
            return mockPromoModel;
        }

        public static Mock<IPromo> DoMockingSetupForPromo(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockPromo = new Mock<IPromo>();
            // Mock Functions
            mockPromo.Setup(m => m.Id).Returns(() => idReturnValue);
            mockPromo.Setup(m => m.Active).Returns(() => true);
            mockPromo.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockPromo.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromo.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockPromo.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockPromo.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockPromo.Setup(m => m.Name).Returns(() => name);
            //mockPromo.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockPromo.Setup(m => m.Description).Returns(() => "long");
            mockPromo.Setup(m => m.Link).Returns(() => "Link");
            // Related Objects
            mockPromo.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockPromo.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            mockPromo.Setup(m => m.AuthorId).Returns(() => 1);
            mockPromo.Setup(m => m.Author).Returns(() => new Person());
            mockPromo.Setup(m => m.ResourceTypeId).Returns(() => 1);
            mockPromo.Setup(m => m.ResourceType).Returns(() => new ResourceType());
            // Associated Objects
            // <None>
            // Return
            return mockPromo;
        }
    }

    public class PromoMappingExtensionsTests
    {
        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPromoModel>(), It.IsAny<int>()));
            var mockModel = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPromoModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "Promos")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<PromoMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IPromoModel>(), ref It.IsAny<IPromo>(), It.IsAny<int>()));
        //    var mockModel = PromosMockingSetup.DoMockingSetupForPromoModel(1);
        //    var mockEntity = PromosMockingSetup.DoMockingSetupForPromo(1);
        //    PromoMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IPromoModel>(), ref It.IsAny<IPromo>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IPromo>(), It.IsAny<int>()));
            var mockEntity = PromosMockingSetup.DoMockingSetupForPromo(1);
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IPromo>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IPromo>(), It.IsAny<int>()));
            var mockEntity = PromosMockingSetup.DoMockingSetupForPromo(1);
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IPromo>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IPromo>(), It.IsAny<int>()));
            var mockEntity = PromosMockingSetup.DoMockingSetupForPromo(1);
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IPromo>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IPromoModel>()));
            var mockModel = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IPromoModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<PromoMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>()));
            PromoMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            var mockEntity = PromosMockingSetup.DoMockingSetupForPromo(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IPromoModel>(), It.IsAny<IPromo>()), Times.Once);
        }
    }

    public class PromosMappingTests
    {
        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToEntity_AssignsPromoProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var model = PromosMockingSetup.DoMockingSetupForPromoModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.Link, entity.Link);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            Assert.Equal(model.Object.AuthorId, entity.AuthorId);
            Assert.Equal(model.Object.ResourceTypeId, entity.ResourceTypeId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsPromoProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var model = PromosMockingSetup.DoMockingSetupForPromoModel();
            // Act
            IPromo existingEntity = new Promo { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.Link, existingEntity.Link);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            Assert.Equal(model.Object.AuthorId, existingEntity.AuthorId);
            Assert.Equal(model.Object.ResourceTypeId, existingEntity.ResourceTypeId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModel_AssignsPromoProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var entity = PromosMockingSetup.DoMockingSetupForPromo();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Link, model.Link);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.ResourceTypeId, model.ResourceTypeId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModelLite_AssignsLiteOnlyPromoProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var entity = PromosMockingSetup.DoMockingSetupForPromo();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Link, model.Link);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.ResourceTypeId, model.ResourceTypeId);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToModelListing_AssignsListingOnlyPromoProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var entity = PromosMockingSetup.DoMockingSetupForPromo();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.Link, model.Link);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            Assert.Equal(entity.Object.AuthorId, model.AuthorId);
            Assert.Equal(entity.Object.ResourceTypeId, model.ResourceTypeId);
            // Return Entity
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_MapToSearchModel_AssignsPromoSearchProperties()
        {
            // Arrange
            var mapper = new PromoMapper();
            var model = PromosMockingSetup.DoMockingSetupForPromoModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.AuthorId, searchModel.AuthorId);
            Assert.Equal(model.Object.Author?.CustomKey, searchModel.AuthorCustomKey);
            Assert.Equal(model.Object.Author?.ApiDetailUrl, searchModel.AuthorApiDetailUrl);
            Assert.Equal(model.Object.Author?.SiteDetailUrl, searchModel.AuthorSiteDetailUrl);
            Assert.Equal(model.Object.Author?.Name, searchModel.AuthorName);
            Assert.Equal(model.Object.Author?.ShortDescription, searchModel.AuthorShortDescription);
            Assert.Equal(model.Object.Author?.Description, searchModel.AuthorDescription);
            Assert.Equal(model.Object.ResourceTypeId, searchModel.ResourceTypeId);
            Assert.Equal(model.Object.ResourceType?.CustomKey, searchModel.ResourceTypeCustomKey);
            Assert.Equal(model.Object.ResourceType?.ApiDetailUrl, searchModel.ResourceTypeApiDetailUrl);
            Assert.Equal(model.Object.ResourceType?.SiteDetailUrl, searchModel.ResourceTypeSiteDetailUrl);
            Assert.Equal(model.Object.ResourceType?.Name, searchModel.ResourceTypeName);
            Assert.Equal(model.Object.ResourceType?.ShortDescription, searchModel.ResourceTypeShortDescription);
            Assert.Equal(model.Object.ResourceType?.Description, searchModel.ResourceTypeDescription);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new PromoMapper();
            var model = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            var entity = PromosMockingSetup.DoMockingSetupForPromo(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Promos")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new PromoMapper();
            var model = PromosMockingSetup.DoMockingSetupForPromoModel(1);
            var entity = PromosMockingSetup.DoMockingSetupForPromo(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
