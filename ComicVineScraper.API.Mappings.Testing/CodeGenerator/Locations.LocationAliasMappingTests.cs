// <auto-generated>
// <copyright file="Locations.ILocationAliasMappingTests.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Implements the LocationAliasesMappingTests class.</summary>
// <remarks>This file was auto-generated using MappingTestingFileMaster.tt in
// ComicVineScraper.API.Mappings.Testing\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Testing.Mappings.Locations
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class LocationAliasesMockingSetup
    {
        public static Mock<ILocationAliasModel> DoMockingSetupForLocationAliasModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocationAliasModel = new Mock<ILocationAliasModel>();
            // Mock Functions
            mockLocationAliasModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationAliasModel.Setup(m => m.Active).Returns(() => true);
            mockLocationAliasModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationAliasModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAliasModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAliasModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationAliasModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocationAliasModel.Setup(m => m.Name).Returns(() => name);
            //mockLocationAliasModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocationAliasModel.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockLocationAliasModel.Setup(m => m.LocationId).Returns(() => 1);
            mockLocationAliasModel.Setup(m => m.Location).Returns(() => new LocationModel());
            // Associated Objects
            // <None>
            // Return
            return mockLocationAliasModel;
        }

        public static Mock<ILocationAlias> DoMockingSetupForLocationAlias(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockLocationAlias = new Mock<ILocationAlias>();
            // Mock Functions
            mockLocationAlias.Setup(m => m.Id).Returns(() => idReturnValue);
            mockLocationAlias.Setup(m => m.Active).Returns(() => true);
            mockLocationAlias.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockLocationAlias.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAlias.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockLocationAlias.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockLocationAlias.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockLocationAlias.Setup(m => m.Name).Returns(() => name);
            //mockLocationAlias.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockLocationAlias.Setup(m => m.Description).Returns(() => "long");
            // <None>
            // Related Objects
            mockLocationAlias.Setup(m => m.LocationId).Returns(() => 1);
            mockLocationAlias.Setup(m => m.Location).Returns(() => new Location());
            // Associated Objects
            // <None>
            // Return
            return mockLocationAlias;
        }
    }

    public class LocationAliasMappingExtensionsTests
    {
        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationAliasModel>(), It.IsAny<int>()));
            var mockModel = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationAliasModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "LocationAliases")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<LocationAliasMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<ILocationAliasModel>(), ref It.IsAny<ILocationAlias>(), It.IsAny<int>()));
        //    var mockModel = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
        //    var mockEntity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
        //    LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<ILocationAliasModel>(), ref It.IsAny<ILocationAlias>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<ILocationAlias>(), It.IsAny<int>()));
            var mockEntity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<ILocationAlias>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<ILocationAlias>(), It.IsAny<int>()));
            var mockEntity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<ILocationAlias>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<ILocationAlias>(), It.IsAny<int>()));
            var mockEntity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<ILocationAlias>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<ILocationAliasModel>()));
            var mockModel = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<ILocationAliasModel>()), Times.Once);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<LocationAliasMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<ILocationAliasModel>(), It.IsAny<ILocationAlias>()));
            LocationAliasMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
            var mockEntity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<ILocationAliasModel>(), It.IsAny<ILocationAlias>()), Times.Once);
        }
    }

    public class LocationAliasesMappingTests
    {
        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToEntity_AssignsLocationAliasProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var model = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.LocationId, entity.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsLocationAliasProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var model = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel();
            // Act
            ILocationAlias existingEntity = new LocationAlias { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(model.Object.LocationId, existingEntity.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModel_AssignsLocationAliasProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var entity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            // Associated Objects
            // <None>
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModelLite_AssignsLiteOnlyLocationAliasProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var entity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToModelListing_AssignsListingOnlyLocationAliasProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var entity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            // <None>
            // Related Objects
            Assert.Equal(entity.Object.LocationId, model.LocationId);
            // Return Entity
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_MapToSearchModel_AssignsLocationAliasSearchProperties()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var model = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.LocationId, searchModel.LocationId);
            Assert.Equal(model.Object.Location?.CustomKey, searchModel.LocationCustomKey);
            Assert.Equal(model.Object.Location?.ApiDetailUrl, searchModel.LocationApiDetailUrl);
            Assert.Equal(model.Object.Location?.SiteDetailUrl, searchModel.LocationSiteDetailUrl);
            Assert.Equal(model.Object.Location?.Name, searchModel.LocationName);
            Assert.Equal(model.Object.Location?.ShortDescription, searchModel.LocationShortDescription);
            Assert.Equal(model.Object.Location?.Description, searchModel.LocationDescription);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var model = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
            var entity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "LocationAliases")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new LocationAliasMapper();
            var model = LocationAliasesMockingSetup.DoMockingSetupForLocationAliasModel(1);
            var entity = LocationAliasesMockingSetup.DoMockingSetupForLocationAlias(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
