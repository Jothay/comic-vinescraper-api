// <auto-generated>
// <copyright file="Movies.IMovieRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MoviesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Mappings.Movies
{
    using System.Collections.Generic;
    using API.Models;
    using API.Mappings;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Models;
    using Moq;
    using Xunit;

    public static class MoviesMockingSetup
    {
        public static Mock<IMovieModel> DoMockingSetupForMovieModel(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovieModel = new Mock<IMovieModel>();
            // Mock Functions
            mockMovieModel.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovieModel.Setup(m => m.Active).Returns(() => true);
            mockMovieModel.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovieModel.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieModel.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovieModel.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovieModel.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovieModel.Setup(m => m.Name).Returns(() => name);
            //mockMovieModel.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovieModel.Setup(m => m.Description).Returns(() => "long");
            mockMovieModel.Setup(m => m.HasStaffReview).Returns(() => true);
            mockMovieModel.Setup(m => m.Distributor).Returns(() => "Distributor");
            mockMovieModel.Setup(m => m.BoxOfficeRevenue).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.TotalRevenue).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.Budget).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.Rating).Returns(() => 1.25m);
            mockMovieModel.Setup(m => m.ReleaseDate).Returns(() => new System.DateTime());
            mockMovieModel.Setup(m => m.RunTime).Returns(() => 1.25m);
            // Related Objects
            mockMovieModel.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockMovieModel.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFileModel());
            // Associated Objects
            mockMovieModel.Setup(m => m.MovieCharacters).Returns(() => new List<IMovieCharacterModel>());
            mockMovieModel.Setup(m => m.MovieConcepts).Returns(() => new List<IMovieConceptModel>());
            mockMovieModel.Setup(m => m.MovieLocations).Returns(() => new List<IMovieLocationModel>());
            mockMovieModel.Setup(m => m.MovieObjects).Returns(() => new List<IMovieObjectModel>());
            mockMovieModel.Setup(m => m.MovieProducers).Returns(() => new List<IMovieProducerModel>());
            mockMovieModel.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArcModel>());
            mockMovieModel.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudioModel>());
            mockMovieModel.Setup(m => m.MovieTeams).Returns(() => new List<IMovieTeamModel>());
            mockMovieModel.Setup(m => m.MovieWriters).Returns(() => new List<IMovieWriterModel>());
            // Return
            return mockMovieModel;
        }

        public static Mock<IMovie> DoMockingSetupForMovie(int idReturnValue = 0, string name = "Stephen King")
        {
            var mockMovie = new Mock<IMovie>();
            // Mock Functions
            mockMovie.Setup(m => m.Id).Returns(() => idReturnValue);
            mockMovie.Setup(m => m.Active).Returns(() => true);
            mockMovie.Setup(m => m.CustomKey).Returns(() => "KING-STEPHEN");
            mockMovie.Setup(m => m.ApiDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovie.Setup(m => m.SiteDetailUrl).Returns(() => "/TEST/KING-STEPHEN");
            mockMovie.Setup(m => m.CreatedDate).Returns(() => new System.DateTime(2015, 10, 1));
            mockMovie.Setup(m => m.UpdatedDate).Returns(() => null);
            //mockMovie.Setup(m => m.Name).Returns(() => name);
            //mockMovie.Setup(m => m.ShortDescription).Returns(() => "short");
            //mockMovie.Setup(m => m.Description).Returns(() => "long");
            mockMovie.Setup(m => m.HasStaffReview).Returns(() => true);
            mockMovie.Setup(m => m.Distributor).Returns(() => "Distributor");
            mockMovie.Setup(m => m.BoxOfficeRevenue).Returns(() => 1.25m);
            mockMovie.Setup(m => m.TotalRevenue).Returns(() => 1.25m);
            mockMovie.Setup(m => m.Budget).Returns(() => 1.25m);
            mockMovie.Setup(m => m.Rating).Returns(() => 1.25m);
            mockMovie.Setup(m => m.ReleaseDate).Returns(() => new System.DateTime());
            mockMovie.Setup(m => m.RunTime).Returns(() => 1.25m);
            // Related Objects
            mockMovie.Setup(m => m.PrimaryImageFileId).Returns(() => 1);
            mockMovie.Setup(m => m.PrimaryImageFile).Returns(() => new ImageFile());
            // Associated Objects
            mockMovie.Setup(m => m.MovieCharacters).Returns(() => new List<IMovieCharacter>());
            mockMovie.Setup(m => m.MovieConcepts).Returns(() => new List<IMovieConcept>());
            mockMovie.Setup(m => m.MovieLocations).Returns(() => new List<IMovieLocation>());
            mockMovie.Setup(m => m.MovieObjects).Returns(() => new List<IMovieObject>());
            mockMovie.Setup(m => m.MovieProducers).Returns(() => new List<IMovieProducer>());
            mockMovie.Setup(m => m.MovieStoryArcs).Returns(() => new List<IMovieStoryArc>());
            mockMovie.Setup(m => m.MovieStudios).Returns(() => new List<IMovieStudio>());
            mockMovie.Setup(m => m.MovieTeams).Returns(() => new List<IMovieTeam>());
            mockMovie.Setup(m => m.MovieWriters).Returns(() => new List<IMovieWriter>());
            // Return
            return mockMovie;
        }
    }

    public class MovieMappingExtensionsTests
    {
        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToEntityExtension_CallsMapToEntity()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieModel>(), It.IsAny<int>()));
            var mockModel = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToEntity();
            // Assert
            mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieModel>(), It.IsAny<int>()), Times.Once);
        }

        //[Fact][Trait("Category", "Movies")]
        //public void Verify_MapToEntityWithExistingExtension_CallsMapToEntity()
        //{
        //    // Arrange
        //    var mockMapper = new Mock<MovieMapper>();
        //    mockMapper.Setup(x => x.MapToEntity(It.IsAny<IMovieModel>(), ref It.IsAny<IMovie>(), It.IsAny<int>()));
        //    var mockModel = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
        //    var mockEntity = MoviesMockingSetup.DoMockingSetupForMovie(1);
        //    MovieMapperExtensions.OverrideMapper(mockMapper.Object);
        //    // Act
        //    mockModel.Object.MapToEntity(ref mockEntity);
        //    // Assert
        //    mockMapper.Verify(x => x.MapToEntity(It.IsAny<IMovieModel>(), ref It.IsAny<IMovie>(), It.IsAny<int>()), Times.Once);
        //}

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.MapToModel(It.IsAny<IMovie>(), It.IsAny<int>()));
            var mockEntity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModel();
            // Assert
            mockMapper.Verify(x => x.MapToModel(It.IsAny<IMovie>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModelLiteExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.MapToModelLite(It.IsAny<IMovie>(), It.IsAny<int>()));
            var mockEntity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelLite();
            // Assert
            mockMapper.Verify(x => x.MapToModelLite(It.IsAny<IMovie>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModelListingExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.MapToModelListing(It.IsAny<IMovie>(), It.IsAny<int>()));
            var mockEntity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockEntity.Object.MapToModelListing();
            // Assert
            mockMapper.Verify(x => x.MapToModelListing(It.IsAny<IMovie>(), It.IsAny<int>()), Times.Once);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToSearchModelExtension_CallsMapToModel()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.MapToSearchModel(It.IsAny<IMovieModel>()));
            var mockModel = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            // Act
            mockModel.Object.MapToSearchModel();
            // Assert
            mockMapper.Verify(x => x.MapToSearchModel(It.IsAny<IMovieModel>()), Times.Once);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_AreEqualExtension_CallsAreEqual()
        {
            // Arrange
            var mockMapper = new Mock<MovieMapper>();
            mockMapper.Setup(x => x.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>()));
            MovieMapperExtensions.OverrideMapper(mockMapper.Object);
            var mockModel = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            var mockEntity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            // Act
            mockModel.Object.AreEqual(mockEntity.Object);
            // Assert
            mockMapper.Verify(x => x.AreEqual(It.IsAny<IMovieModel>(), It.IsAny<IMovie>()), Times.Once);
        }
    }

    public class MoviesMappingTests
    {
        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToEntity_AssignsMovieProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel();
            // Act
            var entity = mapper.MapToEntity(model.Object);
            // Assert
            Assert.Equal(model.Object.HasStaffReview, entity.HasStaffReview);
            Assert.Equal(model.Object.Distributor, entity.Distributor);
            Assert.Equal(model.Object.BoxOfficeRevenue, entity.BoxOfficeRevenue);
            Assert.Equal(model.Object.TotalRevenue, entity.TotalRevenue);
            Assert.Equal(model.Object.Budget, entity.Budget);
            Assert.Equal(model.Object.Rating, entity.Rating);
            Assert.Equal(model.Object.ReleaseDate, entity.ReleaseDate);
            Assert.Equal(model.Object.RunTime, entity.RunTime);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, entity.PrimaryImageFileId);
            // Associated Objects
            //Assert.Equal(model.Object.MovieCharacters?.Count, entity.MovieCharacters?.Count);
            model.VerifyGet(x => x.MovieCharacters, Times.Once);
            //Assert.Equal(model.Object.MovieConcepts?.Count, entity.MovieConcepts?.Count);
            model.VerifyGet(x => x.MovieConcepts, Times.Once);
            //Assert.Equal(model.Object.MovieLocations?.Count, entity.MovieLocations?.Count);
            model.VerifyGet(x => x.MovieLocations, Times.Once);
            //Assert.Equal(model.Object.MovieObjects?.Count, entity.MovieObjects?.Count);
            model.VerifyGet(x => x.MovieObjects, Times.Once);
            //Assert.Equal(model.Object.MovieProducers?.Count, entity.MovieProducers?.Count);
            model.VerifyGet(x => x.MovieProducers, Times.Once);
            //Assert.Equal(model.Object.MovieStoryArcs?.Count, entity.MovieStoryArcs?.Count);
            model.VerifyGet(x => x.MovieStoryArcs, Times.Once);
            //Assert.Equal(model.Object.MovieStudios?.Count, entity.MovieStudios?.Count);
            model.VerifyGet(x => x.MovieStudios, Times.Once);
            //Assert.Equal(model.Object.MovieTeams?.Count, entity.MovieTeams?.Count);
            model.VerifyGet(x => x.MovieTeams, Times.Once);
            //Assert.Equal(model.Object.MovieWriters?.Count, entity.MovieWriters?.Count);
            model.VerifyGet(x => x.MovieWriters, Times.Once);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToEntity_WithExistingEntity_AssignsMovieProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel();
            // Act
            IMovie existingEntity = new Movie { Id = 1 };
            mapper.MapToEntity(model.Object, ref existingEntity);
            // Assert
            Assert.Equal(model.Object.HasStaffReview, existingEntity.HasStaffReview);
            Assert.Equal(model.Object.Distributor, existingEntity.Distributor);
            Assert.Equal(model.Object.BoxOfficeRevenue, existingEntity.BoxOfficeRevenue);
            Assert.Equal(model.Object.TotalRevenue, existingEntity.TotalRevenue);
            Assert.Equal(model.Object.Budget, existingEntity.Budget);
            Assert.Equal(model.Object.Rating, existingEntity.Rating);
            Assert.Equal(model.Object.ReleaseDate, existingEntity.ReleaseDate);
            Assert.Equal(model.Object.RunTime, existingEntity.RunTime);
            // Related Objects
            Assert.Equal(model.Object.PrimaryImageFileId, existingEntity.PrimaryImageFileId);
            // Associated Objects
            model.VerifyGet(x => x.MovieCharacters, Times.Once);
            //Assert.Equal(model.Object.MovieCharacters?.Count, existingEntity.MovieCharacters?.Count);
            model.VerifyGet(x => x.MovieConcepts, Times.Once);
            //Assert.Equal(model.Object.MovieConcepts?.Count, existingEntity.MovieConcepts?.Count);
            model.VerifyGet(x => x.MovieLocations, Times.Once);
            //Assert.Equal(model.Object.MovieLocations?.Count, existingEntity.MovieLocations?.Count);
            model.VerifyGet(x => x.MovieObjects, Times.Once);
            //Assert.Equal(model.Object.MovieObjects?.Count, existingEntity.MovieObjects?.Count);
            model.VerifyGet(x => x.MovieProducers, Times.Once);
            //Assert.Equal(model.Object.MovieProducers?.Count, existingEntity.MovieProducers?.Count);
            model.VerifyGet(x => x.MovieStoryArcs, Times.Once);
            //Assert.Equal(model.Object.MovieStoryArcs?.Count, existingEntity.MovieStoryArcs?.Count);
            model.VerifyGet(x => x.MovieStudios, Times.Once);
            //Assert.Equal(model.Object.MovieStudios?.Count, existingEntity.MovieStudios?.Count);
            model.VerifyGet(x => x.MovieTeams, Times.Once);
            //Assert.Equal(model.Object.MovieTeams?.Count, existingEntity.MovieTeams?.Count);
            model.VerifyGet(x => x.MovieWriters, Times.Once);
            //Assert.Equal(model.Object.MovieWriters?.Count, existingEntity.MovieWriters?.Count);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModel_AssignsMovieProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var entity = MoviesMockingSetup.DoMockingSetupForMovie();
            // Act
            var model = mapper.MapToModel(entity.Object);
            // Assert
            Assert.Equal(entity.Object.HasStaffReview, model.HasStaffReview);
            Assert.Equal(entity.Object.Distributor, model.Distributor);
            Assert.Equal(entity.Object.BoxOfficeRevenue, model.BoxOfficeRevenue);
            Assert.Equal(entity.Object.TotalRevenue, model.TotalRevenue);
            Assert.Equal(entity.Object.Budget, model.Budget);
            Assert.Equal(entity.Object.Rating, model.Rating);
            Assert.Equal(entity.Object.ReleaseDate, model.ReleaseDate);
            Assert.Equal(entity.Object.RunTime, model.RunTime);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Associated Objects
            Assert.Equal(entity.Object.MovieCharacters?.Count, model.MovieCharacters?.Count);
            Assert.Equal(entity.Object.MovieConcepts?.Count, model.MovieConcepts?.Count);
            Assert.Equal(entity.Object.MovieLocations?.Count, model.MovieLocations?.Count);
            Assert.Equal(entity.Object.MovieObjects?.Count, model.MovieObjects?.Count);
            Assert.Equal(entity.Object.MovieProducers?.Count, model.MovieProducers?.Count);
            Assert.Equal(entity.Object.MovieStoryArcs?.Count, model.MovieStoryArcs?.Count);
            Assert.Equal(entity.Object.MovieStudios?.Count, model.MovieStudios?.Count);
            Assert.Equal(entity.Object.MovieTeams?.Count, model.MovieTeams?.Count);
            Assert.Equal(entity.Object.MovieWriters?.Count, model.MovieWriters?.Count);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModelLite_AssignsLiteOnlyMovieProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var entity = MoviesMockingSetup.DoMockingSetupForMovie();
            // Act
            var model = mapper.MapToModelLite(entity.Object);
            // Assert
            Assert.Equal(entity.Object.HasStaffReview, model.HasStaffReview);
            Assert.Equal(entity.Object.Distributor, model.Distributor);
            Assert.Equal(entity.Object.BoxOfficeRevenue, model.BoxOfficeRevenue);
            Assert.Equal(entity.Object.TotalRevenue, model.TotalRevenue);
            Assert.Equal(entity.Object.Budget, model.Budget);
            Assert.Equal(entity.Object.Rating, model.Rating);
            Assert.Equal(entity.Object.ReleaseDate, model.ReleaseDate);
            Assert.Equal(entity.Object.RunTime, model.RunTime);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToModelListing_AssignsListingOnlyMovieProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var entity = MoviesMockingSetup.DoMockingSetupForMovie();
            // Act
            var model = mapper.MapToModelListing(entity.Object);
            // Assert
            Assert.Equal(entity.Object.HasStaffReview, model.HasStaffReview);
            Assert.Equal(entity.Object.Distributor, model.Distributor);
            Assert.Equal(entity.Object.BoxOfficeRevenue, model.BoxOfficeRevenue);
            Assert.Equal(entity.Object.TotalRevenue, model.TotalRevenue);
            Assert.Equal(entity.Object.Budget, model.Budget);
            Assert.Equal(entity.Object.Rating, model.Rating);
            Assert.Equal(entity.Object.ReleaseDate, model.ReleaseDate);
            Assert.Equal(entity.Object.RunTime, model.RunTime);
            // Related Objects
            Assert.Equal(entity.Object.PrimaryImageFileId, model.PrimaryImageFileId);
            // Return Entity
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_MapToSearchModel_AssignsMovieSearchProperties()
        {
            // Arrange
            var mapper = new MovieMapper();
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel();
            // Act
            var searchModel = mapper.MapToSearchModel(model.Object);
            // Assert
            Assert.Equal(model.Object.PrimaryImageFileId, searchModel.PrimaryImageFileId);
            Assert.Equal(model.Object.PrimaryImageFile?.CustomKey, searchModel.PrimaryImageFileCustomKey);
            Assert.Equal(model.Object.PrimaryImageFile?.ApiDetailUrl, searchModel.PrimaryImageFileApiDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.SiteDetailUrl, searchModel.PrimaryImageFileSiteDetailUrl);
            Assert.Equal(model.Object.PrimaryImageFile?.Name, searchModel.PrimaryImageFileName);
            Assert.Equal(model.Object.PrimaryImageFile?.ShortDescription, searchModel.PrimaryImageFileShortDescription);
            Assert.Equal(model.Object.PrimaryImageFile?.Description, searchModel.PrimaryImageFileDescription);
            Assert.Equal(model.Object.HasStaffReview, searchModel.HasStaffReview);
            Assert.Equal(model.Object.Distributor, searchModel.Distributor);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_AreEqual_WithEqualObjects_ReturnsTrue()
        {
            // Arrange
            var mapper = new MovieMapper();
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            var entity = MoviesMockingSetup.DoMockingSetupForMovie(1);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.True(result);
        }

        [Fact][Trait("Category", "Movies")]
        public void Verify_AreEqual_WithDifferentObjects_ReturnsFalse()
        {
            // Arrange
            var mapper = new MovieMapper();
            var model = MoviesMockingSetup.DoMockingSetupForMovieModel(1);
            var entity = MoviesMockingSetup.DoMockingSetupForMovie(2);
            // Act
            var result = mapper.AreEqual(model.Object, entity.Object);
            // Assert
            Assert.False(result);
        }
    }
}
