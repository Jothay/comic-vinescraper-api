// <auto-generated>
// <copyright file="Movies.IMovieWriterRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieWritersRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryTestingFileMaster.tt in ComicVine.API.Repositories.Testing\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Testing.Repositories.Movies
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using API.Repositories;
    using DataModel.Schema;
    using Interfaces.SearchModels;
    using Moq;
    using SearchModels;
    using Xunit;

    public static class MovieWritersMockingSetup
    {
        public static Mock<DataModel.ModelEntities> DoMockingSetupForContext(bool includeMovieWritersData, out Mock<IDbSet<MovieWriter>> mockSetMovieWriters, bool markAMovieWriterInactive = false)
        {
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00);
            var mockContext = new Mock<DataModel.ModelEntities>();
            // Apply Data and set up IQueryable
            mockSetMovieWriters = new Mock<IDbSet<MovieWriter>>();
            var personData = (!includeMovieWritersData ? new List<MovieWriter>() : new List<MovieWriter>
            {
                new MovieWriter { Id = 1, Active = !markAMovieWriterInactive, CreatedDate = createDate, CustomKey = "KING-STEPHEN", ApiDetailUrl = "/TEST/KING-STEPHEN", },
                new MovieWriter { Id = 2, Active = true, CreatedDate = createDate.AddDays(1), CustomKey = "NIVEN-LARRY", ApiDetailUrl = "/TEST/NIVEN-LARRY", }
            }).AsQueryable();
            mockSetMovieWriters.As<IQueryable<MovieWriter>>().Setup(m => m.Provider).Returns(personData.Provider);
            mockSetMovieWriters.As<IQueryable<MovieWriter>>().Setup(m => m.Expression).Returns(personData.Expression);
            mockSetMovieWriters.As<IQueryable<MovieWriter>>().Setup(m => m.ElementType).Returns(personData.ElementType);
            mockSetMovieWriters.As<IQueryable<MovieWriter>>().Setup(m => m.GetEnumerator()).Returns(personData.GetEnumerator());
            mockContext.Setup(m => m.MovieWriters).Returns(mockSetMovieWriters.Object);
            mockContext.Setup(m => m.SetModified(It.IsAny<object>())).Callback(() => { });
            // Return
            return mockContext;
        }
    }

    public class MovieWritersRepositoryTests
    {
        [Fact]
        public void Verify_Add_Should_AddTheEntityToTheContext()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(false, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            var movieWriters = new MovieWriter { Active = true, CustomKey = "SALVATORE-RAA", };
            // Act
            repository.Add(movieWriters);
            // Assert
            mockSetMovieWriters.Verify(x => x.Add(movieWriters), Times.Once);
        }

        [Fact]
        public void Verify_Remove_Should_RemoveTheEntityFromTheContext()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            var movieWriters = repository.Get(1);
            // Act
            repository.Remove(movieWriters);
            // Assert
            mockSetMovieWriters.Verify(x => x.Remove((MovieWriter)movieWriters), Times.Once);
        }

        [Fact]
        public void Verify_Deactivate_Should_SetTheActivePropertyToFalseOnTheEntity()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            var movieWriters = repository.Get(1);
            // Act
            repository.Deactivate(movieWriters);
            // Assert
            Assert.Equal(false, movieWriters.Active);
        }

        [Fact]
        public void Verify_Update_Should_SetTheEntityStateToModified()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            var movieWriters = repository.Get(1);
            movieWriters.ApiDetailUrl = "/TEST";
            // Act
            repository.Update(movieWriters);
            // Assert
            mockContext.Verify(x => x.SetModified(It.IsAny<object>()), Times.Once);
        }

        [Fact]
        public void Verify_Get_ByID_Should_ReturnTheCorrectMovieWriter()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            // Act
            var movieWriters = repository.Get(1);
            // Assert
                        Assert.Equal("/TEST/KING-STEPHEN", movieWriters.ApiDetailUrl);
        }

        [Fact]
        public void Verify_Get_ByKey_Should_ReturnTheCorrectMovieWriter()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            // Act
            var movieWriters = repository.Get("KING-STEPHEN");
            // Assert
                        Assert.Equal("/TEST/KING-STEPHEN", movieWriters.ApiDetailUrl);
        }

        [Fact]
        public void Verify_List_Should_ReturnAListOfMovieWritersWithData()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            // Act
            var movieWriters = repository.List.ToArray();
            // Assert
            Assert.Equal(2, movieWriters.Length);
            Assert.Equal(1, movieWriters[0].Id);
            Assert.Equal("/TEST/KING-STEPHEN", movieWriters[0].ApiDetailUrl);
            Assert.Equal(2, movieWriters[1].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", movieWriters[1].ApiDetailUrl);
        }

        [Fact]
        public void Verify_Search_Should_ReturnAListOfMovieWritersWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters, true);
            var repository = new MovieWritersRepository(mockContext.Object);
            var searchModel = new Mock<IMovieWriterSearchModel>();
            // Act
            var movieWriters = repository.Search(searchModel.Object).ToArray();
            // Assert
            Assert.Equal(1, movieWriters.Length);
            Assert.Equal(2, movieWriters[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", movieWriters[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact]
        public void Verify_Search_WithSelectStatement_Should_ReturnAListOfDynamicObjects()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters, true);
            var repository = new MovieWritersRepository(mockContext.Object);
            var searchModel = new Mock<IMovieWriterSearchModel>();
            // Act
            var movieWriters = repository.Search(searchModel.Object, i => new { i.Id, MyApiDetailUrl = i.ApiDetailUrl }).ToArray();
            // Assert
            Assert.Equal(1, movieWriters.Length);
            Assert.Equal(2, movieWriters[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", movieWriters[0].MyApiDetailUrl);
            // Stephen King was filtered out because he was Inactive
        }

        [Fact]
        public void Verify_Search_WithModifiedSince_Should_ReturnAListOfMovieWritersWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters, true);
            var repository = new MovieWritersRepository(mockContext.Object);
            var createDate = new System.DateTime(2015, 05, 28, 10, 45, 00).AddDays(1).AddMinutes(-1);
            //var searchModel = new Mock<IMovieWriterSearchModel>();
            //searchModel.Setup(m => m.ModifiedSince).Returns(() => createDate);
            var searchModel = new MovieWriterSearchModel { ModifiedSince = createDate };
            // Act
            var movieWriters = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, movieWriters.Length);
            Assert.Equal(2, movieWriters[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", movieWriters[0].ApiDetailUrl);
            // Stephen King was filtered out because he was created before the modified since date
        }

        [Fact]
        public void Verify_Search_WithPaging_Should_ReturnAListOfMovieWritersWithDataMatchingSearchParameters()
        {
            // Arrange
            Mock<IDbSet<MovieWriter>> mockSetMovieWriters;
            var mockContext = MovieWritersMockingSetup.DoMockingSetupForContext(true, out mockSetMovieWriters);
            var repository = new MovieWritersRepository(mockContext.Object);
            var searchModel = new MovieWriterSearchModel { Paging = new Paging { Skip = 1, Take = 1 } };
            // Act
            var movieWriters = repository.Search(searchModel/*.Object*/).ToArray();
            // Assert
            Assert.Equal(1, movieWriters.Length);
            Assert.Equal(2, movieWriters[0].Id);
            Assert.Equal("/TEST/NIVEN-LARRY", movieWriters[0].ApiDetailUrl);
            // Stephen King was filtered out because he was Skipped
        }
    }
}
