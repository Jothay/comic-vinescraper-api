// <auto-generated>
// <copyright file="Objects.IObjectAliasRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ObjectAliasesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class ObjectAliasesRepository : RepositoryBase, IObjectAliasesRepository
    {
        public ObjectAliasesRepository(object context) : base(context) { }

        public void Add(IObjectAlias entity)
        {
            Context.ObjectAliases.Add((ObjectAlias)entity);
        }

        public void Remove(IObjectAlias entity)
        {
            Context.ObjectAliases.Remove((ObjectAlias)entity);
        }

        public void Deactivate(IObjectAlias entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IObjectAlias entity)
        {
            Context.SetModified(entity);
        }

        public IObjectAlias Get(int id)
        {
            return Context.ObjectAliases.FirstOrDefault(r => r.Id == id);
        }

        public IObjectAlias Get(string key)
        {
            return Context.ObjectAliases.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IObjectAlias> List => Context.ObjectAliases;

        public IEnumerable<dynamic> Search(IObjectAliasSearchModel searchModel, System.Func<IObjectAlias, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IObjectAlias> Search(IObjectAliasSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IObjectAlias> SearchCommon(IObjectAliasSearchModel searchModel, bool requireActive)
        {
            return Context.ObjectAliases
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class ObjectAliasSearchExtensions
    {
    } // end ObjectAliasSearchExtensions
}
