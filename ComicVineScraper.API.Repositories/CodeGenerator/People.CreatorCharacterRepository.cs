// <auto-generated>
// <copyright file="People.CreatorCharacterRepository.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the CreatorCharactersRepository class and a series of
// IQueryable extensions for the search process.</summary>
// <remarks>This file was auto-generated using RepositoryFileMaster.tt in
// ComicVineScraper.API.Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Repositories//.People
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class CreatorCharactersRepository : RepositoryBase, ICreatorCharactersRepository
    {
        public CreatorCharactersRepository(object context) : base(context) { }

        public void Add(ICreatorCharacter entity)
        {
            Context.CreatorCharacters.Add((CreatorCharacter)entity);
        }

        public void Remove(ICreatorCharacter entity)
        {
            Context.CreatorCharacters.Remove((CreatorCharacter)entity);
        }

        public void Deactivate(ICreatorCharacter entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(ICreatorCharacter entity)
        {
            Context.SetModified(entity);
        }

        public ICreatorCharacter Get(int id)
        {
            return Context.CreatorCharacters.FirstOrDefault(r => r.Id == id);
        }

        public ICreatorCharacter Get(string key)
        {
            return Context.CreatorCharacters.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<ICreatorCharacter> List => Context.CreatorCharacters;

        public IEnumerable<dynamic> Search(ICreatorCharacterSearchModel searchModel, System.Func<ICreatorCharacter, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<ICreatorCharacter> Search(ICreatorCharacterSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<ICreatorCharacter> SearchCommon(ICreatorCharacterSearchModel searchModel, bool requireActive)
        {
            return Context.CreatorCharacters
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class CreatorCharacterSearchExtensions
    {
    } // end CreatorCharacterSearchExtensions
}
