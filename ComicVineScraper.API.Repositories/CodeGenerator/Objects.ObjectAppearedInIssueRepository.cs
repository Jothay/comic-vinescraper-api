// <auto-generated>
// <copyright file="Objects.ObjectAppearedInIssueRepository.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the ObjectAppearedInIssuesRepository class and a series of
// IQueryable extensions for the search process.</summary>
// <remarks>This file was auto-generated using RepositoryFileMaster.tt in
// ComicVineScraper.API.Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Repositories//.Objects
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class ObjectAppearedInIssuesRepository : RepositoryBase, IObjectAppearedInIssuesRepository
    {
        public ObjectAppearedInIssuesRepository(object context) : base(context) { }

        public void Add(IObjectAppearedInIssue entity)
        {
            Context.ObjectAppearedInIssues.Add((ObjectAppearedInIssue)entity);
        }

        public void Remove(IObjectAppearedInIssue entity)
        {
            Context.ObjectAppearedInIssues.Remove((ObjectAppearedInIssue)entity);
        }

        public void Deactivate(IObjectAppearedInIssue entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IObjectAppearedInIssue entity)
        {
            Context.SetModified(entity);
        }

        public IObjectAppearedInIssue Get(int id)
        {
            return Context.ObjectAppearedInIssues.FirstOrDefault(r => r.Id == id);
        }

        public IObjectAppearedInIssue Get(string key)
        {
            return Context.ObjectAppearedInIssues.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IObjectAppearedInIssue> List => Context.ObjectAppearedInIssues;

        public IEnumerable<dynamic> Search(IObjectAppearedInIssueSearchModel searchModel, System.Func<IObjectAppearedInIssue, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IObjectAppearedInIssue> Search(IObjectAppearedInIssueSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IObjectAppearedInIssue> SearchCommon(IObjectAppearedInIssueSearchModel searchModel, bool requireActive)
        {
            return Context.ObjectAppearedInIssues
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class ObjectAppearedInIssueSearchExtensions
    {
    } // end ObjectAppearedInIssueSearchExtensions
}
