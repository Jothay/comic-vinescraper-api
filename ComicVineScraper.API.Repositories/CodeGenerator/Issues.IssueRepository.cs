// <auto-generated>
// <copyright file="Issues.IIssueRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the IssuesRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Issues
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class IssuesRepository : RepositoryBase, IIssuesRepository
    {
        public IssuesRepository(object context) : base(context) { }

        public void Add(IIssue entity)
        {
            Context.Issues.Add((Issue)entity);
        }

        public void Remove(IIssue entity)
        {
            Context.Issues.Remove((Issue)entity);
        }

        public void Deactivate(IIssue entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IIssue entity)
        {
            Context.SetModified(entity);
        }

        public IIssue Get(int id)
        {
            return Context.Issues.FirstOrDefault(r => r.Id == id);
        }

        public IIssue Get(string key)
        {
            return Context.Issues.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IIssue> List => Context.Issues;

        public IEnumerable<dynamic> Search(IIssueSearchModel searchModel, System.Func<IIssue, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IIssue> Search(IIssueSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IIssue> SearchCommon(IIssueSearchModel searchModel, bool requireActive)
        {
            return Context.Issues
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByHasStaffReview(searchModel.HasStaffReview)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class IssueSearchExtensions
    {
        public static IQueryable<Issue> FilterByHasStaffReview(this IQueryable<Issue> query, bool? hasstaffreview)
        {
            if (!hasstaffreview.HasValue) { return query; }
            return query.Where(i => i.HasStaffReview == hasstaffreview);
        }

    } // end IssueSearchExtensions
}
