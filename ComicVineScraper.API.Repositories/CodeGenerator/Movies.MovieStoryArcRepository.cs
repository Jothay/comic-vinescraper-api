// <auto-generated>
// <copyright file="Movies.IMovieStoryArcRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the MovieStoryArcsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class MovieStoryArcsRepository : RepositoryBase, IMovieStoryArcsRepository
    {
        public MovieStoryArcsRepository(object context) : base(context) { }

        public void Add(IMovieStoryArc entity)
        {
            Context.MovieStoryArcs.Add((MovieStoryArc)entity);
        }

        public void Remove(IMovieStoryArc entity)
        {
            Context.MovieStoryArcs.Remove((MovieStoryArc)entity);
        }

        public void Deactivate(IMovieStoryArc entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IMovieStoryArc entity)
        {
            Context.SetModified(entity);
        }

        public IMovieStoryArc Get(int id)
        {
            return Context.MovieStoryArcs.FirstOrDefault(r => r.Id == id);
        }

        public IMovieStoryArc Get(string key)
        {
            return Context.MovieStoryArcs.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IMovieStoryArc> List => Context.MovieStoryArcs;

        public IEnumerable<dynamic> Search(IMovieStoryArcSearchModel searchModel, System.Func<IMovieStoryArc, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IMovieStoryArc> Search(IMovieStoryArcSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IMovieStoryArc> SearchCommon(IMovieStoryArcSearchModel searchModel, bool requireActive)
        {
            return Context.MovieStoryArcs
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class MovieStoryArcSearchExtensions
    {
    } // end MovieStoryArcSearchExtensions
}
