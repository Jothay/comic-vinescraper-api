// <auto-generated>
// <copyright file="Promos.PromoRepository.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the PromosRepository class and a series of
// IQueryable extensions for the search process.</summary>
// <remarks>This file was auto-generated using RepositoryFileMaster.tt in
// ComicVineScraper.API.Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Repositories//.Promos
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class PromosRepository : RepositoryBase, IPromosRepository
    {
        public PromosRepository(object context) : base(context) { }

        public void Add(IPromo entity)
        {
            Context.Promos.Add((Promo)entity);
        }

        public void Remove(IPromo entity)
        {
            Context.Promos.Remove((Promo)entity);
        }

        public void Deactivate(IPromo entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IPromo entity)
        {
            Context.SetModified(entity);
        }

        public IPromo Get(int id)
        {
            return Context.Promos.FirstOrDefault(r => r.Id == id);
        }

        public IPromo Get(string key)
        {
            return Context.Promos.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IPromo> List => Context.Promos;

        public IEnumerable<dynamic> Search(IPromoSearchModel searchModel, System.Func<IPromo, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IPromo> Search(IPromoSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IPromo> SearchCommon(IPromoSearchModel searchModel, bool requireActive)
        {
            return Context.Promos
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class PromoSearchExtensions
    {
    } // end PromoSearchExtensions
}
