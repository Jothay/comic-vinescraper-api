// <auto-generated>
// <copyright file="Videos.VideoRepository.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the VideosRepository class and a series of
// IQueryable extensions for the search process.</summary>
// <remarks>This file was auto-generated using RepositoryFileMaster.tt in
// ComicVineScraper.API.Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Repositories//.Videos
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class VideosRepository : RepositoryBase, IVideosRepository
    {
        public VideosRepository(object context) : base(context) { }

        public void Add(IVideo entity)
        {
            Context.Videos.Add((Video)entity);
        }

        public void Remove(IVideo entity)
        {
            Context.Videos.Remove((Video)entity);
        }

        public void Deactivate(IVideo entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IVideo entity)
        {
            Context.SetModified(entity);
        }

        public IVideo Get(int id)
        {
            return Context.Videos.FirstOrDefault(r => r.Id == id);
        }

        public IVideo Get(string key)
        {
            return Context.Videos.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IVideo> List => Context.Videos;

        public IEnumerable<dynamic> Search(IVideoSearchModel searchModel, System.Func<IVideo, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IVideo> Search(IVideoSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IVideo> SearchCommon(IVideoSearchModel searchModel, bool requireActive)
        {
            return Context.Videos
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class VideoSearchExtensions
    {
    } // end VideoSearchExtensions
}
