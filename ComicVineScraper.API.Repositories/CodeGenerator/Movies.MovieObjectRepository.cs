// <auto-generated>
// <copyright file="Movies.MovieObjectRepository.cs" company="jothay.com">
// Copyright (c) 2015 Jothay Tech, Inc. All rights reserved.
// </copyright>
// <summary>Declares the MovieObjectsRepository class and a series of
// IQueryable extensions for the search process.</summary>
// <remarks>This file was auto-generated using RepositoryFileMaster.tt in
// ComicVineScraper.API.Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVineScraper.API.Repositories//.Movies
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class MovieObjectsRepository : RepositoryBase, IMovieObjectsRepository
    {
        public MovieObjectsRepository(object context) : base(context) { }

        public void Add(IMovieObject entity)
        {
            Context.MovieObjects.Add((MovieObject)entity);
        }

        public void Remove(IMovieObject entity)
        {
            Context.MovieObjects.Remove((MovieObject)entity);
        }

        public void Deactivate(IMovieObject entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IMovieObject entity)
        {
            Context.SetModified(entity);
        }

        public IMovieObject Get(int id)
        {
            return Context.MovieObjects.FirstOrDefault(r => r.Id == id);
        }

        public IMovieObject Get(string key)
        {
            return Context.MovieObjects.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IMovieObject> List => Context.MovieObjects;

        public IEnumerable<dynamic> Search(IMovieObjectSearchModel searchModel, System.Func<IMovieObject, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IMovieObject> Search(IMovieObjectSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IMovieObject> SearchCommon(IMovieObjectSearchModel searchModel, bool requireActive)
        {
            return Context.MovieObjects
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class MovieObjectSearchExtensions
    {
    } // end MovieObjectSearchExtensions
}
