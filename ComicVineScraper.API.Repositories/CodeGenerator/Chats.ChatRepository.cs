// <auto-generated>
// <copyright file="Chats.IChatRepository.cs" company="clarityventures.com">
// Copyright (c) 2015 Clarity Ventures, Inc. All rights reserved.
// </copyright>
// <summary>Implements the ChatsRepository Class.</summary>
// <remarks>This file was autogenerated using RepositoryFileMaster.tt in ComicVine.API.Repositories\Repositories\CodeGenerator</remarks>
// </auto-generated>
namespace ComicVine.API.Repositories//.Chats
{
    using System.Collections.Generic;
    using System.Linq;
    using DataModel.Schema;
    using Interfaces.DataModels;
    using Interfaces.Repositories;
    using Interfaces.SearchModels;

    public class ChatsRepository : RepositoryBase, IChatsRepository
    {
        public ChatsRepository(object context) : base(context) { }

        public void Add(IChat entity)
        {
            Context.Chats.Add((Chat)entity);
        }

        public void Remove(IChat entity)
        {
            Context.Chats.Remove((Chat)entity);
        }

        public void Deactivate(IChat entity)
        {
            entity.Active = false;
            Update(entity);
        }

        public void Update(IChat entity)
        {
            Context.SetModified(entity);
        }

        public IChat Get(int id)
        {
            return Context.Chats.FirstOrDefault(r => r.Id == id);
        }

        public IChat Get(string key)
        {
            return Context.Chats.FirstOrDefault(r => r.CustomKey == key);
        }

        public IEnumerable<IChat> List => Context.Chats;

        public IEnumerable<dynamic> Search(IChatSearchModel searchModel, System.Func<IChat, dynamic> selectStatement, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive)
                .Select(selectStatement);
        }

        public IEnumerable<IChat> Search(IChatSearchModel searchModel, bool requireActive = true)
        {
            return SearchCommon(searchModel, requireActive);
        }

        // ReSharper disable once ReturnTypeCanBeEnumerable.Local
        // ReSharper disable once SuggestBaseTypeForParameter
        private IQueryable<IChat> SearchCommon(IChatSearchModel searchModel, bool requireActive)
        {
            return Context.Chats
                .FilterByBaseFilters(searchModel, requireActive)
                .FilterByNameableBaseFilters(searchModel)
                .FilterByChannelName(searchModel.ChannelName)
                .FilterByPaging(searchModel.Paging);
        }
    }

    public static partial class ChatSearchExtensions
    {
        public static IQueryable<Chat> FilterByChannelName(this IQueryable<Chat> query, string channelname)
        {
            if (string.IsNullOrWhiteSpace(channelname)) { return query; }
            var search = channelname.ToLower();
            return query.Where(i => i.ChannelName.ToLower().Contains(search));
        }

    } // end ChatSearchExtensions
}
